   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.mousekey_console_help,"ax",@progbits
  13               	mousekey_console_help:
  14               	.LFB21:
  15               		.file 1 "../../tmk_core/common/command.c"
   1:../../tmk_core/common/command.c **** /*
   2:../../tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/command.c **** 
   4:../../tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/command.c **** (at your option) any later version.
   8:../../tmk_core/common/command.c **** 
   9:../../tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/command.c **** GNU General Public License for more details.
  13:../../tmk_core/common/command.c **** 
  14:../../tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/command.c **** */
  17:../../tmk_core/common/command.c **** #include <stdint.h>
  18:../../tmk_core/common/command.c **** #include <stdbool.h>
  19:../../tmk_core/common/command.c **** #include "wait.h"
  20:../../tmk_core/common/command.c **** #include "keycode.h"
  21:../../tmk_core/common/command.c **** #include "host.h"
  22:../../tmk_core/common/command.c **** #include "keymap.h"
  23:../../tmk_core/common/command.c **** #include "print.h"
  24:../../tmk_core/common/command.c **** #include "debug.h"
  25:../../tmk_core/common/command.c **** #include "util.h"
  26:../../tmk_core/common/command.c **** #include "timer.h"
  27:../../tmk_core/common/command.c **** #include "keyboard.h"
  28:../../tmk_core/common/command.c **** #include "bootloader.h"
  29:../../tmk_core/common/command.c **** #include "action_layer.h"
  30:../../tmk_core/common/command.c **** #include "action_util.h"
  31:../../tmk_core/common/command.c **** #include "eeconfig.h"
  32:../../tmk_core/common/command.c **** #include "sleep_led.h"
  33:../../tmk_core/common/command.c **** #include "led.h"
  34:../../tmk_core/common/command.c **** #include "command.h"
  35:../../tmk_core/common/command.c **** #include "backlight.h"
  36:../../tmk_core/common/command.c **** 
  37:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../tmk_core/common/command.c **** #include "mousekey.h"
  39:../../tmk_core/common/command.c **** #endif
  40:../../tmk_core/common/command.c **** 
  41:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../tmk_core/common/command.c **** #   include "usb_keyboard.h"
  43:../../tmk_core/common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../tmk_core/common/command.c **** #       include "usb_extra.h"
  45:../../tmk_core/common/command.c **** #   endif
  46:../../tmk_core/common/command.c **** #endif
  47:../../tmk_core/common/command.c **** 
  48:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../tmk_core/common/command.c **** #   include "usbdrv.h"
  50:../../tmk_core/common/command.c **** #endif
  51:../../tmk_core/common/command.c **** 
  52:../../tmk_core/common/command.c **** 
  53:../../tmk_core/common/command.c **** static bool command_common(uint8_t code);
  54:../../tmk_core/common/command.c **** static void command_common_help(void);
  55:../../tmk_core/common/command.c **** static bool command_console(uint8_t code);
  56:../../tmk_core/common/command.c **** static void command_console_help(void);
  57:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../tmk_core/common/command.c **** static void mousekey_console_help(void);
  60:../../tmk_core/common/command.c **** #endif
  61:../../tmk_core/common/command.c **** 
  62:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  64:../../tmk_core/common/command.c **** 
  65:../../tmk_core/common/command.c **** 
  66:../../tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  67:../../tmk_core/common/command.c **** 
  68:../../tmk_core/common/command.c **** 
  69:../../tmk_core/common/command.c **** bool command_proc(uint8_t code)
  70:../../tmk_core/common/command.c **** {
  71:../../tmk_core/common/command.c ****     switch (command_state) {
  72:../../tmk_core/common/command.c ****         case ONESHOT:
  73:../../tmk_core/common/command.c ****             if (!IS_COMMAND())
  74:../../tmk_core/common/command.c ****                 return false;
  75:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  76:../../tmk_core/common/command.c ****             break;
  77:../../tmk_core/common/command.c ****         case CONSOLE:
  78:../../tmk_core/common/command.c ****             if (IS_COMMAND())
  79:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  80:../../tmk_core/common/command.c ****             else
  81:../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  82:../../tmk_core/common/command.c ****             break;
  83:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  84:../../tmk_core/common/command.c ****         case MOUSEKEY:
  85:../../tmk_core/common/command.c ****             mousekey_console(code);
  86:../../tmk_core/common/command.c ****             break;
  87:../../tmk_core/common/command.c **** #endif
  88:../../tmk_core/common/command.c ****         default:
  89:../../tmk_core/common/command.c ****             command_state = ONESHOT;
  90:../../tmk_core/common/command.c ****             return false;
  91:../../tmk_core/common/command.c ****     }
  92:../../tmk_core/common/command.c ****     return true;
  93:../../tmk_core/common/command.c **** }
  94:../../tmk_core/common/command.c **** 
  95:../../tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  96:../../tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  97:../../tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  98:../../tmk_core/common/command.c **** bool command_extra(uint8_t code)
  99:../../tmk_core/common/command.c **** {
 100:../../tmk_core/common/command.c ****     (void)code;
 101:../../tmk_core/common/command.c ****     return false;
 102:../../tmk_core/common/command.c **** }
 103:../../tmk_core/common/command.c **** 
 104:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 105:../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 106:../../tmk_core/common/command.c **** {
 107:../../tmk_core/common/command.c ****     (void)code;
 108:../../tmk_core/common/command.c ****     return false;
 109:../../tmk_core/common/command.c **** }
 110:../../tmk_core/common/command.c **** 
 111:../../tmk_core/common/command.c **** 
 112:../../tmk_core/common/command.c **** /***********************************************************
 113:../../tmk_core/common/command.c ****  * Command common
 114:../../tmk_core/common/command.c ****  ***********************************************************/
 115:../../tmk_core/common/command.c **** static void command_common_help(void)
 116:../../tmk_core/common/command.c **** {
 117:../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 118:../../tmk_core/common/command.c ****           "d:	debug\n"
 119:../../tmk_core/common/command.c ****           "x:	debug matrix\n"
 120:../../tmk_core/common/command.c ****           "k:	debug keyboard\n"
 121:../../tmk_core/common/command.c ****           "m:	debug mouse\n"
 122:../../tmk_core/common/command.c ****           "v:	version\n"
 123:../../tmk_core/common/command.c ****           "s:	status\n"
 124:../../tmk_core/common/command.c ****           "c:	console mode\n"
 125:../../tmk_core/common/command.c ****           "0-4:	layer0-4(F10-F4)\n"
 126:../../tmk_core/common/command.c ****           "Paus:	bootloader\n"
 127:../../tmk_core/common/command.c **** 
 128:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 129:../../tmk_core/common/command.c ****           "Caps:	Lock\n"
 130:../../tmk_core/common/command.c **** #endif
 131:../../tmk_core/common/command.c **** 
 132:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 133:../../tmk_core/common/command.c ****           "e:	eeprom\n"
 134:../../tmk_core/common/command.c **** #endif
 135:../../tmk_core/common/command.c **** 
 136:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 137:../../tmk_core/common/command.c ****           "n:	NKRO\n"
 138:../../tmk_core/common/command.c **** #endif
 139:../../tmk_core/common/command.c **** 
 140:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 141:../../tmk_core/common/command.c ****           "z:	sleep LED test\n"
 142:../../tmk_core/common/command.c **** #endif
 143:../../tmk_core/common/command.c ****     );
 144:../../tmk_core/common/command.c **** }
 145:../../tmk_core/common/command.c **** 
 146:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 147:../../tmk_core/common/command.c **** static void print_eeconfig(void)
 148:../../tmk_core/common/command.c **** {
 149:../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 150:../../tmk_core/common/command.c **** 
 151:../../tmk_core/common/command.c ****     debug_config_t dc;
 152:../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 153:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 154:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 155:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 156:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 157:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 158:../../tmk_core/common/command.c **** 
 159:../../tmk_core/common/command.c ****     keymap_config_t kc;
 160:../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 161:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 162:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 163:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 164:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 165:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 166:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 167:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 168:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 169:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 170:../../tmk_core/common/command.c **** 
 171:../../tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 172:../../tmk_core/common/command.c ****     backlight_config_t bc;
 173:../../tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 174:../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 175:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 176:../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 177:../../tmk_core/common/command.c **** #endif
 178:../../tmk_core/common/command.c **** }
 179:../../tmk_core/common/command.c **** #endif
 180:../../tmk_core/common/command.c **** 
 181:../../tmk_core/common/command.c **** static bool command_common(uint8_t code)
 182:../../tmk_core/common/command.c **** {
 183:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 184:../../tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 185:../../tmk_core/common/command.c **** #endif
 186:../../tmk_core/common/command.c ****     switch (code) {
 187:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 188:../../tmk_core/common/command.c ****         case KC_Z:
 189:../../tmk_core/common/command.c ****             // test breathing sleep LED
 190:../../tmk_core/common/command.c ****             print("Sleep LED test\n");
 191:../../tmk_core/common/command.c ****             sleep_led_toggle();
 192:../../tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 193:../../tmk_core/common/command.c ****             break;
 194:../../tmk_core/common/command.c **** #endif
 195:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 196:../../tmk_core/common/command.c ****         case KC_E:
 197:../../tmk_core/common/command.c ****             print("eeconfig:\n");
 198:../../tmk_core/common/command.c ****             print_eeconfig();
 199:../../tmk_core/common/command.c ****             break;
 200:../../tmk_core/common/command.c **** #endif
 201:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 202:../../tmk_core/common/command.c ****         case KC_CAPSLOCK:
 203:../../tmk_core/common/command.c ****             if (host_get_driver()) {
 204:../../tmk_core/common/command.c ****                 host_driver = host_get_driver();
 205:../../tmk_core/common/command.c ****                 clear_keyboard();
 206:../../tmk_core/common/command.c ****                 host_set_driver(0);
 207:../../tmk_core/common/command.c ****                 print("Locked.\n");
 208:../../tmk_core/common/command.c ****             } else {
 209:../../tmk_core/common/command.c ****                 host_set_driver(host_driver);
 210:../../tmk_core/common/command.c ****                 print("Unlocked.\n");
 211:../../tmk_core/common/command.c ****             }
 212:../../tmk_core/common/command.c ****             break;
 213:../../tmk_core/common/command.c **** #endif
 214:../../tmk_core/common/command.c ****         case KC_H:
 215:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 216:../../tmk_core/common/command.c ****             command_common_help();
 217:../../tmk_core/common/command.c ****             break;
 218:../../tmk_core/common/command.c ****         case KC_C:
 219:../../tmk_core/common/command.c ****             debug_matrix   = false;
 220:../../tmk_core/common/command.c ****             debug_keyboard = false;
 221:../../tmk_core/common/command.c ****             debug_mouse    = false;
 222:../../tmk_core/common/command.c ****             debug_enable   = false;
 223:../../tmk_core/common/command.c ****             command_console_help();
 224:../../tmk_core/common/command.c ****             print("C> ");
 225:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 226:../../tmk_core/common/command.c ****             break;
 227:../../tmk_core/common/command.c ****         case KC_PAUSE:
 228:../../tmk_core/common/command.c ****             clear_keyboard();
 229:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 230:../../tmk_core/common/command.c ****             wait_ms(1000);
 231:../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 232:../../tmk_core/common/command.c ****             break;
 233:../../tmk_core/common/command.c ****         case KC_D:
 234:../../tmk_core/common/command.c ****             if (debug_enable) {
 235:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 236:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 237:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 238:../../tmk_core/common/command.c ****                 debug_mouse    = false;
 239:../../tmk_core/common/command.c ****                 debug_enable   = false;
 240:../../tmk_core/common/command.c ****             } else {
 241:../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 242:../../tmk_core/common/command.c ****                 debug_enable   = true;
 243:../../tmk_core/common/command.c ****             }
 244:../../tmk_core/common/command.c ****             break;
 245:../../tmk_core/common/command.c ****         case KC_X: // debug matrix toggle
 246:../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 247:../../tmk_core/common/command.c ****             if (debug_matrix) {
 248:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 249:../../tmk_core/common/command.c ****                 debug_enable = true;
 250:../../tmk_core/common/command.c ****             } else {
 251:../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 252:../../tmk_core/common/command.c ****             }
 253:../../tmk_core/common/command.c ****             break;
 254:../../tmk_core/common/command.c ****         case KC_K: // debug keyboard toggle
 255:../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 256:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 257:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 258:../../tmk_core/common/command.c ****                 debug_enable = true;
 259:../../tmk_core/common/command.c ****             } else {
 260:../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 261:../../tmk_core/common/command.c ****             }
 262:../../tmk_core/common/command.c ****             break;
 263:../../tmk_core/common/command.c ****         case KC_M: // debug mouse toggle
 264:../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 265:../../tmk_core/common/command.c ****             if (debug_mouse) {
 266:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 267:../../tmk_core/common/command.c ****                 debug_enable = true;
 268:../../tmk_core/common/command.c ****             } else {
 269:../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 270:../../tmk_core/common/command.c ****             }
 271:../../tmk_core/common/command.c ****             break;
 272:../../tmk_core/common/command.c ****         case KC_V: // print version & information
 273:../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 274:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 275:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 276:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 277:../../tmk_core/common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 278:../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 279:../../tmk_core/common/command.c ****             /* build options */
 280:../../tmk_core/common/command.c ****             print("OPTIONS:"
 281:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 282:../../tmk_core/common/command.c ****             " PJRC"
 283:../../tmk_core/common/command.c **** #endif
 284:../../tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 285:../../tmk_core/common/command.c ****             " LUFA"
 286:../../tmk_core/common/command.c **** #endif
 287:../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 288:../../tmk_core/common/command.c ****             " VUSB"
 289:../../tmk_core/common/command.c **** #endif
 290:../../tmk_core/common/command.c **** #ifdef PROTOCOL_CHIBIOS
 291:../../tmk_core/common/command.c ****             " CHIBIOS"
 292:../../tmk_core/common/command.c **** #endif
 293:../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 294:../../tmk_core/common/command.c ****             " BOOTMAGIC"
 295:../../tmk_core/common/command.c **** #endif
 296:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 297:../../tmk_core/common/command.c ****             " MOUSEKEY"
 298:../../tmk_core/common/command.c **** #endif
 299:../../tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 300:../../tmk_core/common/command.c ****             " EXTRAKEY"
 301:../../tmk_core/common/command.c **** #endif
 302:../../tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 303:../../tmk_core/common/command.c ****             " CONSOLE"
 304:../../tmk_core/common/command.c **** #endif
 305:../../tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 306:../../tmk_core/common/command.c ****             " COMMAND"
 307:../../tmk_core/common/command.c **** #endif
 308:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 309:../../tmk_core/common/command.c ****             " NKRO"
 310:../../tmk_core/common/command.c **** #endif
 311:../../tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 312:../../tmk_core/common/command.c ****             " KEYMAP_SECTION"
 313:../../tmk_core/common/command.c **** #endif
 314:../../tmk_core/common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 315:../../tmk_core/common/command.c **** 
 316:../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 317:../../tmk_core/common/command.c **** #if defined(__AVR__)
 318:../../tmk_core/common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 319:../../tmk_core/common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 320:../../tmk_core/common/command.c **** #elif defined(__arm__)
 321:../../tmk_core/common/command.c ****             // TODO
 322:../../tmk_core/common/command.c ****             );
 323:../../tmk_core/common/command.c **** #endif
 324:../../tmk_core/common/command.c ****             break;
 325:../../tmk_core/common/command.c ****         case KC_S:
 326:../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 327:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 328:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 329:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 330:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 331:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 332:../../tmk_core/common/command.c **** #endif
 333:../../tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 334:../../tmk_core/common/command.c **** 
 335:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 336:../../tmk_core/common/command.c ****             print_val_hex8(UDCON);
 337:../../tmk_core/common/command.c ****             print_val_hex8(UDIEN);
 338:../../tmk_core/common/command.c ****             print_val_hex8(UDINT);
 339:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_leds);
 340:../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 341:../../tmk_core/common/command.c **** #endif
 342:../../tmk_core/common/command.c **** 
 343:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 344:../../tmk_core/common/command.c **** #   if USB_COUNT_SOF
 345:../../tmk_core/common/command.c ****             print_val_hex8(usbSofCount);
 346:../../tmk_core/common/command.c **** #   endif
 347:../../tmk_core/common/command.c **** #endif
 348:../../tmk_core/common/command.c ****             break;
 349:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 350:../../tmk_core/common/command.c ****         case KC_N:
 351:../../tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 352:../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 353:../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 354:../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 355:../../tmk_core/common/command.c ****             } else {
 356:../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 357:../../tmk_core/common/command.c ****             }
 358:../../tmk_core/common/command.c ****             break;
 359:../../tmk_core/common/command.c **** #endif
 360:../../tmk_core/common/command.c ****         case KC_ESC:
 361:../../tmk_core/common/command.c ****         case KC_GRV:
 362:../../tmk_core/common/command.c ****         case KC_0:
 363:../../tmk_core/common/command.c ****         case KC_F10:
 364:../../tmk_core/common/command.c ****             switch_default_layer(0);
 365:../../tmk_core/common/command.c ****             break;
 366:../../tmk_core/common/command.c ****         case KC_1 ... KC_9:
 367:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 368:../../tmk_core/common/command.c ****             break;
 369:../../tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 370:../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 371:../../tmk_core/common/command.c ****             break;
 372:../../tmk_core/common/command.c ****         default:
 373:../../tmk_core/common/command.c ****             print("?");
 374:../../tmk_core/common/command.c ****             return false;
 375:../../tmk_core/common/command.c ****     }
 376:../../tmk_core/common/command.c ****     return true;
 377:../../tmk_core/common/command.c **** }
 378:../../tmk_core/common/command.c **** 
 379:../../tmk_core/common/command.c **** 
 380:../../tmk_core/common/command.c **** /***********************************************************
 381:../../tmk_core/common/command.c ****  * Command console
 382:../../tmk_core/common/command.c ****  ***********************************************************/
 383:../../tmk_core/common/command.c **** static void command_console_help(void)
 384:../../tmk_core/common/command.c **** {
 385:../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
 386:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 387:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 388:../../tmk_core/common/command.c ****           "m:	mousekey\n"
 389:../../tmk_core/common/command.c **** #endif
 390:../../tmk_core/common/command.c ****     );
 391:../../tmk_core/common/command.c **** }
 392:../../tmk_core/common/command.c **** 
 393:../../tmk_core/common/command.c **** static bool command_console(uint8_t code)
 394:../../tmk_core/common/command.c **** {
 395:../../tmk_core/common/command.c ****     switch (code) {
 396:../../tmk_core/common/command.c ****         case KC_H:
 397:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 398:../../tmk_core/common/command.c ****             command_console_help();
 399:../../tmk_core/common/command.c ****             break;
 400:../../tmk_core/common/command.c ****         case KC_Q:
 401:../../tmk_core/common/command.c ****         case KC_ESC:
 402:../../tmk_core/common/command.c ****             command_state = ONESHOT;
 403:../../tmk_core/common/command.c ****             return false;
 404:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 405:../../tmk_core/common/command.c ****         case KC_M:
 406:../../tmk_core/common/command.c ****             mousekey_console_help();
 407:../../tmk_core/common/command.c ****             print("M> ");
 408:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 409:../../tmk_core/common/command.c ****             return true;
 410:../../tmk_core/common/command.c **** #endif
 411:../../tmk_core/common/command.c ****         default:
 412:../../tmk_core/common/command.c ****             print("?");
 413:../../tmk_core/common/command.c ****             return false;
 414:../../tmk_core/common/command.c ****     }
 415:../../tmk_core/common/command.c ****     print("C> ");
 416:../../tmk_core/common/command.c ****     return true;
 417:../../tmk_core/common/command.c **** }
 418:../../tmk_core/common/command.c **** 
 419:../../tmk_core/common/command.c **** 
 420:../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 421:../../tmk_core/common/command.c **** /***********************************************************
 422:../../tmk_core/common/command.c ****  * Mousekey console
 423:../../tmk_core/common/command.c ****  ***********************************************************/
 424:../../tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 425:../../tmk_core/common/command.c **** 
 426:../../tmk_core/common/command.c **** static void mousekey_param_print(void)
 427:../../tmk_core/common/command.c **** {
 428:../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 429:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 430:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 431:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 432:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 433:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 434:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 435:../../tmk_core/common/command.c **** }
 436:../../tmk_core/common/command.c **** 
 437:../../tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 438:../../tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 439:../../tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 440:../../tmk_core/common/command.c **** {
 441:../../tmk_core/common/command.c ****     switch (param) {
 442:../../tmk_core/common/command.c ****         case 1:
 443:../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 444:../../tmk_core/common/command.c ****                 mk_delay += inc;
 445:../../tmk_core/common/command.c ****             else
 446:../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 447:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 448:../../tmk_core/common/command.c ****             break;
 449:../../tmk_core/common/command.c ****         case 2:
 450:../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 451:../../tmk_core/common/command.c ****                 mk_interval += inc;
 452:../../tmk_core/common/command.c ****             else
 453:../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 454:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 455:../../tmk_core/common/command.c ****             break;
 456:../../tmk_core/common/command.c ****         case 3:
 457:../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 458:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 459:../../tmk_core/common/command.c ****             else
 460:../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 461:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 462:../../tmk_core/common/command.c ****             break;
 463:../../tmk_core/common/command.c ****         case 4:
 464:../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 465:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 466:../../tmk_core/common/command.c ****             else
 467:../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 468:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 469:../../tmk_core/common/command.c ****             break;
 470:../../tmk_core/common/command.c ****         case 5:
 471:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 472:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 473:../../tmk_core/common/command.c ****             else
 474:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 475:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 476:../../tmk_core/common/command.c ****             break;
 477:../../tmk_core/common/command.c ****         case 6:
 478:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 479:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 480:../../tmk_core/common/command.c ****             else
 481:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 482:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 483:../../tmk_core/common/command.c ****             break;
 484:../../tmk_core/common/command.c ****     }
 485:../../tmk_core/common/command.c **** }
 486:../../tmk_core/common/command.c **** 
 487:../../tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 488:../../tmk_core/common/command.c **** {
 489:../../tmk_core/common/command.c ****     switch (param) {
 490:../../tmk_core/common/command.c ****         case 1:
 491:../../tmk_core/common/command.c ****             if (mk_delay > dec)
 492:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 493:../../tmk_core/common/command.c ****             else
 494:../../tmk_core/common/command.c ****                 mk_delay = 0;
 495:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 496:../../tmk_core/common/command.c ****             break;
 497:../../tmk_core/common/command.c ****         case 2:
 498:../../tmk_core/common/command.c ****             if (mk_interval > dec)
 499:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 500:../../tmk_core/common/command.c ****             else
 501:../../tmk_core/common/command.c ****                 mk_interval = 0;
 502:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 503:../../tmk_core/common/command.c ****             break;
 504:../../tmk_core/common/command.c ****         case 3:
 505:../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 506:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 507:../../tmk_core/common/command.c ****             else
 508:../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 509:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 510:../../tmk_core/common/command.c ****             break;
 511:../../tmk_core/common/command.c ****         case 4:
 512:../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 513:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 514:../../tmk_core/common/command.c ****             else
 515:../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 516:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 517:../../tmk_core/common/command.c ****             break;
 518:../../tmk_core/common/command.c ****         case 5:
 519:../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 520:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 521:../../tmk_core/common/command.c ****             else
 522:../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 523:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 524:../../tmk_core/common/command.c ****             break;
 525:../../tmk_core/common/command.c ****         case 6:
 526:../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 527:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 528:../../tmk_core/common/command.c ****             else
 529:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 530:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 531:../../tmk_core/common/command.c ****             break;
 532:../../tmk_core/common/command.c ****     }
 533:../../tmk_core/common/command.c **** }
 534:../../tmk_core/common/command.c **** 
 535:../../tmk_core/common/command.c **** static void mousekey_console_help(void)
 536:../../tmk_core/common/command.c **** {
  16               		.loc 1 536 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 537:../../tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  22               		.loc 1 537 0
  23 0000 80E0      		ldi r24,lo8(__c.2789)
  24 0002 90E0      		ldi r25,hi8(__c.2789)
  25 0004 0E94 0000 		call xputs
  26               	.LVL0:
 538:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 539:../../tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 540:../../tmk_core/common/command.c ****           "2:	interval(ms)\n"
 541:../../tmk_core/common/command.c ****           "3:	max_speed\n"
 542:../../tmk_core/common/command.c ****           "4:	time_to_max\n"
 543:../../tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 544:../../tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 545:../../tmk_core/common/command.c ****           "\n"
 546:../../tmk_core/common/command.c ****           "p:	print values\n"
 547:../../tmk_core/common/command.c ****           "d:	set defaults\n"
 548:../../tmk_core/common/command.c ****           "up:	+1\n"
 549:../../tmk_core/common/command.c ****           "down:	-1\n"
 550:../../tmk_core/common/command.c ****           "pgup:	+10\n"
 551:../../tmk_core/common/command.c ****           "pgdown:	-10\n"
 552:../../tmk_core/common/command.c ****           "\n"
 553:../../tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 554:../../tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n" 
  27               		.loc 1 554 0
  28 0008 1F92      		push __zero_reg__
  29               	.LCFI0:
  30               		.cfi_def_cfa_offset 3
  31 000a 81E0      		ldi r24,lo8(1)
  32 000c 8F93      		push r24
  33               	.LCFI1:
  34               		.cfi_def_cfa_offset 4
  35 000e 1F92      		push __zero_reg__
  36               	.LCFI2:
  37               		.cfi_def_cfa_offset 5
  38 0010 85E0      		ldi r24,lo8(5)
  39 0012 8F93      		push r24
  40               	.LCFI3:
  41               		.cfi_def_cfa_offset 6
  42 0014 80E0      		ldi r24,lo8(__c.2791)
  43 0016 90E0      		ldi r25,hi8(__c.2791)
  44 0018 9F93      		push r25
  45               	.LCFI4:
  46               		.cfi_def_cfa_offset 7
  47 001a 8F93      		push r24
  48               	.LCFI5:
  49               		.cfi_def_cfa_offset 8
  50 001c 0E94 0000 		call __xprintf
  51               	.LVL1:
  52 0020 0F90      		pop __tmp_reg__
  53 0022 0F90      		pop __tmp_reg__
  54 0024 0F90      		pop __tmp_reg__
  55 0026 0F90      		pop __tmp_reg__
  56 0028 0F90      		pop __tmp_reg__
  57 002a 0F90      		pop __tmp_reg__
  58               	.LCFI6:
  59               		.cfi_def_cfa_offset 2
  60 002c 0895      		ret
  61               		.cfi_endproc
  62               	.LFE21:
  64               		.section	.text.mousekey_param_inc,"ax",@progbits
  66               	mousekey_param_inc:
  67               	.LFB19:
 440:../../tmk_core/common/command.c ****     switch (param) {
  68               		.loc 1 440 0
  69               		.cfi_startproc
  70               	.LVL2:
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
 441:../../tmk_core/common/command.c ****         case 1:
  75               		.loc 1 441 0
  76 0000 8330      		cpi r24,lo8(3)
  77 0002 01F0      		breq .L4
  78 0004 00F4      		brsh .L5
  79 0006 8130      		cpi r24,lo8(1)
  80 0008 01F0      		breq .L6
  81 000a 8230      		cpi r24,lo8(2)
  82 000c 01F0      		breq .L7
  83 000e 0895      		ret
  84               	.L5:
  85 0010 8530      		cpi r24,lo8(5)
  86 0012 01F4      		brne .+2
  87 0014 00C0      		rjmp .L8
  88 0016 00F4      		brsh .+2
  89 0018 00C0      		rjmp .L9
  90 001a 8630      		cpi r24,lo8(6)
  91 001c 01F4      		brne .+2
  92 001e 00C0      		rjmp .L10
  93 0020 0895      		ret
  94               	.L6:
 443:../../tmk_core/common/command.c ****                 mk_delay += inc;
  95               		.loc 1 443 0
  96 0022 2091 0000 		lds r18,mk_delay
  97 0026 862F      		mov r24,r22
  98               	.LVL3:
  99 0028 90E0      		ldi r25,0
 100 002a 820F      		add r24,r18
 101 002c 911D      		adc r25,__zero_reg__
 102 002e 8F3F      		cpi r24,-1
 103 0030 9105      		cpc r25,__zero_reg__
 104 0032 00F4      		brsh .L11
 444:../../tmk_core/common/command.c ****             else
 105               		.loc 1 444 0
 106 0034 620F      		add r22,r18
 107               	.LVL4:
 108 0036 6093 0000 		sts mk_delay,r22
 109 003a 00C0      		rjmp .L12
 110               	.LVL5:
 111               	.L11:
 446:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 112               		.loc 1 446 0
 113 003c 8FEF      		ldi r24,lo8(-1)
 114 003e 8093 0000 		sts mk_delay,r24
 115               	.LVL6:
 116               	.L12:
 447:../../tmk_core/common/command.c ****             break;
 117               		.loc 1 447 0
 118 0042 8091 0000 		lds r24,mk_delay
 119 0046 1F92      		push __zero_reg__
 120               	.LCFI7:
 121               		.cfi_remember_state
 122               		.cfi_def_cfa_offset 3
 123 0048 8F93      		push r24
 124               	.LCFI8:
 125               		.cfi_def_cfa_offset 4
 126 004a 80E0      		ldi r24,lo8(__c.2745)
 127 004c 90E0      		ldi r25,hi8(__c.2745)
 128 004e 00C0      		rjmp .L23
 129               	.LVL7:
 130               	.L7:
 131               	.LCFI9:
 132               		.cfi_restore_state
 450:../../tmk_core/common/command.c ****                 mk_interval += inc;
 133               		.loc 1 450 0
 134 0050 2091 0000 		lds r18,mk_interval
 135 0054 862F      		mov r24,r22
 136               	.LVL8:
 137 0056 90E0      		ldi r25,0
 138 0058 820F      		add r24,r18
 139 005a 911D      		adc r25,__zero_reg__
 140 005c 8F3F      		cpi r24,-1
 141 005e 9105      		cpc r25,__zero_reg__
 142 0060 00F4      		brsh .L13
 451:../../tmk_core/common/command.c ****             else
 143               		.loc 1 451 0
 144 0062 620F      		add r22,r18
 145               	.LVL9:
 146 0064 6093 0000 		sts mk_interval,r22
 147 0068 00C0      		rjmp .L14
 148               	.LVL10:
 149               	.L13:
 453:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 150               		.loc 1 453 0
 151 006a 8FEF      		ldi r24,lo8(-1)
 152 006c 8093 0000 		sts mk_interval,r24
 153               	.LVL11:
 154               	.L14:
 454:../../tmk_core/common/command.c ****             break;
 155               		.loc 1 454 0
 156 0070 8091 0000 		lds r24,mk_interval
 157 0074 1F92      		push __zero_reg__
 158               	.LCFI10:
 159               		.cfi_remember_state
 160               		.cfi_def_cfa_offset 3
 161 0076 8F93      		push r24
 162               	.LCFI11:
 163               		.cfi_def_cfa_offset 4
 164 0078 80E0      		ldi r24,lo8(__c.2749)
 165 007a 90E0      		ldi r25,hi8(__c.2749)
 166 007c 00C0      		rjmp .L23
 167               	.LVL12:
 168               	.L4:
 169               	.LCFI12:
 170               		.cfi_restore_state
 457:../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 171               		.loc 1 457 0
 172 007e 2091 0000 		lds r18,mk_max_speed
 173 0082 862F      		mov r24,r22
 174               	.LVL13:
 175 0084 90E0      		ldi r25,0
 176 0086 820F      		add r24,r18
 177 0088 911D      		adc r25,__zero_reg__
 178 008a 8F3F      		cpi r24,-1
 179 008c 9105      		cpc r25,__zero_reg__
 180 008e 00F4      		brsh .L15
 458:../../tmk_core/common/command.c ****             else
 181               		.loc 1 458 0
 182 0090 620F      		add r22,r18
 183               	.LVL14:
 184 0092 6093 0000 		sts mk_max_speed,r22
 185 0096 00C0      		rjmp .L16
 186               	.LVL15:
 187               	.L15:
 460:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 188               		.loc 1 460 0
 189 0098 8FEF      		ldi r24,lo8(-1)
 190 009a 8093 0000 		sts mk_max_speed,r24
 191               	.LVL16:
 192               	.L16:
 461:../../tmk_core/common/command.c ****             break;
 193               		.loc 1 461 0
 194 009e 8091 0000 		lds r24,mk_max_speed
 195 00a2 1F92      		push __zero_reg__
 196               	.LCFI13:
 197               		.cfi_remember_state
 198               		.cfi_def_cfa_offset 3
 199 00a4 8F93      		push r24
 200               	.LCFI14:
 201               		.cfi_def_cfa_offset 4
 202 00a6 80E0      		ldi r24,lo8(__c.2752)
 203 00a8 90E0      		ldi r25,hi8(__c.2752)
 204 00aa 00C0      		rjmp .L23
 205               	.LVL17:
 206               	.L9:
 207               	.LCFI15:
 208               		.cfi_restore_state
 464:../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 209               		.loc 1 464 0
 210 00ac 2091 0000 		lds r18,mk_time_to_max
 211 00b0 862F      		mov r24,r22
 212               	.LVL18:
 213 00b2 90E0      		ldi r25,0
 214 00b4 820F      		add r24,r18
 215 00b6 911D      		adc r25,__zero_reg__
 216 00b8 8F3F      		cpi r24,-1
 217 00ba 9105      		cpc r25,__zero_reg__
 218 00bc 00F4      		brsh .L17
 465:../../tmk_core/common/command.c ****             else
 219               		.loc 1 465 0
 220 00be 620F      		add r22,r18
 221               	.LVL19:
 222 00c0 6093 0000 		sts mk_time_to_max,r22
 223 00c4 00C0      		rjmp .L18
 224               	.LVL20:
 225               	.L17:
 467:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 226               		.loc 1 467 0
 227 00c6 8FEF      		ldi r24,lo8(-1)
 228 00c8 8093 0000 		sts mk_time_to_max,r24
 229               	.LVL21:
 230               	.L18:
 468:../../tmk_core/common/command.c ****             break;
 231               		.loc 1 468 0
 232 00cc 8091 0000 		lds r24,mk_time_to_max
 233 00d0 1F92      		push __zero_reg__
 234               	.LCFI16:
 235               		.cfi_remember_state
 236               		.cfi_def_cfa_offset 3
 237 00d2 8F93      		push r24
 238               	.LCFI17:
 239               		.cfi_def_cfa_offset 4
 240 00d4 80E0      		ldi r24,lo8(__c.2755)
 241 00d6 90E0      		ldi r25,hi8(__c.2755)
 242 00d8 00C0      		rjmp .L23
 243               	.LVL22:
 244               	.L8:
 245               	.LCFI18:
 246               		.cfi_restore_state
 471:../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 247               		.loc 1 471 0
 248 00da 2091 0000 		lds r18,mk_wheel_max_speed
 249 00de 862F      		mov r24,r22
 250               	.LVL23:
 251 00e0 90E0      		ldi r25,0
 252 00e2 820F      		add r24,r18
 253 00e4 911D      		adc r25,__zero_reg__
 254 00e6 8F3F      		cpi r24,-1
 255 00e8 9105      		cpc r25,__zero_reg__
 256 00ea 00F4      		brsh .L19
 472:../../tmk_core/common/command.c ****             else
 257               		.loc 1 472 0
 258 00ec 620F      		add r22,r18
 259               	.LVL24:
 260 00ee 6093 0000 		sts mk_wheel_max_speed,r22
 261 00f2 00C0      		rjmp .L20
 262               	.LVL25:
 263               	.L19:
 474:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 264               		.loc 1 474 0
 265 00f4 8FEF      		ldi r24,lo8(-1)
 266 00f6 8093 0000 		sts mk_wheel_max_speed,r24
 267               	.LVL26:
 268               	.L20:
 475:../../tmk_core/common/command.c ****             break;
 269               		.loc 1 475 0
 270 00fa 8091 0000 		lds r24,mk_wheel_max_speed
 271 00fe 1F92      		push __zero_reg__
 272               	.LCFI19:
 273               		.cfi_remember_state
 274               		.cfi_def_cfa_offset 3
 275 0100 8F93      		push r24
 276               	.LCFI20:
 277               		.cfi_def_cfa_offset 4
 278 0102 80E0      		ldi r24,lo8(__c.2758)
 279 0104 90E0      		ldi r25,hi8(__c.2758)
 280 0106 00C0      		rjmp .L23
 281               	.LVL27:
 282               	.L10:
 283               	.LCFI21:
 284               		.cfi_restore_state
 478:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 285               		.loc 1 478 0
 286 0108 2091 0000 		lds r18,mk_wheel_time_to_max
 287 010c 862F      		mov r24,r22
 288               	.LVL28:
 289 010e 90E0      		ldi r25,0
 290 0110 820F      		add r24,r18
 291 0112 911D      		adc r25,__zero_reg__
 292 0114 8F3F      		cpi r24,-1
 293 0116 9105      		cpc r25,__zero_reg__
 294 0118 00F4      		brsh .L21
 479:../../tmk_core/common/command.c ****             else
 295               		.loc 1 479 0
 296 011a 620F      		add r22,r18
 297               	.LVL29:
 298 011c 6093 0000 		sts mk_wheel_time_to_max,r22
 299 0120 00C0      		rjmp .L22
 300               	.LVL30:
 301               	.L21:
 481:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 302               		.loc 1 481 0
 303 0122 8FEF      		ldi r24,lo8(-1)
 304 0124 8093 0000 		sts mk_wheel_time_to_max,r24
 305               	.LVL31:
 306               	.L22:
 482:../../tmk_core/common/command.c ****             break;
 307               		.loc 1 482 0
 308 0128 8091 0000 		lds r24,mk_wheel_time_to_max
 309 012c 1F92      		push __zero_reg__
 310               	.LCFI22:
 311               		.cfi_def_cfa_offset 3
 312 012e 8F93      		push r24
 313               	.LCFI23:
 314               		.cfi_def_cfa_offset 4
 315 0130 80E0      		ldi r24,lo8(__c.2761)
 316 0132 90E0      		ldi r25,hi8(__c.2761)
 317               	.L23:
 318 0134 9F93      		push r25
 319               	.LCFI24:
 320               		.cfi_def_cfa_offset 5
 321 0136 8F93      		push r24
 322               	.LCFI25:
 323               		.cfi_def_cfa_offset 6
 324 0138 0E94 0000 		call __xprintf
 325               	.LVL32:
 483:../../tmk_core/common/command.c ****     }
 326               		.loc 1 483 0
 327 013c 0F90      		pop __tmp_reg__
 328 013e 0F90      		pop __tmp_reg__
 329 0140 0F90      		pop __tmp_reg__
 330 0142 0F90      		pop __tmp_reg__
 331               	.LCFI26:
 332               		.cfi_def_cfa_offset 2
 333 0144 0895      		ret
 334               		.cfi_endproc
 335               	.LFE19:
 337               		.section	.text.mousekey_param_dec,"ax",@progbits
 339               	mousekey_param_dec:
 340               	.LFB20:
 488:../../tmk_core/common/command.c ****     switch (param) {
 341               		.loc 1 488 0
 342               		.cfi_startproc
 343               	.LVL33:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 489:../../tmk_core/common/command.c ****         case 1:
 348               		.loc 1 489 0
 349 0000 8330      		cpi r24,lo8(3)
 350 0002 01F0      		breq .L27
 351 0004 00F4      		brsh .L28
 352 0006 8130      		cpi r24,lo8(1)
 353 0008 01F0      		breq .L29
 354 000a 8230      		cpi r24,lo8(2)
 355 000c 01F0      		breq .L30
 356 000e 0895      		ret
 357               	.L28:
 358 0010 8530      		cpi r24,lo8(5)
 359 0012 01F4      		brne .+2
 360 0014 00C0      		rjmp .L31
 361 0016 00F0      		brlo .L32
 362 0018 8630      		cpi r24,lo8(6)
 363 001a 01F4      		brne .+2
 364 001c 00C0      		rjmp .L33
 365 001e 0895      		ret
 366               	.L29:
 491:../../tmk_core/common/command.c ****                 mk_delay -= dec;
 367               		.loc 1 491 0
 368 0020 8091 0000 		lds r24,mk_delay
 369               	.LVL34:
 370 0024 6817      		cp r22,r24
 371 0026 00F4      		brsh .L34
 492:../../tmk_core/common/command.c ****             else
 372               		.loc 1 492 0
 373 0028 861B      		sub r24,r22
 374 002a 8093 0000 		sts mk_delay,r24
 375 002e 00C0      		rjmp .L35
 376               	.L34:
 494:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 377               		.loc 1 494 0
 378 0030 1092 0000 		sts mk_delay,__zero_reg__
 379               	.L35:
 495:../../tmk_core/common/command.c ****             break;
 380               		.loc 1 495 0
 381 0034 8091 0000 		lds r24,mk_delay
 382 0038 1F92      		push __zero_reg__
 383               	.LCFI27:
 384               		.cfi_remember_state
 385               		.cfi_def_cfa_offset 3
 386 003a 8F93      		push r24
 387               	.LCFI28:
 388               		.cfi_def_cfa_offset 4
 389 003c 80E0      		ldi r24,lo8(__c.2768)
 390 003e 90E0      		ldi r25,hi8(__c.2768)
 391 0040 00C0      		rjmp .L46
 392               	.LVL35:
 393               	.L30:
 394               	.LCFI29:
 395               		.cfi_restore_state
 498:../../tmk_core/common/command.c ****                 mk_interval -= dec;
 396               		.loc 1 498 0
 397 0042 8091 0000 		lds r24,mk_interval
 398               	.LVL36:
 399 0046 6817      		cp r22,r24
 400 0048 00F4      		brsh .L36
 499:../../tmk_core/common/command.c ****             else
 401               		.loc 1 499 0
 402 004a 861B      		sub r24,r22
 403 004c 8093 0000 		sts mk_interval,r24
 404 0050 00C0      		rjmp .L37
 405               	.L36:
 501:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 406               		.loc 1 501 0
 407 0052 1092 0000 		sts mk_interval,__zero_reg__
 408               	.L37:
 502:../../tmk_core/common/command.c ****             break;
 409               		.loc 1 502 0
 410 0056 8091 0000 		lds r24,mk_interval
 411 005a 1F92      		push __zero_reg__
 412               	.LCFI30:
 413               		.cfi_remember_state
 414               		.cfi_def_cfa_offset 3
 415 005c 8F93      		push r24
 416               	.LCFI31:
 417               		.cfi_def_cfa_offset 4
 418 005e 80E0      		ldi r24,lo8(__c.2772)
 419 0060 90E0      		ldi r25,hi8(__c.2772)
 420 0062 00C0      		rjmp .L46
 421               	.LVL37:
 422               	.L27:
 423               	.LCFI32:
 424               		.cfi_restore_state
 505:../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 425               		.loc 1 505 0
 426 0064 8091 0000 		lds r24,mk_max_speed
 427               	.LVL38:
 428 0068 6817      		cp r22,r24
 429 006a 00F4      		brsh .L38
 506:../../tmk_core/common/command.c ****             else
 430               		.loc 1 506 0
 431 006c 861B      		sub r24,r22
 432 006e 8093 0000 		sts mk_max_speed,r24
 433 0072 00C0      		rjmp .L39
 434               	.L38:
 508:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 435               		.loc 1 508 0
 436 0074 1092 0000 		sts mk_max_speed,__zero_reg__
 437               	.L39:
 509:../../tmk_core/common/command.c ****             break;
 438               		.loc 1 509 0
 439 0078 8091 0000 		lds r24,mk_max_speed
 440 007c 1F92      		push __zero_reg__
 441               	.LCFI33:
 442               		.cfi_remember_state
 443               		.cfi_def_cfa_offset 3
 444 007e 8F93      		push r24
 445               	.LCFI34:
 446               		.cfi_def_cfa_offset 4
 447 0080 80E0      		ldi r24,lo8(__c.2775)
 448 0082 90E0      		ldi r25,hi8(__c.2775)
 449 0084 00C0      		rjmp .L46
 450               	.LVL39:
 451               	.L32:
 452               	.LCFI35:
 453               		.cfi_restore_state
 512:../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 454               		.loc 1 512 0
 455 0086 8091 0000 		lds r24,mk_time_to_max
 456               	.LVL40:
 457 008a 6817      		cp r22,r24
 458 008c 00F4      		brsh .L40
 513:../../tmk_core/common/command.c ****             else
 459               		.loc 1 513 0
 460 008e 861B      		sub r24,r22
 461 0090 8093 0000 		sts mk_time_to_max,r24
 462 0094 00C0      		rjmp .L41
 463               	.L40:
 515:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 464               		.loc 1 515 0
 465 0096 1092 0000 		sts mk_time_to_max,__zero_reg__
 466               	.L41:
 516:../../tmk_core/common/command.c ****             break;
 467               		.loc 1 516 0
 468 009a 8091 0000 		lds r24,mk_time_to_max
 469 009e 1F92      		push __zero_reg__
 470               	.LCFI36:
 471               		.cfi_remember_state
 472               		.cfi_def_cfa_offset 3
 473 00a0 8F93      		push r24
 474               	.LCFI37:
 475               		.cfi_def_cfa_offset 4
 476 00a2 80E0      		ldi r24,lo8(__c.2778)
 477 00a4 90E0      		ldi r25,hi8(__c.2778)
 478 00a6 00C0      		rjmp .L46
 479               	.LVL41:
 480               	.L31:
 481               	.LCFI38:
 482               		.cfi_restore_state
 519:../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 483               		.loc 1 519 0
 484 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 485               	.LVL42:
 486 00ac 6817      		cp r22,r24
 487 00ae 00F4      		brsh .L42
 520:../../tmk_core/common/command.c ****             else
 488               		.loc 1 520 0
 489 00b0 861B      		sub r24,r22
 490 00b2 8093 0000 		sts mk_wheel_max_speed,r24
 491 00b6 00C0      		rjmp .L43
 492               	.L42:
 522:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 493               		.loc 1 522 0
 494 00b8 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 495               	.L43:
 523:../../tmk_core/common/command.c ****             break;
 496               		.loc 1 523 0
 497 00bc 8091 0000 		lds r24,mk_wheel_max_speed
 498 00c0 1F92      		push __zero_reg__
 499               	.LCFI39:
 500               		.cfi_remember_state
 501               		.cfi_def_cfa_offset 3
 502 00c2 8F93      		push r24
 503               	.LCFI40:
 504               		.cfi_def_cfa_offset 4
 505 00c4 80E0      		ldi r24,lo8(__c.2781)
 506 00c6 90E0      		ldi r25,hi8(__c.2781)
 507 00c8 00C0      		rjmp .L46
 508               	.LVL43:
 509               	.L33:
 510               	.LCFI41:
 511               		.cfi_restore_state
 526:../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 512               		.loc 1 526 0
 513 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 514               	.LVL44:
 515 00ce 6817      		cp r22,r24
 516 00d0 00F4      		brsh .L44
 527:../../tmk_core/common/command.c ****             else
 517               		.loc 1 527 0
 518 00d2 861B      		sub r24,r22
 519 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 520 00d8 00C0      		rjmp .L45
 521               	.L44:
 529:../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 522               		.loc 1 529 0
 523 00da 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 524               	.L45:
 530:../../tmk_core/common/command.c ****             break;
 525               		.loc 1 530 0
 526 00de 8091 0000 		lds r24,mk_wheel_time_to_max
 527 00e2 1F92      		push __zero_reg__
 528               	.LCFI42:
 529               		.cfi_def_cfa_offset 3
 530 00e4 8F93      		push r24
 531               	.LCFI43:
 532               		.cfi_def_cfa_offset 4
 533 00e6 80E0      		ldi r24,lo8(__c.2784)
 534 00e8 90E0      		ldi r25,hi8(__c.2784)
 535               	.L46:
 536 00ea 9F93      		push r25
 537               	.LCFI44:
 538               		.cfi_def_cfa_offset 5
 539 00ec 8F93      		push r24
 540               	.LCFI45:
 541               		.cfi_def_cfa_offset 6
 542 00ee 0E94 0000 		call __xprintf
 543               	.LVL45:
 531:../../tmk_core/common/command.c ****     }
 544               		.loc 1 531 0
 545 00f2 0F90      		pop __tmp_reg__
 546 00f4 0F90      		pop __tmp_reg__
 547 00f6 0F90      		pop __tmp_reg__
 548 00f8 0F90      		pop __tmp_reg__
 549               	.LCFI46:
 550               		.cfi_def_cfa_offset 2
 551 00fa 0895      		ret
 552               		.cfi_endproc
 553               	.LFE20:
 555               		.section	.text.switch_default_layer,"ax",@progbits
 557               	switch_default_layer:
 558               	.LFB24:
 555:../../tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 556:../../tmk_core/common/command.c **** }
 557:../../tmk_core/common/command.c **** 
 558:../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 559:../../tmk_core/common/command.c **** {
 560:../../tmk_core/common/command.c ****     switch (code) {
 561:../../tmk_core/common/command.c ****         case KC_H:
 562:../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 563:../../tmk_core/common/command.c ****             mousekey_console_help();
 564:../../tmk_core/common/command.c ****             break;
 565:../../tmk_core/common/command.c ****         case KC_Q:
 566:../../tmk_core/common/command.c ****         case KC_ESC:
 567:../../tmk_core/common/command.c ****             if (mousekey_param) {
 568:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 569:../../tmk_core/common/command.c ****             } else {
 570:../../tmk_core/common/command.c ****                 print("C> ");
 571:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 572:../../tmk_core/common/command.c ****                 return false;
 573:../../tmk_core/common/command.c ****             }
 574:../../tmk_core/common/command.c ****             break;
 575:../../tmk_core/common/command.c ****         case KC_P:
 576:../../tmk_core/common/command.c ****             mousekey_param_print();
 577:../../tmk_core/common/command.c ****             break;
 578:../../tmk_core/common/command.c ****         case KC_1:
 579:../../tmk_core/common/command.c ****         case KC_2:
 580:../../tmk_core/common/command.c ****         case KC_3:
 581:../../tmk_core/common/command.c ****         case KC_4:
 582:../../tmk_core/common/command.c ****         case KC_5:
 583:../../tmk_core/common/command.c ****         case KC_6:
 584:../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 585:../../tmk_core/common/command.c ****             break;
 586:../../tmk_core/common/command.c ****         case KC_UP:
 587:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 588:../../tmk_core/common/command.c ****             break;
 589:../../tmk_core/common/command.c ****         case KC_DOWN:
 590:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 591:../../tmk_core/common/command.c ****             break;
 592:../../tmk_core/common/command.c ****         case KC_PGUP:
 593:../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 594:../../tmk_core/common/command.c ****             break;
 595:../../tmk_core/common/command.c ****         case KC_PGDN:
 596:../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 597:../../tmk_core/common/command.c ****             break;
 598:../../tmk_core/common/command.c ****         case KC_D:
 599:../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 600:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 601:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 602:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 603:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 604:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 605:../../tmk_core/common/command.c ****             print("set default\n");
 606:../../tmk_core/common/command.c ****             break;
 607:../../tmk_core/common/command.c ****         default:
 608:../../tmk_core/common/command.c ****             print("?");
 609:../../tmk_core/common/command.c ****             return false;
 610:../../tmk_core/common/command.c ****     }
 611:../../tmk_core/common/command.c ****     if (mousekey_param) {
 612:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 613:../../tmk_core/common/command.c ****     } else {
 614:../../tmk_core/common/command.c ****         print("M>" );
 615:../../tmk_core/common/command.c ****     }
 616:../../tmk_core/common/command.c ****     return true;
 617:../../tmk_core/common/command.c **** }
 618:../../tmk_core/common/command.c **** #endif
 619:../../tmk_core/common/command.c **** 
 620:../../tmk_core/common/command.c **** 
 621:../../tmk_core/common/command.c **** /***********************************************************
 622:../../tmk_core/common/command.c ****  * Utilities
 623:../../tmk_core/common/command.c ****  ***********************************************************/
 624:../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code)
 625:../../tmk_core/common/command.c **** {
 626:../../tmk_core/common/command.c ****     switch (code) {
 627:../../tmk_core/common/command.c ****         case KC_1: return 1;
 628:../../tmk_core/common/command.c ****         case KC_2: return 2;
 629:../../tmk_core/common/command.c ****         case KC_3: return 3;
 630:../../tmk_core/common/command.c ****         case KC_4: return 4;
 631:../../tmk_core/common/command.c ****         case KC_5: return 5;
 632:../../tmk_core/common/command.c ****         case KC_6: return 6;
 633:../../tmk_core/common/command.c ****         case KC_7: return 7;
 634:../../tmk_core/common/command.c ****         case KC_8: return 8;
 635:../../tmk_core/common/command.c ****         case KC_9: return 9;
 636:../../tmk_core/common/command.c ****         case KC_0: return 0;
 637:../../tmk_core/common/command.c ****     }
 638:../../tmk_core/common/command.c ****     return 0;
 639:../../tmk_core/common/command.c **** }
 640:../../tmk_core/common/command.c **** 
 641:../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 642:../../tmk_core/common/command.c **** {
 559               		.loc 1 642 0
 560               		.cfi_startproc
 561               	.LVL46:
 562 0000 CF93      		push r28
 563               	.LCFI47:
 564               		.cfi_def_cfa_offset 3
 565               		.cfi_offset 28, -2
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 1 */
 569               	.L__stack_usage = 1
 570 0002 C82F      		mov r28,r24
 643:../../tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 571               		.loc 1 643 0
 572 0004 1F92      		push __zero_reg__
 573               	.LCFI48:
 574               		.cfi_def_cfa_offset 4
 575 0006 8F93      		push r24
 576               	.LCFI49:
 577               		.cfi_def_cfa_offset 5
 578 0008 20E0      		ldi r18,lo8(__c.2840)
 579 000a 30E0      		ldi r19,hi8(__c.2840)
 580 000c 3F93      		push r19
 581               	.LCFI50:
 582               		.cfi_def_cfa_offset 6
 583 000e 2F93      		push r18
 584               	.LCFI51:
 585               		.cfi_def_cfa_offset 7
 586 0010 0E94 0000 		call __xprintf
 587               	.LVL47:
 644:../../tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 588               		.loc 1 644 0
 589 0014 61E0      		ldi r22,lo8(1)
 590 0016 70E0      		ldi r23,0
 591 0018 80E0      		ldi r24,0
 592 001a 90E0      		ldi r25,0
 593 001c 00C0      		rjmp 2f
 594               		1:
 595 001e 660F      		lsl r22
 596 0020 771F      		rol r23
 597 0022 881F      		rol r24
 598 0024 991F      		rol r25
 599               		2:
 600 0026 CA95      		dec r28
 601 0028 02F4      		brpl 1b
 602 002a 0E94 0000 		call default_layer_set
 603               	.LVL48:
 645:../../tmk_core/common/command.c ****     clear_keyboard();
 604               		.loc 1 645 0
 605 002e 0F90      		pop __tmp_reg__
 606 0030 0F90      		pop __tmp_reg__
 607 0032 0F90      		pop __tmp_reg__
 608 0034 0F90      		pop __tmp_reg__
 609               	.LCFI52:
 610               		.cfi_def_cfa_offset 3
 611               	/* epilogue start */
 646:../../tmk_core/common/command.c **** }
 612               		.loc 1 646 0
 613 0036 CF91      		pop r28
 614               	.LVL49:
 645:../../tmk_core/common/command.c ****     clear_keyboard();
 615               		.loc 1 645 0
 616 0038 0C94 0000 		jmp clear_keyboard
 617               	.LVL50:
 618               		.cfi_endproc
 619               	.LFE24:
 621               		.section	.text.command_common,"ax",@progbits
 623               	command_common:
 624               	.LFB15:
 182:../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 625               		.loc 1 182 0
 626               		.cfi_startproc
 627 0000 CF93      		push r28
 628               	.LCFI53:
 629               		.cfi_def_cfa_offset 3
 630               		.cfi_offset 28, -2
 631               	/* prologue: function */
 632               	/* frame size = 0 */
 633               	/* stack size = 1 */
 634               	.L__stack_usage = 1
 186:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 635               		.loc 1 186 0
 636 0002 8732      		cpi r24,lo8(39)
 637 0004 00F4      		brsh .L50
 638 0006 8E31      		cpi r24,lo8(30)
 639 0008 00F0      		brlo .+2
 640 000a 00C0      		rjmp .L51
 641 000c 8E30      		cpi r24,lo8(14)
 642 000e 01F4      		brne .+2
 643 0010 00C0      		rjmp .L52
 644 0012 00F4      		brsh .L53
 645 0014 8730      		cpi r24,lo8(7)
 646 0016 01F4      		brne .+2
 647 0018 00C0      		rjmp .L54
 648 001a 00F4      		brsh .L55
 649 001c 8630      		cpi r24,lo8(6)
 650 001e 01F0      		breq .+2
 651 0020 00C0      		rjmp .L49
 219:../../tmk_core/common/command.c ****             debug_keyboard = false;
 652               		.loc 1 219 0
 653 0022 8091 0000 		lds r24,debug_config
 222:../../tmk_core/common/command.c ****             command_console_help();
 654               		.loc 1 222 0
 655 0026 817F      		andi r24,lo8(-15)
 656 0028 8E7F      		andi r24,lo8(~(1<<0))
 657 002a 8093 0000 		sts debug_config,r24
 658               	.LBB105:
 659               	.LBB106:
 385:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 660               		.loc 1 385 0
 661 002e 80E0      		ldi r24,lo8(__c.2680)
 662 0030 90E0      		ldi r25,hi8(__c.2680)
 663 0032 0E94 0000 		call xputs
 664               	.LBE106:
 665               	.LBE105:
 224:../../tmk_core/common/command.c ****             command_state = CONSOLE;
 666               		.loc 1 224 0
 667 0036 80E0      		ldi r24,lo8(__c.2619)
 668 0038 90E0      		ldi r25,hi8(__c.2619)
 669 003a 0E94 0000 		call xputs
 225:../../tmk_core/common/command.c ****             break;
 670               		.loc 1 225 0
 671 003e 81E0      		ldi r24,lo8(1)
 672 0040 8093 0000 		sts command_state,r24
 673 0044 00C0      		rjmp .L93
 674               	.L55:
 186:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 675               		.loc 1 186 0
 676 0046 8830      		cpi r24,lo8(8)
 677 0048 01F4      		brne .+2
 678 004a 00C0      		rjmp .L57
 679 004c 8B30      		cpi r24,lo8(11)
 680 004e 01F4      		brne .+2
 681 0050 00C0      		rjmp .L58
 682 0052 00C0      		rjmp .L49
 683               	.L53:
 684 0054 8631      		cpi r24,lo8(22)
 685 0056 01F4      		brne .+2
 686 0058 00C0      		rjmp .L59
 687 005a 00F4      		brsh .L60
 688 005c 8031      		cpi r24,lo8(16)
 689 005e 01F4      		brne .+2
 690 0060 00C0      		rjmp .L61
 691 0062 00C0      		rjmp .L49
 692               	.L60:
 693 0064 8931      		cpi r24,lo8(25)
 694 0066 01F4      		brne .+2
 695 0068 00C0      		rjmp .L62
 696 006a 8B31      		cpi r24,lo8(27)
 697 006c 01F4      		brne .+2
 698 006e 00C0      		rjmp .L63
 699 0070 00C0      		rjmp .L49
 700               	.L50:
 701 0072 8833      		cpi r24,lo8(56)
 702 0074 01F4      		brne .+2
 703 0076 00C0      		rjmp .L58
 704 0078 00F4      		brsh .L64
 705 007a 8932      		cpi r24,lo8(41)
 706 007c 01F4      		brne .+2
 707 007e 00C0      		rjmp .L65
 708 0080 8533      		cpi r24,lo8(53)
 709 0082 01F4      		brne .+2
 710 0084 00C0      		rjmp .L65
 711 0086 8732      		cpi r24,lo8(39)
 712 0088 01F0      		breq .+2
 713 008a 00C0      		rjmp .L49
 714 008c 00C0      		rjmp .L65
 715               	.L64:
 716 008e 8334      		cpi r24,lo8(67)
 717 0090 01F4      		brne .+2
 718 0092 00C0      		rjmp .L65
 719 0094 00F4      		brsh .L66
 720 0096 8A33      		cpi r24,lo8(58)
 721 0098 00F4      		brsh .+2
 722 009a 00C0      		rjmp .L49
 370:../../tmk_core/common/command.c ****             break;
 723               		.loc 1 370 0
 724 009c 8953      		subi r24,lo8(-(-57))
 725 009e 00C0      		rjmp .L97
 726               	.L66:
 186:../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 727               		.loc 1 186 0
 728 00a0 8834      		cpi r24,lo8(72)
 729 00a2 01F0      		breq .+2
 730 00a4 00C0      		rjmp .L49
 228:../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 731               		.loc 1 228 0
 732 00a6 0E94 0000 		call clear_keyboard
 229:../../tmk_core/common/command.c ****             wait_ms(1000);
 733               		.loc 1 229 0
 734 00aa 80E0      		ldi r24,lo8(__c.2622)
 735 00ac 90E0      		ldi r25,hi8(__c.2622)
 736 00ae 0E94 0000 		call xputs
 737               	.LBB107:
 738               	.LBB108:
 739               		.file 2 "c:\\program files (x86)\\mhv avr tools\\avr\\include\\util\\delay.h"
   1:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
   6:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
   9:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  12:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****      distribution.
  16:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  17:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  21:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  33:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  35:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  38:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #endif
  41:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  42:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #include <inttypes.h>
  43:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #include <util/delay_basic.h>
  44:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #include <math.h>
  45:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  46:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** /** \file */
  47:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     \code
  49:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  51:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     #include <util/delay.h>
  52:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     \endcode
  53:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  54:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     used.
  58:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  59:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  60:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  62:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  67:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  68:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  75:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     routines linked into the application.
  76:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  77:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  78:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  81:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** */
  82:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  83:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  84:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #endif
  87:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  88:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #ifndef F_CPU
  89:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  90:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** # define F_CPU 1000000UL
  92:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #endif
  93:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  94:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
  95:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #endif
  97:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
  98:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   __STDC_HOSTED__
 101:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #  include <math.h>
 102:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #endif
 103:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 104:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** /**
 105:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    \ingroup util_delay
 106:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 107:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 109:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 112:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 114:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 119:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 120:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    no delay i.e., 0ms.
 124:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 125:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 129:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    to round down and round to closest integer.
 131:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 132:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    Also, the backward compatible
 136:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****    required for rounding are not available to the compiler then.
 139:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 140:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****  */
 141:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** void
 142:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** _delay_ms(double __ms)
 143:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** {
 144:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	double __tmp ; 
 145:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h ****   __STDC_HOSTED__
 148:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 149:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 152:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 155:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 158:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	#else
 159:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 		//round up by default
 160:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	#endif
 162:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 
 163:c:\program files (x86)\mhv avr tools\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 740               		.loc 2 163 0
 741 00b2 9FEF      		ldi r25,lo8(3199999)
 742 00b4 23ED      		ldi r18,hi8(3199999)
 743 00b6 80E3      		ldi r24,hlo8(3199999)
 744 00b8 9150      		1: subi r25,1
 745 00ba 2040      		sbci r18,0
 746 00bc 8040      		sbci r24,0
 747 00be 01F4      		brne 1b
 748 00c0 00C0      		rjmp .
 749 00c2 0000      		nop
 750               	.LBE108:
 751               	.LBE107:
 231:../../tmk_core/common/command.c ****             break;
 752               		.loc 1 231 0
 753 00c4 0E94 0000 		call bootloader_jump
 754 00c8 00C0      		rjmp .L93
 755               	.L57:
 197:../../tmk_core/common/command.c ****             print_eeconfig();
 756               		.loc 1 197 0
 757 00ca 80E0      		ldi r24,lo8(__c.2613)
 758 00cc 90E0      		ldi r25,hi8(__c.2613)
 759 00ce 0E94 0000 		call xputs
 760               	.LBB109:
 761               	.LBB110:
 149:../../tmk_core/common/command.c **** 
 762               		.loc 1 149 0
 763 00d2 80E0      		ldi r24,lo8(__c.2517)
 764 00d4 90E0      		ldi r25,hi8(__c.2517)
 765 00d6 0E94 0000 		call xputs
 766 00da 0E94 0000 		call eeconfig_read_default_layer
 767 00de 1F92      		push __zero_reg__
 768               	.LCFI54:
 769               		.cfi_def_cfa_offset 4
 770 00e0 8F93      		push r24
 771               	.LCFI55:
 772               		.cfi_def_cfa_offset 5
 773 00e2 80E0      		ldi r24,lo8(__c.2519)
 774 00e4 90E0      		ldi r25,hi8(__c.2519)
 775 00e6 9F93      		push r25
 776               	.LCFI56:
 777               		.cfi_def_cfa_offset 6
 778 00e8 8F93      		push r24
 779               	.LCFI57:
 780               		.cfi_def_cfa_offset 7
 781 00ea 0E94 0000 		call __xprintf
 782 00ee 80E0      		ldi r24,lo8(__c.2521)
 783 00f0 90E0      		ldi r25,hi8(__c.2521)
 784 00f2 0E94 0000 		call xputs
 152:../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 785               		.loc 1 152 0
 786 00f6 0E94 0000 		call eeconfig_read_debug
 787 00fa C82F      		mov r28,r24
 153:../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 788               		.loc 1 153 0
 789 00fc 80E0      		ldi r24,lo8(__c.2524)
 790 00fe 90E0      		ldi r25,hi8(__c.2524)
 791 0100 0E94 0000 		call xputs
 792 0104 1F92      		push __zero_reg__
 793               	.LCFI58:
 794               		.cfi_def_cfa_offset 8
 795 0106 CF93      		push r28
 796               	.LCFI59:
 797               		.cfi_def_cfa_offset 9
 798 0108 20E0      		ldi r18,lo8(__c.2526)
 799 010a 30E0      		ldi r19,hi8(__c.2526)
 800 010c 3F93      		push r19
 801               	.LCFI60:
 802               		.cfi_def_cfa_offset 10
 803 010e 2F93      		push r18
 804               	.LCFI61:
 805               		.cfi_def_cfa_offset 11
 806 0110 0E94 0000 		call __xprintf
 807 0114 80E0      		ldi r24,lo8(__c.2528)
 808 0116 90E0      		ldi r25,hi8(__c.2528)
 809 0118 0E94 0000 		call xputs
 154:../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 810               		.loc 1 154 0
 811 011c 80E0      		ldi r24,lo8(__c.2530)
 812 011e 90E0      		ldi r25,hi8(__c.2530)
 813 0120 0E94 0000 		call xputs
 814 0124 8C2F      		mov r24,r28
 815 0126 8170      		andi r24,1
 816 0128 1F92      		push __zero_reg__
 817               	.LCFI62:
 818               		.cfi_def_cfa_offset 12
 819 012a 8F93      		push r24
 820               	.LCFI63:
 821               		.cfi_def_cfa_offset 13
 822 012c 20E0      		ldi r18,lo8(__c.2532)
 823 012e 30E0      		ldi r19,hi8(__c.2532)
 824 0130 3F93      		push r19
 825               	.LCFI64:
 826               		.cfi_def_cfa_offset 14
 827 0132 2F93      		push r18
 828               	.LCFI65:
 829               		.cfi_def_cfa_offset 15
 830 0134 0E94 0000 		call __xprintf
 831 0138 80E0      		ldi r24,lo8(__c.2534)
 832 013a 90E0      		ldi r25,hi8(__c.2534)
 833 013c 0E94 0000 		call xputs
 155:../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 834               		.loc 1 155 0
 835 0140 80E0      		ldi r24,lo8(__c.2536)
 836 0142 90E0      		ldi r25,hi8(__c.2536)
 837 0144 0E94 0000 		call xputs
 838 0148 C1FB      		bst r28,1
 839 014a 8827      		clr r24
 840 014c 80F9      		bld r24,0
 841 014e 1F92      		push __zero_reg__
 842               	.LCFI66:
 843               		.cfi_def_cfa_offset 16
 844 0150 8F93      		push r24
 845               	.LCFI67:
 846               		.cfi_def_cfa_offset 17
 847 0152 20E0      		ldi r18,lo8(__c.2538)
 848 0154 30E0      		ldi r19,hi8(__c.2538)
 849 0156 3F93      		push r19
 850               	.LCFI68:
 851               		.cfi_def_cfa_offset 18
 852 0158 2F93      		push r18
 853               	.LCFI69:
 854               		.cfi_def_cfa_offset 19
 855 015a 0E94 0000 		call __xprintf
 856 015e 80E0      		ldi r24,lo8(__c.2540)
 857 0160 90E0      		ldi r25,hi8(__c.2540)
 858 0162 0E94 0000 		call xputs
 156:../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 859               		.loc 1 156 0
 860 0166 80E0      		ldi r24,lo8(__c.2542)
 861 0168 90E0      		ldi r25,hi8(__c.2542)
 862 016a 0E94 0000 		call xputs
 863 016e C2FB      		bst r28,2
 864 0170 8827      		clr r24
 865 0172 80F9      		bld r24,0
 866 0174 1F92      		push __zero_reg__
 867               	.LCFI70:
 868               		.cfi_def_cfa_offset 20
 869 0176 8F93      		push r24
 870               	.LCFI71:
 871               		.cfi_def_cfa_offset 21
 872 0178 20E0      		ldi r18,lo8(__c.2544)
 873 017a 30E0      		ldi r19,hi8(__c.2544)
 874 017c 3F93      		push r19
 875               	.LCFI72:
 876               		.cfi_def_cfa_offset 22
 877 017e 2F93      		push r18
 878               	.LCFI73:
 879               		.cfi_def_cfa_offset 23
 880 0180 0E94 0000 		call __xprintf
 881 0184 80E0      		ldi r24,lo8(__c.2546)
 882 0186 90E0      		ldi r25,hi8(__c.2546)
 883 0188 0E94 0000 		call xputs
 157:../../tmk_core/common/command.c **** 
 884               		.loc 1 157 0
 885 018c 80E0      		ldi r24,lo8(__c.2548)
 886 018e 90E0      		ldi r25,hi8(__c.2548)
 887 0190 0E94 0000 		call xputs
 888 0194 C3FB      		bst r28,3
 889 0196 CC27      		clr r28
 890 0198 C0F9      		bld r28,0
 891 019a 1F92      		push __zero_reg__
 892               	.LCFI74:
 893               		.cfi_def_cfa_offset 24
 894 019c CF93      		push r28
 895               	.LCFI75:
 896               		.cfi_def_cfa_offset 25
 897 019e 80E0      		ldi r24,lo8(__c.2550)
 898 01a0 90E0      		ldi r25,hi8(__c.2550)
 899 01a2 9F93      		push r25
 900               	.LCFI76:
 901               		.cfi_def_cfa_offset 26
 902 01a4 8F93      		push r24
 903               	.LCFI77:
 904               		.cfi_def_cfa_offset 27
 905 01a6 0E94 0000 		call __xprintf
 906 01aa 80E0      		ldi r24,lo8(__c.2552)
 907 01ac 90E0      		ldi r25,hi8(__c.2552)
 908 01ae 0E94 0000 		call xputs
 160:../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 909               		.loc 1 160 0
 910 01b2 0E94 0000 		call eeconfig_read_keymap
 911 01b6 C82F      		mov r28,r24
 161:../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 912               		.loc 1 161 0
 913 01b8 80E0      		ldi r24,lo8(__c.2555)
 914 01ba 90E0      		ldi r25,hi8(__c.2555)
 915 01bc 0E94 0000 		call xputs
 916 01c0 1F92      		push __zero_reg__
 917               	.LCFI78:
 918               		.cfi_def_cfa_offset 28
 919 01c2 CF93      		push r28
 920               	.LCFI79:
 921               		.cfi_def_cfa_offset 29
 922 01c4 20E0      		ldi r18,lo8(__c.2557)
 923 01c6 30E0      		ldi r19,hi8(__c.2557)
 924 01c8 3F93      		push r19
 925               	.LCFI80:
 926               		.cfi_def_cfa_offset 30
 927 01ca 2F93      		push r18
 928               	.LCFI81:
 929               		.cfi_def_cfa_offset 31
 930 01cc 0E94 0000 		call __xprintf
 931 01d0 80E0      		ldi r24,lo8(__c.2559)
 932 01d2 90E0      		ldi r25,hi8(__c.2559)
 933 01d4 0E94 0000 		call xputs
 162:../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 934               		.loc 1 162 0
 935 01d8 80E0      		ldi r24,lo8(__c.2561)
 936 01da 90E0      		ldi r25,hi8(__c.2561)
 937 01dc 0E94 0000 		call xputs
 938 01e0 8C2F      		mov r24,r28
 939 01e2 8170      		andi r24,1
 940 01e4 1F92      		push __zero_reg__
 941               	.LCFI82:
 942               		.cfi_def_cfa_offset 32
 943 01e6 8F93      		push r24
 944               	.LCFI83:
 945               		.cfi_def_cfa_offset 33
 946 01e8 20E0      		ldi r18,lo8(__c.2563)
 947 01ea 30E0      		ldi r19,hi8(__c.2563)
 948 01ec 3F93      		push r19
 949               	.LCFI84:
 950               		.cfi_def_cfa_offset 34
 951 01ee 2F93      		push r18
 952               	.LCFI85:
 953               		.cfi_def_cfa_offset 35
 954 01f0 0E94 0000 		call __xprintf
 955 01f4 8DB7      		in r24,__SP_L__
 956 01f6 9EB7      		in r25,__SP_H__
 957 01f8 8096      		adiw r24,32
 958 01fa 0FB6      		in __tmp_reg__,__SREG__
 959 01fc F894      		cli
 960 01fe 9EBF      		out __SP_H__,r25
 961 0200 0FBE      		out __SREG__,__tmp_reg__
 962 0202 8DBF      		out __SP_L__,r24
 963               	.LCFI86:
 964               		.cfi_def_cfa_offset 3
 965 0204 80E0      		ldi r24,lo8(__c.2565)
 966 0206 90E0      		ldi r25,hi8(__c.2565)
 967 0208 0E94 0000 		call xputs
 163:../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 968               		.loc 1 163 0
 969 020c 80E0      		ldi r24,lo8(__c.2567)
 970 020e 90E0      		ldi r25,hi8(__c.2567)
 971 0210 0E94 0000 		call xputs
 972 0214 C1FB      		bst r28,1
 973 0216 8827      		clr r24
 974 0218 80F9      		bld r24,0
 975 021a 1F92      		push __zero_reg__
 976               	.LCFI87:
 977               		.cfi_def_cfa_offset 4
 978 021c 8F93      		push r24
 979               	.LCFI88:
 980               		.cfi_def_cfa_offset 5
 981 021e 20E0      		ldi r18,lo8(__c.2569)
 982 0220 30E0      		ldi r19,hi8(__c.2569)
 983 0222 3F93      		push r19
 984               	.LCFI89:
 985               		.cfi_def_cfa_offset 6
 986 0224 2F93      		push r18
 987               	.LCFI90:
 988               		.cfi_def_cfa_offset 7
 989 0226 0E94 0000 		call __xprintf
 990 022a 80E0      		ldi r24,lo8(__c.2571)
 991 022c 90E0      		ldi r25,hi8(__c.2571)
 992 022e 0E94 0000 		call xputs
 164:../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 993               		.loc 1 164 0
 994 0232 80E0      		ldi r24,lo8(__c.2573)
 995 0234 90E0      		ldi r25,hi8(__c.2573)
 996 0236 0E94 0000 		call xputs
 997 023a C2FB      		bst r28,2
 998 023c 8827      		clr r24
 999 023e 80F9      		bld r24,0
 1000 0240 1F92      		push __zero_reg__
 1001               	.LCFI91:
 1002               		.cfi_def_cfa_offset 8
 1003 0242 8F93      		push r24
 1004               	.LCFI92:
 1005               		.cfi_def_cfa_offset 9
 1006 0244 20E0      		ldi r18,lo8(__c.2575)
 1007 0246 30E0      		ldi r19,hi8(__c.2575)
 1008 0248 3F93      		push r19
 1009               	.LCFI93:
 1010               		.cfi_def_cfa_offset 10
 1011 024a 2F93      		push r18
 1012               	.LCFI94:
 1013               		.cfi_def_cfa_offset 11
 1014 024c 0E94 0000 		call __xprintf
 1015 0250 80E0      		ldi r24,lo8(__c.2577)
 1016 0252 90E0      		ldi r25,hi8(__c.2577)
 1017 0254 0E94 0000 		call xputs
 165:../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1018               		.loc 1 165 0
 1019 0258 80E0      		ldi r24,lo8(__c.2579)
 1020 025a 90E0      		ldi r25,hi8(__c.2579)
 1021 025c 0E94 0000 		call xputs
 1022 0260 C3FB      		bst r28,3
 1023 0262 8827      		clr r24
 1024 0264 80F9      		bld r24,0
 1025 0266 1F92      		push __zero_reg__
 1026               	.LCFI95:
 1027               		.cfi_def_cfa_offset 12
 1028 0268 8F93      		push r24
 1029               	.LCFI96:
 1030               		.cfi_def_cfa_offset 13
 1031 026a 20E0      		ldi r18,lo8(__c.2581)
 1032 026c 30E0      		ldi r19,hi8(__c.2581)
 1033 026e 3F93      		push r19
 1034               	.LCFI97:
 1035               		.cfi_def_cfa_offset 14
 1036 0270 2F93      		push r18
 1037               	.LCFI98:
 1038               		.cfi_def_cfa_offset 15
 1039 0272 0E94 0000 		call __xprintf
 1040 0276 80E0      		ldi r24,lo8(__c.2583)
 1041 0278 90E0      		ldi r25,hi8(__c.2583)
 1042 027a 0E94 0000 		call xputs
 166:../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1043               		.loc 1 166 0
 1044 027e 80E0      		ldi r24,lo8(__c.2585)
 1045 0280 90E0      		ldi r25,hi8(__c.2585)
 1046 0282 0E94 0000 		call xputs
 1047 0286 C4FB      		bst r28,4
 1048 0288 8827      		clr r24
 1049 028a 80F9      		bld r24,0
 1050 028c 1F92      		push __zero_reg__
 1051               	.LCFI99:
 1052               		.cfi_def_cfa_offset 16
 1053 028e 8F93      		push r24
 1054               	.LCFI100:
 1055               		.cfi_def_cfa_offset 17
 1056 0290 20E0      		ldi r18,lo8(__c.2587)
 1057 0292 30E0      		ldi r19,hi8(__c.2587)
 1058 0294 3F93      		push r19
 1059               	.LCFI101:
 1060               		.cfi_def_cfa_offset 18
 1061 0296 2F93      		push r18
 1062               	.LCFI102:
 1063               		.cfi_def_cfa_offset 19
 1064 0298 0E94 0000 		call __xprintf
 1065 029c 80E0      		ldi r24,lo8(__c.2589)
 1066 029e 90E0      		ldi r25,hi8(__c.2589)
 1067 02a0 0E94 0000 		call xputs
 167:../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1068               		.loc 1 167 0
 1069 02a4 80E0      		ldi r24,lo8(__c.2591)
 1070 02a6 90E0      		ldi r25,hi8(__c.2591)
 1071 02a8 0E94 0000 		call xputs
 1072 02ac C5FB      		bst r28,5
 1073 02ae 8827      		clr r24
 1074 02b0 80F9      		bld r24,0
 1075 02b2 1F92      		push __zero_reg__
 1076               	.LCFI103:
 1077               		.cfi_def_cfa_offset 20
 1078 02b4 8F93      		push r24
 1079               	.LCFI104:
 1080               		.cfi_def_cfa_offset 21
 1081 02b6 20E0      		ldi r18,lo8(__c.2593)
 1082 02b8 30E0      		ldi r19,hi8(__c.2593)
 1083 02ba 3F93      		push r19
 1084               	.LCFI105:
 1085               		.cfi_def_cfa_offset 22
 1086 02bc 2F93      		push r18
 1087               	.LCFI106:
 1088               		.cfi_def_cfa_offset 23
 1089 02be 0E94 0000 		call __xprintf
 1090 02c2 80E0      		ldi r24,lo8(__c.2595)
 1091 02c4 90E0      		ldi r25,hi8(__c.2595)
 1092 02c6 0E94 0000 		call xputs
 168:../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1093               		.loc 1 168 0
 1094 02ca 80E0      		ldi r24,lo8(__c.2597)
 1095 02cc 90E0      		ldi r25,hi8(__c.2597)
 1096 02ce 0E94 0000 		call xputs
 1097 02d2 C6FB      		bst r28,6
 1098 02d4 8827      		clr r24
 1099 02d6 80F9      		bld r24,0
 1100 02d8 1F92      		push __zero_reg__
 1101               	.LCFI107:
 1102               		.cfi_def_cfa_offset 24
 1103 02da 8F93      		push r24
 1104               	.LCFI108:
 1105               		.cfi_def_cfa_offset 25
 1106 02dc 20E0      		ldi r18,lo8(__c.2599)
 1107 02de 30E0      		ldi r19,hi8(__c.2599)
 1108 02e0 3F93      		push r19
 1109               	.LCFI109:
 1110               		.cfi_def_cfa_offset 26
 1111 02e2 2F93      		push r18
 1112               	.LCFI110:
 1113               		.cfi_def_cfa_offset 27
 1114 02e4 0E94 0000 		call __xprintf
 1115 02e8 80E0      		ldi r24,lo8(__c.2601)
 1116 02ea 90E0      		ldi r25,hi8(__c.2601)
 1117 02ec 0E94 0000 		call xputs
 169:../../tmk_core/common/command.c **** 
 1118               		.loc 1 169 0
 1119 02f0 80E0      		ldi r24,lo8(__c.2603)
 1120 02f2 90E0      		ldi r25,hi8(__c.2603)
 1121 02f4 0E94 0000 		call xputs
 1122 02f8 C7FB      		bst r28,7
 1123 02fa CC27      		clr r28
 1124 02fc C0F9      		bld r28,0
 1125 02fe 1F92      		push __zero_reg__
 1126               	.LCFI111:
 1127               		.cfi_def_cfa_offset 28
 1128 0300 CF93      		push r28
 1129               	.LCFI112:
 1130               		.cfi_def_cfa_offset 29
 1131 0302 80E0      		ldi r24,lo8(__c.2605)
 1132 0304 90E0      		ldi r25,hi8(__c.2605)
 1133 0306 9F93      		push r25
 1134               	.LCFI113:
 1135               		.cfi_def_cfa_offset 30
 1136 0308 8F93      		push r24
 1137               	.LCFI114:
 1138               		.cfi_def_cfa_offset 31
 1139 030a 0E94 0000 		call __xprintf
 1140 030e 80E0      		ldi r24,lo8(__c.2607)
 1141 0310 90E0      		ldi r25,hi8(__c.2607)
 1142 0312 0E94 0000 		call xputs
 1143 0316 8DB7      		in r24,__SP_L__
 1144 0318 9EB7      		in r25,__SP_H__
 1145 031a 4C96      		adiw r24,28
 1146 031c 0FB6      		in __tmp_reg__,__SREG__
 1147 031e F894      		cli
 1148 0320 9EBF      		out __SP_H__,r25
 1149 0322 0FBE      		out __SREG__,__tmp_reg__
 1150 0324 8DBF      		out __SP_L__,r24
 1151               	.LCFI115:
 1152               		.cfi_def_cfa_offset 3
 1153 0326 00C0      		rjmp .L93
 1154               	.L58:
 1155               	.LBE110:
 1156               	.LBE109:
 1157               	.LBB111:
 1158               	.LBB112:
 117:../../tmk_core/common/command.c ****           "d:	debug\n"
 1159               		.loc 1 117 0
 1160 0328 80E0      		ldi r24,lo8(__c.2512)
 1161 032a 90E0      		ldi r25,hi8(__c.2512)
 1162               	.L96:
 1163 032c 0E94 0000 		call xputs
 1164               	.L93:
 1165               	.LBE112:
 1166               	.LBE111:
 376:../../tmk_core/common/command.c **** }
 1167               		.loc 1 376 0
 1168 0330 C1E0      		ldi r28,lo8(1)
 1169 0332 00C0      		rjmp .L69
 1170               	.L54:
 234:../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 1171               		.loc 1 234 0
 1172 0334 8091 0000 		lds r24,debug_config
 1173 0338 C82F      		mov r28,r24
 1174 033a C170      		andi r28,1
 1175 033c 80FF      		sbrs r24,0
 1176 033e 00C0      		rjmp .L70
 235:../../tmk_core/common/command.c ****                 debug_matrix   = false;
 1177               		.loc 1 235 0
 1178 0340 80E0      		ldi r24,lo8(__c.2625)
 1179 0342 90E0      		ldi r25,hi8(__c.2625)
 1180 0344 0E94 0000 		call xputs
 236:../../tmk_core/common/command.c ****                 debug_keyboard = false;
 1181               		.loc 1 236 0
 1182 0348 8091 0000 		lds r24,debug_config
 239:../../tmk_core/common/command.c ****             } else {
 1183               		.loc 1 239 0
 1184 034c 817F      		andi r24,lo8(-15)
 1185 034e 8E7F      		andi r24,lo8(~(1<<0))
 1186 0350 00C0      		rjmp .L94
 1187               	.L70:
 241:../../tmk_core/common/command.c ****                 debug_enable   = true;
 1188               		.loc 1 241 0
 1189 0352 80E0      		ldi r24,lo8(__c.2627)
 1190 0354 90E0      		ldi r25,hi8(__c.2627)
 1191 0356 0E94 0000 		call xputs
 242:../../tmk_core/common/command.c ****             }
 1192               		.loc 1 242 0
 1193 035a 8091 0000 		lds r24,debug_config
 1194 035e 8160      		ori r24,lo8(1<<0)
 1195 0360 8093 0000 		sts debug_config,r24
 1196 0364 00C0      		rjmp .L93
 1197               	.L63:
 246:../../tmk_core/common/command.c ****             if (debug_matrix) {
 1198               		.loc 1 246 0
 1199 0366 8091 0000 		lds r24,debug_config
 1200 036a 81FB      		bst r24,1
 1201 036c CC27      		clr r28
 1202 036e C0F9      		bld r28,0
 1203 0370 91E0      		ldi r25,lo8(1)
 1204 0372 C927      		eor r28,r25
 1205 0374 C0FB      		bst r28,0
 1206 0376 81F9      		bld r24,1
 1207 0378 8093 0000 		sts debug_config,r24
 247:../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 1208               		.loc 1 247 0
 1209 037c CC23      		tst r28
 1210 037e 01F0      		breq .L71
 248:../../tmk_core/common/command.c ****                 debug_enable = true;
 1211               		.loc 1 248 0
 1212 0380 80E0      		ldi r24,lo8(__c.2630)
 1213 0382 90E0      		ldi r25,hi8(__c.2630)
 1214 0384 00C0      		rjmp .L95
 1215               	.L71:
 251:../../tmk_core/common/command.c ****             }
 1216               		.loc 1 251 0
 1217 0386 80E0      		ldi r24,lo8(__c.2632)
 1218 0388 90E0      		ldi r25,hi8(__c.2632)
 1219 038a 00C0      		rjmp .L96
 1220               	.L52:
 255:../../tmk_core/common/command.c ****             if (debug_keyboard) {
 1221               		.loc 1 255 0
 1222 038c 8091 0000 		lds r24,debug_config
 1223 0390 82FB      		bst r24,2
 1224 0392 CC27      		clr r28
 1225 0394 C0F9      		bld r28,0
 1226 0396 91E0      		ldi r25,lo8(1)
 1227 0398 C927      		eor r28,r25
 1228 039a C0FB      		bst r28,0
 1229 039c 82F9      		bld r24,2
 1230 039e 8093 0000 		sts debug_config,r24
 256:../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 1231               		.loc 1 256 0
 1232 03a2 CC23      		tst r28
 1233 03a4 01F0      		breq .L72
 257:../../tmk_core/common/command.c ****                 debug_enable = true;
 1234               		.loc 1 257 0
 1235 03a6 80E0      		ldi r24,lo8(__c.2635)
 1236 03a8 90E0      		ldi r25,hi8(__c.2635)
 1237 03aa 00C0      		rjmp .L95
 1238               	.L72:
 260:../../tmk_core/common/command.c ****             }
 1239               		.loc 1 260 0
 1240 03ac 80E0      		ldi r24,lo8(__c.2637)
 1241 03ae 90E0      		ldi r25,hi8(__c.2637)
 1242 03b0 00C0      		rjmp .L96
 1243               	.L61:
 264:../../tmk_core/common/command.c ****             if (debug_mouse) {
 1244               		.loc 1 264 0
 1245 03b2 8091 0000 		lds r24,debug_config
 1246 03b6 83FB      		bst r24,3
 1247 03b8 CC27      		clr r28
 1248 03ba C0F9      		bld r28,0
 1249 03bc 91E0      		ldi r25,lo8(1)
 1250 03be C927      		eor r28,r25
 1251 03c0 C0FB      		bst r28,0
 1252 03c2 83F9      		bld r24,3
 1253 03c4 8093 0000 		sts debug_config,r24
 265:../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 1254               		.loc 1 265 0
 1255 03c8 CC23      		tst r28
 1256 03ca 01F0      		breq .L73
 266:../../tmk_core/common/command.c ****                 debug_enable = true;
 1257               		.loc 1 266 0
 1258 03cc 80E0      		ldi r24,lo8(__c.2640)
 1259 03ce 90E0      		ldi r25,hi8(__c.2640)
 1260               	.L95:
 1261 03d0 0E94 0000 		call xputs
 267:../../tmk_core/common/command.c ****             } else {
 1262               		.loc 1 267 0
 1263 03d4 8091 0000 		lds r24,debug_config
 1264 03d8 8160      		ori r24,lo8(1<<0)
 1265               	.L94:
 1266 03da 8093 0000 		sts debug_config,r24
 1267 03de 00C0      		rjmp .L69
 1268               	.L73:
 269:../../tmk_core/common/command.c ****             }
 1269               		.loc 1 269 0
 1270 03e0 80E0      		ldi r24,lo8(__c.2642)
 1271 03e2 90E0      		ldi r25,hi8(__c.2642)
 1272 03e4 00C0      		rjmp .L96
 1273               	.L62:
 273:../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 1274               		.loc 1 273 0
 1275 03e6 80E0      		ldi r24,lo8(__c.2645)
 1276 03e8 90E0      		ldi r25,hi8(__c.2645)
 1277 03ea 0E94 0000 		call xputs
 274:../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 1278               		.loc 1 274 0
 1279 03ee 80E0      		ldi r24,lo8(__c.2647)
 1280 03f0 90E0      		ldi r25,hi8(__c.2647)
 1281 03f2 0E94 0000 		call xputs
 275:../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 1282               		.loc 1 275 0
 1283 03f6 80E0      		ldi r24,lo8(__c.2649)
 1284 03f8 90E0      		ldi r25,hi8(__c.2649)
 1285 03fa 0E94 0000 		call xputs
 278:../../tmk_core/common/command.c ****             /* build options */
 1286               		.loc 1 278 0
 1287 03fe 80E0      		ldi r24,lo8(__c.2651)
 1288 0400 90E0      		ldi r25,hi8(__c.2651)
 1289 0402 0E94 0000 		call xputs
 280:../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 1290               		.loc 1 280 0
 1291 0406 80E0      		ldi r24,lo8(__c.2653)
 1292 0408 90E0      		ldi r25,hi8(__c.2653)
 1293 040a 0E94 0000 		call xputs
 316:../../tmk_core/common/command.c **** #if defined(__AVR__)
 1294               		.loc 1 316 0
 1295 040e 80E0      		ldi r24,lo8(__c.2655)
 1296 0410 90E0      		ldi r25,hi8(__c.2655)
 1297 0412 00C0      		rjmp .L96
 1298               	.L59:
 326:../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 1299               		.loc 1 326 0
 1300 0414 80E0      		ldi r24,lo8(__c.2658)
 1301 0416 90E0      		ldi r25,hi8(__c.2658)
 1302 0418 0E94 0000 		call xputs
 327:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 1303               		.loc 1 327 0
 1304 041c 0E94 0000 		call host_keyboard_leds
 1305 0420 1F92      		push __zero_reg__
 1306               	.LCFI116:
 1307               		.cfi_def_cfa_offset 4
 1308 0422 8F93      		push r24
 1309               	.LCFI117:
 1310               		.cfi_def_cfa_offset 5
 1311 0424 80E0      		ldi r24,lo8(__c.2660)
 1312 0426 90E0      		ldi r25,hi8(__c.2660)
 1313 0428 9F93      		push r25
 1314               	.LCFI118:
 1315               		.cfi_def_cfa_offset 6
 1316 042a 8F93      		push r24
 1317               	.LCFI119:
 1318               		.cfi_def_cfa_offset 7
 1319 042c 0E94 0000 		call __xprintf
 328:../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 1320               		.loc 1 328 0
 1321 0430 8091 0000 		lds r24,keyboard_protocol
 1322 0434 1F92      		push __zero_reg__
 1323               	.LCFI120:
 1324               		.cfi_def_cfa_offset 8
 1325 0436 8F93      		push r24
 1326               	.LCFI121:
 1327               		.cfi_def_cfa_offset 9
 1328 0438 80E0      		ldi r24,lo8(__c.2662)
 1329 043a 90E0      		ldi r25,hi8(__c.2662)
 1330 043c 9F93      		push r25
 1331               	.LCFI122:
 1332               		.cfi_def_cfa_offset 10
 1333 043e 8F93      		push r24
 1334               	.LCFI123:
 1335               		.cfi_def_cfa_offset 11
 1336 0440 0E94 0000 		call __xprintf
 329:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1337               		.loc 1 329 0
 1338 0444 8091 0000 		lds r24,keyboard_idle
 1339 0448 1F92      		push __zero_reg__
 1340               	.LCFI124:
 1341               		.cfi_def_cfa_offset 12
 1342 044a 8F93      		push r24
 1343               	.LCFI125:
 1344               		.cfi_def_cfa_offset 13
 1345 044c 80E0      		ldi r24,lo8(__c.2664)
 1346 044e 90E0      		ldi r25,hi8(__c.2664)
 1347 0450 9F93      		push r25
 1348               	.LCFI126:
 1349               		.cfi_def_cfa_offset 14
 1350 0452 8F93      		push r24
 1351               	.LCFI127:
 1352               		.cfi_def_cfa_offset 15
 1353 0454 0E94 0000 		call __xprintf
 333:../../tmk_core/common/command.c **** 
 1354               		.loc 1 333 0
 1355 0458 0E94 0000 		call timer_read32
 1356 045c 9F93      		push r25
 1357               	.LCFI128:
 1358               		.cfi_def_cfa_offset 16
 1359 045e 8F93      		push r24
 1360               	.LCFI129:
 1361               		.cfi_def_cfa_offset 17
 1362 0460 7F93      		push r23
 1363               	.LCFI130:
 1364               		.cfi_def_cfa_offset 18
 1365 0462 6F93      		push r22
 1366               	.LCFI131:
 1367               		.cfi_def_cfa_offset 19
 1368 0464 80E0      		ldi r24,lo8(__c.2666)
 1369 0466 90E0      		ldi r25,hi8(__c.2666)
 1370 0468 9F93      		push r25
 1371               	.LCFI132:
 1372               		.cfi_def_cfa_offset 20
 1373 046a 8F93      		push r24
 1374               	.LCFI133:
 1375               		.cfi_def_cfa_offset 21
 1376 046c 0E94 0000 		call __xprintf
 348:../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 1377               		.loc 1 348 0
 1378 0470 8DB7      		in r24,__SP_L__
 1379 0472 9EB7      		in r25,__SP_H__
 1380 0474 4296      		adiw r24,18
 1381 0476 0FB6      		in __tmp_reg__,__SREG__
 1382 0478 F894      		cli
 1383 047a 9EBF      		out __SP_H__,r25
 1384 047c 0FBE      		out __SREG__,__tmp_reg__
 1385 047e 8DBF      		out __SP_L__,r24
 1386               	.LCFI134:
 1387               		.cfi_def_cfa_offset 3
 1388 0480 00C0      		rjmp .L93
 1389               	.L65:
 364:../../tmk_core/common/command.c ****             break;
 1390               		.loc 1 364 0
 1391 0482 80E0      		ldi r24,0
 1392 0484 00C0      		rjmp .L97
 1393               	.L51:
 367:../../tmk_core/common/command.c ****             break;
 1394               		.loc 1 367 0
 1395 0486 8D51      		subi r24,lo8(-(-29))
 1396               	.L97:
 370:../../tmk_core/common/command.c ****             break;
 1397               		.loc 1 370 0
 1398 0488 0E94 0000 		call switch_default_layer
 1399 048c 00C0      		rjmp .L93
 1400               	.L49:
 373:../../tmk_core/common/command.c ****             return false;
 1401               		.loc 1 373 0
 1402 048e 80E0      		ldi r24,lo8(__c.2675)
 1403 0490 90E0      		ldi r25,hi8(__c.2675)
 1404 0492 0E94 0000 		call xputs
 374:../../tmk_core/common/command.c ****     }
 1405               		.loc 1 374 0
 1406 0496 C0E0      		ldi r28,0
 1407               	.L69:
 377:../../tmk_core/common/command.c **** 
 1408               		.loc 1 377 0
 1409 0498 8C2F      		mov r24,r28
 1410               	/* epilogue start */
 1411 049a CF91      		pop r28
 1412 049c 0895      		ret
 1413               		.cfi_endproc
 1414               	.LFE15:
 1416               		.section	.text.command_extra,"ax",@progbits
 1417               		.weak	command_extra
 1419               	command_extra:
 1420               	.LFB11:
  99:../../tmk_core/common/command.c ****     (void)code;
 1421               		.loc 1 99 0
 1422               		.cfi_startproc
 1423               	.LVL51:
 1424               	/* prologue: function */
 1425               	/* frame size = 0 */
 1426               	/* stack size = 0 */
 1427               	.L__stack_usage = 0
 102:../../tmk_core/common/command.c **** 
 1428               		.loc 1 102 0
 1429 0000 80E0      		ldi r24,0
 1430               	.LVL52:
 1431 0002 0895      		ret
 1432               		.cfi_endproc
 1433               	.LFE11:
 1435               		.section	.text.command_console_extra,"ax",@progbits
 1436               		.weak	command_console_extra
 1438               	command_console_extra:
 1439               	.LFB12:
 106:../../tmk_core/common/command.c ****     (void)code;
 1440               		.loc 1 106 0
 1441               		.cfi_startproc
 1442               	.LVL53:
 1443               	/* prologue: function */
 1444               	/* frame size = 0 */
 1445               	/* stack size = 0 */
 1446               	.L__stack_usage = 0
 109:../../tmk_core/common/command.c **** 
 1447               		.loc 1 109 0
 1448 0000 80E0      		ldi r24,0
 1449               	.LVL54:
 1450 0002 0895      		ret
 1451               		.cfi_endproc
 1452               	.LFE12:
 1454               		.section	.text.command_proc,"ax",@progbits
 1455               	.global	command_proc
 1457               	command_proc:
 1458               	.LFB10:
  70:../../tmk_core/common/command.c ****     switch (command_state) {
 1459               		.loc 1 70 0
 1460               		.cfi_startproc
 1461 0000 CF93      		push r28
 1462               	.LCFI135:
 1463               		.cfi_def_cfa_offset 3
 1464               		.cfi_offset 28, -2
 1465               	/* prologue: function */
 1466               	/* frame size = 0 */
 1467               	/* stack size = 1 */
 1468               	.L__stack_usage = 1
 1469 0002 C82F      		mov r28,r24
  71:../../tmk_core/common/command.c ****         case ONESHOT:
 1470               		.loc 1 71 0
 1471 0004 8091 0000 		lds r24,command_state
 1472 0008 8130      		cpi r24,lo8(1)
 1473 000a 01F0      		breq .L102
 1474 000c 00F0      		brlo .L103
 1475 000e 8230      		cpi r24,lo8(2)
 1476 0010 01F4      		brne .+2
 1477 0012 00C0      		rjmp .L104
 1478 0014 00C0      		rjmp .L170
 1479               	.L103:
  73:../../tmk_core/common/command.c ****                 return false;
 1480               		.loc 1 73 0
 1481 0016 A091 0000 		lds r26,keyboard_report
 1482 001a B091 0000 		lds r27,keyboard_report+1
 1483 001e 8C91      		ld r24,X
 1484 0020 8232      		cpi r24,lo8(34)
 1485 0022 01F0      		breq .+2
 1486 0024 00C0      		rjmp .L133
 1487 0026 00C0      		rjmp .L169
 1488               	.L102:
  78:../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1489               		.loc 1 78 0
 1490 0028 A091 0000 		lds r26,keyboard_report
 1491 002c B091 0000 		lds r27,keyboard_report+1
 1492 0030 8C91      		ld r24,X
 1493 0032 8232      		cpi r24,lo8(34)
 1494 0034 01F4      		brne .L107
 1495               	.L169:
  79:../../tmk_core/common/command.c ****             else
 1496               		.loc 1 79 0
 1497 0036 8C2F      		mov r24,r28
 1498 0038 0E94 0000 		call command_extra
 1499 003c 8111      		cpse r24,__zero_reg__
 1500 003e 00C0      		rjmp .L136
  79:../../tmk_core/common/command.c ****             else
 1501               		.loc 1 79 0 is_stmt 0 discriminator 2
 1502 0040 8C2F      		mov r24,r28
 1503 0042 0E94 0000 		call command_common
 1504 0046 00C0      		rjmp .L109
 1505               	.L107:
  81:../../tmk_core/common/command.c ****             break;
 1506               		.loc 1 81 0 is_stmt 1
 1507 0048 8C2F      		mov r24,r28
 1508 004a 0E94 0000 		call command_console_extra
 1509 004e 8111      		cpse r24,__zero_reg__
 1510 0050 00C0      		rjmp .L136
 1511               	.LBB151:
 1512               	.LBB152:
 395:../../tmk_core/common/command.c ****         case KC_H:
 1513               		.loc 1 395 0
 1514 0052 C431      		cpi r28,lo8(20)
 1515 0054 01F0      		breq .L111
 1516 0056 00F4      		brsh .L112
 1517 0058 CB30      		cpi r28,lo8(11)
 1518 005a 01F0      		breq .L113
 1519 005c C031      		cpi r28,lo8(16)
 1520 005e 01F4      		brne .L110
 406:../../tmk_core/common/command.c ****             print("M> ");
 1521               		.loc 1 406 0
 1522 0060 0E94 0000 		call mousekey_console_help
 407:../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1523               		.loc 1 407 0
 1524 0064 80E0      		ldi r24,lo8(__c.2691)
 1525 0066 90E0      		ldi r25,hi8(__c.2691)
 1526 0068 0E94 0000 		call xputs
 408:../../tmk_core/common/command.c ****             return true;
 1527               		.loc 1 408 0
 1528 006c 82E0      		ldi r24,lo8(2)
 1529 006e 8093 0000 		sts command_state,r24
 1530 0072 00C0      		rjmp .L136
 1531               	.L112:
 395:../../tmk_core/common/command.c ****         case KC_H:
 1532               		.loc 1 395 0
 1533 0074 C932      		cpi r28,lo8(41)
 1534 0076 01F0      		breq .L111
 1535 0078 C833      		cpi r28,lo8(56)
 1536 007a 01F4      		brne .L110
 1537               	.L113:
 1538               	.LBB153:
 1539               	.LBB154:
 385:../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1540               		.loc 1 385 0
 1541 007c 80E0      		ldi r24,lo8(__c.2680)
 1542 007e 90E0      		ldi r25,hi8(__c.2680)
 1543 0080 0E94 0000 		call xputs
 1544               	.LBE154:
 1545               	.LBE153:
 415:../../tmk_core/common/command.c ****     return true;
 1546               		.loc 1 415 0
 1547 0084 80E0      		ldi r24,lo8(__c.2696)
 1548 0086 90E0      		ldi r25,hi8(__c.2696)
 1549 0088 0E94 0000 		call xputs
 1550 008c 00C0      		rjmp .L136
 1551               	.L111:
 402:../../tmk_core/common/command.c ****             return false;
 1552               		.loc 1 402 0
 1553 008e 1092 0000 		sts command_state,__zero_reg__
 1554 0092 00C0      		rjmp .L116
 1555               	.L110:
 412:../../tmk_core/common/command.c ****             return false;
 1556               		.loc 1 412 0
 1557 0094 80E0      		ldi r24,lo8(__c.2694)
 1558 0096 90E0      		ldi r25,hi8(__c.2694)
 1559 0098 0E94 0000 		call xputs
 1560 009c 00C0      		rjmp .L116
 1561               	.L136:
 1562               	.LBE152:
 1563               	.LBE151:
  81:../../tmk_core/common/command.c ****             break;
 1564               		.loc 1 81 0
 1565 009e 81E0      		ldi r24,lo8(1)
 1566               	.L109:
  81:../../tmk_core/common/command.c ****             break;
 1567               		.loc 1 81 0 is_stmt 0 discriminator 4
 1568 00a0 8170      		andi r24,lo8(1)
 1569 00a2 00C0      		rjmp .L162
 1570               	.L104:
 1571               	.LBB155:
 1572               	.LBB156:
 560:../../tmk_core/common/command.c ****         case KC_H:
 1573               		.loc 1 560 0 is_stmt 1
 1574 00a4 C432      		cpi r28,lo8(36)
 1575 00a6 00F4      		brsh .L118
 1576 00a8 CE31      		cpi r28,lo8(30)
 1577 00aa 00F0      		brlo .+2
 1578 00ac 00C0      		rjmp .L119
 1579 00ae CB30      		cpi r28,lo8(11)
 1580 00b0 01F0      		breq .L120
 1581 00b2 00F4      		brsh .L121
 1582 00b4 C730      		cpi r28,lo8(7)
 1583 00b6 01F0      		breq .+2
 1584 00b8 00C0      		rjmp .L117
 599:../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1585               		.loc 1 599 0
 1586 00ba 8EE1      		ldi r24,lo8(30)
 1587 00bc 8093 0000 		sts mk_delay,r24
 600:../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1588               		.loc 1 600 0
 1589 00c0 82E3      		ldi r24,lo8(50)
 1590 00c2 8093 0000 		sts mk_interval,r24
 601:../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1591               		.loc 1 601 0
 1592 00c6 8AE0      		ldi r24,lo8(10)
 1593 00c8 8093 0000 		sts mk_max_speed,r24
 602:../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1594               		.loc 1 602 0
 1595 00cc 84E1      		ldi r24,lo8(20)
 1596 00ce 8093 0000 		sts mk_time_to_max,r24
 603:../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1597               		.loc 1 603 0
 1598 00d2 88E0      		ldi r24,lo8(8)
 1599 00d4 8093 0000 		sts mk_wheel_max_speed,r24
 604:../../tmk_core/common/command.c ****             print("set default\n");
 1600               		.loc 1 604 0
 1601 00d8 88E2      		ldi r24,lo8(40)
 1602 00da 8093 0000 		sts mk_wheel_time_to_max,r24
 605:../../tmk_core/common/command.c ****             break;
 1603               		.loc 1 605 0
 1604 00de 80E0      		ldi r24,lo8(__c.2815)
 1605 00e0 90E0      		ldi r25,hi8(__c.2815)
 1606 00e2 0E94 0000 		call xputs
 1607 00e6 00C0      		rjmp .L130
 1608               	.L121:
 560:../../tmk_core/common/command.c ****         case KC_H:
 1609               		.loc 1 560 0
 1610 00e8 C331      		cpi r28,lo8(19)
 1611 00ea 01F0      		breq .L123
 1612 00ec C431      		cpi r28,lo8(20)
 1613 00ee 01F0      		breq .L124
 1614 00f0 00C0      		rjmp .L117
 1615               	.L118:
 1616 00f2 CB34      		cpi r28,lo8(75)
 1617 00f4 01F4      		brne .+2
 1618 00f6 00C0      		rjmp .L125
 1619 00f8 00F4      		brsh .L126
 1620 00fa C932      		cpi r28,lo8(41)
 1621 00fc 01F0      		breq .L124
 1622 00fe C833      		cpi r28,lo8(56)
 1623 0100 01F0      		breq .L120
 1624 0102 00C0      		rjmp .L117
 1625               	.L126:
 1626 0104 C135      		cpi r28,lo8(81)
 1627 0106 01F4      		brne .+2
 1628 0108 00C0      		rjmp .L127
 1629 010a C235      		cpi r28,lo8(82)
 1630 010c 01F4      		brne .+2
 1631 010e 00C0      		rjmp .L128
 1632 0110 CE34      		cpi r28,lo8(78)
 1633 0112 01F0      		breq .+2
 1634 0114 00C0      		rjmp .L117
 596:../../tmk_core/common/command.c ****             break;
 1635               		.loc 1 596 0
 1636 0116 6AE0      		ldi r22,lo8(10)
 1637 0118 00C0      		rjmp .L164
 1638               	.L120:
 563:../../tmk_core/common/command.c ****             break;
 1639               		.loc 1 563 0
 1640 011a 0E94 0000 		call mousekey_console_help
 1641 011e 00C0      		rjmp .L130
 1642               	.L124:
 567:../../tmk_core/common/command.c ****                 mousekey_param = 0;
 1643               		.loc 1 567 0
 1644 0120 8091 0000 		lds r24,mousekey_param
 1645 0124 8823      		tst r24
 1646 0126 01F0      		breq .L131
 568:../../tmk_core/common/command.c ****             } else {
 1647               		.loc 1 568 0
 1648 0128 1092 0000 		sts mousekey_param,__zero_reg__
 1649 012c 00C0      		rjmp .L130
 1650               	.L131:
 570:../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 1651               		.loc 1 570 0
 1652 012e 80E0      		ldi r24,lo8(__c.2801)
 1653 0130 90E0      		ldi r25,hi8(__c.2801)
 1654 0132 0E94 0000 		call xputs
 571:../../tmk_core/common/command.c ****                 return false;
 1655               		.loc 1 571 0
 1656 0136 81E0      		ldi r24,lo8(1)
 1657 0138 8093 0000 		sts command_state,r24
 1658 013c 00C0      		rjmp .L162
 1659               	.L123:
 1660               	.LBB157:
 1661               	.LBB158:
 428:../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1662               		.loc 1 428 0
 1663 013e 80E0      		ldi r24,lo8(__c.2702)
 1664 0140 90E0      		ldi r25,hi8(__c.2702)
 1665 0142 0E94 0000 		call xputs
 429:../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1666               		.loc 1 429 0
 1667 0146 80E0      		ldi r24,lo8(__c.2704)
 1668 0148 90E0      		ldi r25,hi8(__c.2704)
 1669 014a 0E94 0000 		call xputs
 1670 014e 8091 0000 		lds r24,mk_delay
 1671 0152 1F92      		push __zero_reg__
 1672               	.LCFI136:
 1673               		.cfi_def_cfa_offset 4
 1674 0154 8F93      		push r24
 1675               	.LCFI137:
 1676               		.cfi_def_cfa_offset 5
 1677 0156 80E0      		ldi r24,lo8(__c.2706)
 1678 0158 90E0      		ldi r25,hi8(__c.2706)
 1679 015a 9F93      		push r25
 1680               	.LCFI138:
 1681               		.cfi_def_cfa_offset 6
 1682 015c 8F93      		push r24
 1683               	.LCFI139:
 1684               		.cfi_def_cfa_offset 7
 1685 015e 0E94 0000 		call __xprintf
 1686 0162 80E0      		ldi r24,lo8(__c.2708)
 1687 0164 90E0      		ldi r25,hi8(__c.2708)
 1688 0166 0E94 0000 		call xputs
 430:../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1689               		.loc 1 430 0
 1690 016a 80E0      		ldi r24,lo8(__c.2710)
 1691 016c 90E0      		ldi r25,hi8(__c.2710)
 1692 016e 0E94 0000 		call xputs
 1693 0172 8091 0000 		lds r24,mk_interval
 1694 0176 1F92      		push __zero_reg__
 1695               	.LCFI140:
 1696               		.cfi_def_cfa_offset 8
 1697 0178 8F93      		push r24
 1698               	.LCFI141:
 1699               		.cfi_def_cfa_offset 9
 1700 017a 80E0      		ldi r24,lo8(__c.2712)
 1701 017c 90E0      		ldi r25,hi8(__c.2712)
 1702 017e 9F93      		push r25
 1703               	.LCFI142:
 1704               		.cfi_def_cfa_offset 10
 1705 0180 8F93      		push r24
 1706               	.LCFI143:
 1707               		.cfi_def_cfa_offset 11
 1708 0182 0E94 0000 		call __xprintf
 1709 0186 80E0      		ldi r24,lo8(__c.2714)
 1710 0188 90E0      		ldi r25,hi8(__c.2714)
 1711 018a 0E94 0000 		call xputs
 431:../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1712               		.loc 1 431 0
 1713 018e 80E0      		ldi r24,lo8(__c.2716)
 1714 0190 90E0      		ldi r25,hi8(__c.2716)
 1715 0192 0E94 0000 		call xputs
 1716 0196 8091 0000 		lds r24,mk_max_speed
 1717 019a 1F92      		push __zero_reg__
 1718               	.LCFI144:
 1719               		.cfi_def_cfa_offset 12
 1720 019c 8F93      		push r24
 1721               	.LCFI145:
 1722               		.cfi_def_cfa_offset 13
 1723 019e 80E0      		ldi r24,lo8(__c.2718)
 1724 01a0 90E0      		ldi r25,hi8(__c.2718)
 1725 01a2 9F93      		push r25
 1726               	.LCFI146:
 1727               		.cfi_def_cfa_offset 14
 1728 01a4 8F93      		push r24
 1729               	.LCFI147:
 1730               		.cfi_def_cfa_offset 15
 1731 01a6 0E94 0000 		call __xprintf
 1732 01aa 80E0      		ldi r24,lo8(__c.2720)
 1733 01ac 90E0      		ldi r25,hi8(__c.2720)
 1734 01ae 0E94 0000 		call xputs
 432:../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1735               		.loc 1 432 0
 1736 01b2 80E0      		ldi r24,lo8(__c.2722)
 1737 01b4 90E0      		ldi r25,hi8(__c.2722)
 1738 01b6 0E94 0000 		call xputs
 1739 01ba 8091 0000 		lds r24,mk_time_to_max
 1740 01be 1F92      		push __zero_reg__
 1741               	.LCFI148:
 1742               		.cfi_def_cfa_offset 16
 1743 01c0 8F93      		push r24
 1744               	.LCFI149:
 1745               		.cfi_def_cfa_offset 17
 1746 01c2 80E0      		ldi r24,lo8(__c.2724)
 1747 01c4 90E0      		ldi r25,hi8(__c.2724)
 1748 01c6 9F93      		push r25
 1749               	.LCFI150:
 1750               		.cfi_def_cfa_offset 18
 1751 01c8 8F93      		push r24
 1752               	.LCFI151:
 1753               		.cfi_def_cfa_offset 19
 1754 01ca 0E94 0000 		call __xprintf
 1755 01ce 80E0      		ldi r24,lo8(__c.2726)
 1756 01d0 90E0      		ldi r25,hi8(__c.2726)
 1757 01d2 0E94 0000 		call xputs
 433:../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1758               		.loc 1 433 0
 1759 01d6 80E0      		ldi r24,lo8(__c.2728)
 1760 01d8 90E0      		ldi r25,hi8(__c.2728)
 1761 01da 0E94 0000 		call xputs
 1762 01de 8091 0000 		lds r24,mk_wheel_max_speed
 1763 01e2 1F92      		push __zero_reg__
 1764               	.LCFI152:
 1765               		.cfi_def_cfa_offset 20
 1766 01e4 8F93      		push r24
 1767               	.LCFI153:
 1768               		.cfi_def_cfa_offset 21
 1769 01e6 80E0      		ldi r24,lo8(__c.2730)
 1770 01e8 90E0      		ldi r25,hi8(__c.2730)
 1771 01ea 9F93      		push r25
 1772               	.LCFI154:
 1773               		.cfi_def_cfa_offset 22
 1774 01ec 8F93      		push r24
 1775               	.LCFI155:
 1776               		.cfi_def_cfa_offset 23
 1777 01ee 0E94 0000 		call __xprintf
 1778 01f2 80E0      		ldi r24,lo8(__c.2732)
 1779 01f4 90E0      		ldi r25,hi8(__c.2732)
 1780 01f6 0E94 0000 		call xputs
 434:../../tmk_core/common/command.c **** }
 1781               		.loc 1 434 0
 1782 01fa 80E0      		ldi r24,lo8(__c.2734)
 1783 01fc 90E0      		ldi r25,hi8(__c.2734)
 1784 01fe 0E94 0000 		call xputs
 1785 0202 8091 0000 		lds r24,mk_wheel_time_to_max
 1786 0206 1F92      		push __zero_reg__
 1787               	.LCFI156:
 1788               		.cfi_def_cfa_offset 24
 1789 0208 8F93      		push r24
 1790               	.LCFI157:
 1791               		.cfi_def_cfa_offset 25
 1792 020a 80E0      		ldi r24,lo8(__c.2736)
 1793 020c 90E0      		ldi r25,hi8(__c.2736)
 1794 020e 9F93      		push r25
 1795               	.LCFI158:
 1796               		.cfi_def_cfa_offset 26
 1797 0210 8F93      		push r24
 1798               	.LCFI159:
 1799               		.cfi_def_cfa_offset 27
 1800 0212 0E94 0000 		call __xprintf
 1801 0216 80E0      		ldi r24,lo8(__c.2738)
 1802 0218 90E0      		ldi r25,hi8(__c.2738)
 1803 021a 0E94 0000 		call xputs
 1804 021e 8DB7      		in r24,__SP_L__
 1805 0220 9EB7      		in r25,__SP_H__
 1806 0222 4896      		adiw r24,24
 1807 0224 0FB6      		in __tmp_reg__,__SREG__
 1808 0226 F894      		cli
 1809 0228 9EBF      		out __SP_H__,r25
 1810 022a 0FBE      		out __SREG__,__tmp_reg__
 1811 022c 8DBF      		out __SP_L__,r24
 1812               	.LCFI160:
 1813               		.cfi_def_cfa_offset 3
 1814 022e 00C0      		rjmp .L130
 1815               	.L119:
 1816 0230 CE51      		subi r28,lo8(-(-30))
 1817 0232 EC2F      		mov r30,r28
 1818 0234 F0E0      		ldi r31,0
 1819 0236 E050      		subi r30,lo8(-(CSWTCH.41))
 1820 0238 F040      		sbci r31,hi8(-(CSWTCH.41))
 1821               	.LBE158:
 1822               	.LBE157:
 584:../../tmk_core/common/command.c ****             break;
 1823               		.loc 1 584 0
 1824 023a 8081      		ld r24,Z
 1825 023c 8093 0000 		sts mousekey_param,r24
 1826 0240 00C0      		rjmp .L130
 1827               	.L128:
 587:../../tmk_core/common/command.c ****             break;
 1828               		.loc 1 587 0
 1829 0242 61E0      		ldi r22,lo8(1)
 1830 0244 00C0      		rjmp .L163
 1831               	.L127:
 590:../../tmk_core/common/command.c ****             break;
 1832               		.loc 1 590 0
 1833 0246 61E0      		ldi r22,lo8(1)
 1834 0248 00C0      		rjmp .L164
 1835               	.L125:
 593:../../tmk_core/common/command.c ****             break;
 1836               		.loc 1 593 0
 1837 024a 6AE0      		ldi r22,lo8(10)
 1838               	.L163:
 1839 024c 8091 0000 		lds r24,mousekey_param
 1840 0250 0E94 0000 		call mousekey_param_inc
 1841 0254 00C0      		rjmp .L130
 1842               	.L164:
 596:../../tmk_core/common/command.c ****             break;
 1843               		.loc 1 596 0
 1844 0256 8091 0000 		lds r24,mousekey_param
 1845 025a 0E94 0000 		call mousekey_param_dec
 1846 025e 00C0      		rjmp .L130
 1847               	.L117:
 608:../../tmk_core/common/command.c ****             return false;
 1848               		.loc 1 608 0
 1849 0260 80E0      		ldi r24,lo8(__c.2818)
 1850 0262 90E0      		ldi r25,hi8(__c.2818)
 1851 0264 00C0      		rjmp .L166
 1852               	.L130:
 611:../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1853               		.loc 1 611 0
 1854 0266 8091 0000 		lds r24,mousekey_param
 1855 026a 8823      		tst r24
 1856 026c 01F0      		breq .L132
 612:../../tmk_core/common/command.c ****     } else {
 1857               		.loc 1 612 0
 1858 026e 1F92      		push __zero_reg__
 1859               	.LCFI161:
 1860               		.cfi_def_cfa_offset 4
 1861 0270 8F93      		push r24
 1862               	.LCFI162:
 1863               		.cfi_def_cfa_offset 5
 1864 0272 80E0      		ldi r24,lo8(__c.2820)
 1865 0274 90E0      		ldi r25,hi8(__c.2820)
 1866 0276 9F93      		push r25
 1867               	.LCFI163:
 1868               		.cfi_def_cfa_offset 6
 1869 0278 8F93      		push r24
 1870               	.LCFI164:
 1871               		.cfi_def_cfa_offset 7
 1872 027a 0E94 0000 		call __xprintf
 1873 027e 0F90      		pop __tmp_reg__
 1874 0280 0F90      		pop __tmp_reg__
 1875 0282 0F90      		pop __tmp_reg__
 1876 0284 0F90      		pop __tmp_reg__
 1877               	.LCFI165:
 1878               		.cfi_def_cfa_offset 3
 1879 0286 00C0      		rjmp .L165
 1880               	.L132:
 614:../../tmk_core/common/command.c ****     }
 1881               		.loc 1 614 0
 1882 0288 80E0      		ldi r24,lo8(__c.2822)
 1883 028a 90E0      		ldi r25,hi8(__c.2822)
 1884               	.L166:
 1885 028c 0E94 0000 		call xputs
 1886               	.L165:
 1887               	.LBE156:
 1888               	.LBE155:
  92:../../tmk_core/common/command.c **** }
 1889               		.loc 1 92 0
 1890 0290 81E0      		ldi r24,lo8(1)
 1891 0292 00C0      		rjmp .L162
 1892               	.L170:
  89:../../tmk_core/common/command.c ****             return false;
 1893               		.loc 1 89 0
 1894 0294 1092 0000 		sts command_state,__zero_reg__
 1895               	.L133:
  74:../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1896               		.loc 1 74 0
 1897 0298 80E0      		ldi r24,0
 1898 029a 00C0      		rjmp .L162
 1899               	.L116:
  81:../../tmk_core/common/command.c ****             break;
 1900               		.loc 1 81 0
 1901 029c 80E0      		ldi r24,0
 1902 029e 00C0      		rjmp .L109
 1903               	.L162:
 1904               	/* epilogue start */
  93:../../tmk_core/common/command.c **** 
 1905               		.loc 1 93 0
 1906 02a0 CF91      		pop r28
 1907 02a2 0895      		ret
 1908               		.cfi_endproc
 1909               	.LFE10:
 1911               		.section	.rodata.CSWTCH.41,"a",@progbits
 1914               	CSWTCH.41:
 1915 0000 01        		.byte	1
 1916 0001 02        		.byte	2
 1917 0002 03        		.byte	3
 1918 0003 04        		.byte	4
 1919 0004 05        		.byte	5
 1920 0005 06        		.byte	6
 1921 0006 07        		.byte	7
 1922 0007 08        		.byte	8
 1923 0008 09        		.byte	9
 1924 0009 00        		.byte	0
 1925               		.section	.progmem.data.__c.2784,"a",@progbits
 1928               	__c.2784:
 1929 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1929      6865 656C 
 1929      5F74 696D 
 1929      655F 746F 
 1929      5F6D 6178 
 1930               		.section	.progmem.data.__c.2781,"a",@progbits
 1933               	__c.2781:
 1934 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1934      6865 656C 
 1934      5F6D 6178 
 1934      5F73 7065 
 1934      6564 203D 
 1935               		.section	.progmem.data.__c.2778,"a",@progbits
 1938               	__c.2778:
 1939 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1939      696D 655F 
 1939      746F 5F6D 
 1939      6178 203D 
 1939      2025 640A 
 1940               		.section	.progmem.data.__c.2775,"a",@progbits
 1943               	__c.2775:
 1944 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1944      6178 5F73 
 1944      7065 6564 
 1944      203D 2025 
 1944      640A 00
 1945               		.section	.progmem.data.__c.2772,"a",@progbits
 1948               	__c.2772:
 1949 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1949      6E74 6572 
 1949      7661 6C20 
 1949      3D20 2564 
 1949      0A00 
 1950               		.section	.progmem.data.__c.2768,"a",@progbits
 1953               	__c.2768:
 1954 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1954      656C 6179 
 1954      203D 2025 
 1954      640A 00
 1955               		.section	.progmem.data.__c.2761,"a",@progbits
 1958               	__c.2761:
 1959 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1959      6865 656C 
 1959      5F74 696D 
 1959      655F 746F 
 1959      5F6D 6178 
 1960               		.section	.progmem.data.__c.2758,"a",@progbits
 1963               	__c.2758:
 1964 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1964      6865 656C 
 1964      5F6D 6178 
 1964      5F73 7065 
 1964      6564 203D 
 1965               		.section	.progmem.data.__c.2755,"a",@progbits
 1968               	__c.2755:
 1969 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1969      696D 655F 
 1969      746F 5F6D 
 1969      6178 203D 
 1969      2025 640A 
 1970               		.section	.progmem.data.__c.2752,"a",@progbits
 1973               	__c.2752:
 1974 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1974      6178 5F73 
 1974      7065 6564 
 1974      203D 2025 
 1974      640A 00
 1975               		.section	.progmem.data.__c.2749,"a",@progbits
 1978               	__c.2749:
 1979 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1979      6E74 6572 
 1979      7661 6C20 
 1979      3D20 2564 
 1979      0A00 
 1980               		.section	.progmem.data.__c.2745,"a",@progbits
 1983               	__c.2745:
 1984 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1984      656C 6179 
 1984      203D 2025 
 1984      640A 00
 1985               		.section	.progmem.data.__c.2738,"a",@progbits
 1988               	__c.2738:
 1989 0000 0A00      		.string	"\n"
 1990               		.section	.progmem.data.__c.2736,"a",@progbits
 1993               	__c.2736:
 1994 0000 2575 00   		.string	"%u"
 1995               		.section	.progmem.data.__c.2734,"a",@progbits
 1998               	__c.2734:
 1999 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 1999      6865 656C 
 1999      5F74 696D 
 1999      655F 746F 
 1999      5F6D 6178 
 2000               		.section	.progmem.data.__c.2732,"a",@progbits
 2003               	__c.2732:
 2004 0000 0A00      		.string	"\n"
 2005               		.section	.progmem.data.__c.2730,"a",@progbits
 2008               	__c.2730:
 2009 0000 2575 00   		.string	"%u"
 2010               		.section	.progmem.data.__c.2728,"a",@progbits
 2013               	__c.2728:
 2014 0000 353A 2077 		.string	"5: wheel_max_speed: "
 2014      6865 656C 
 2014      5F6D 6178 
 2014      5F73 7065 
 2014      6564 3A20 
 2015               		.section	.progmem.data.__c.2726,"a",@progbits
 2018               	__c.2726:
 2019 0000 0A00      		.string	"\n"
 2020               		.section	.progmem.data.__c.2724,"a",@progbits
 2023               	__c.2724:
 2024 0000 2575 00   		.string	"%u"
 2025               		.section	.progmem.data.__c.2722,"a",@progbits
 2028               	__c.2722:
 2029 0000 343A 2074 		.string	"4: time_to_max: "
 2029      696D 655F 
 2029      746F 5F6D 
 2029      6178 3A20 
 2029      00
 2030               		.section	.progmem.data.__c.2720,"a",@progbits
 2033               	__c.2720:
 2034 0000 0A00      		.string	"\n"
 2035               		.section	.progmem.data.__c.2718,"a",@progbits
 2038               	__c.2718:
 2039 0000 2575 00   		.string	"%u"
 2040               		.section	.progmem.data.__c.2716,"a",@progbits
 2043               	__c.2716:
 2044 0000 333A 206D 		.string	"3: max_speed: "
 2044      6178 5F73 
 2044      7065 6564 
 2044      3A20 00
 2045               		.section	.progmem.data.__c.2714,"a",@progbits
 2048               	__c.2714:
 2049 0000 0A00      		.string	"\n"
 2050               		.section	.progmem.data.__c.2712,"a",@progbits
 2053               	__c.2712:
 2054 0000 2575 00   		.string	"%u"
 2055               		.section	.progmem.data.__c.2710,"a",@progbits
 2058               	__c.2710:
 2059 0000 323A 2069 		.string	"2: interval(ms): "
 2059      6E74 6572 
 2059      7661 6C28 
 2059      6D73 293A 
 2059      2000 
 2060               		.section	.progmem.data.__c.2708,"a",@progbits
 2063               	__c.2708:
 2064 0000 0A00      		.string	"\n"
 2065               		.section	.progmem.data.__c.2706,"a",@progbits
 2068               	__c.2706:
 2069 0000 2575 00   		.string	"%u"
 2070               		.section	.progmem.data.__c.2704,"a",@progbits
 2073               	__c.2704:
 2074 0000 313A 2064 		.string	"1: delay(*10ms): "
 2074      656C 6179 
 2074      282A 3130 
 2074      6D73 293A 
 2074      2000 
 2075               		.section	.progmem.data.__c.2702,"a",@progbits
 2078               	__c.2702:
 2079 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 2079      5661 6C75 
 2079      6573 202D 
 2079      0A00 
 2080               		.section	.progmem.data.__c.2822,"a",@progbits
 2083               	__c.2822:
 2084 0000 4D3E 00   		.string	"M>"
 2085               		.section	.progmem.data.__c.2820,"a",@progbits
 2088               	__c.2820:
 2089 0000 4D25 643E 		.string	"M%d> "
 2089      2000 
 2090               		.section	.progmem.data.__c.2818,"a",@progbits
 2093               	__c.2818:
 2094 0000 3F00      		.string	"?"
 2095               		.section	.progmem.data.__c.2815,"a",@progbits
 2098               	__c.2815:
 2099 0000 7365 7420 		.string	"set default\n"
 2099      6465 6661 
 2099      756C 740A 
 2099      00
 2100               		.section	.progmem.data.__c.2801,"a",@progbits
 2103               	__c.2801:
 2104 0000 433E 2000 		.string	"C> "
 2105               		.section	.progmem.data.__c.2791,"a",@progbits
 2108               	__c.2791:
 2109 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 2109      6520 6465 
 2109      6C74 613A 
 2109      2063 7572 
 2109      736F 723D 
 2110               		.section	.progmem.data.__c.2789,"a",@progbits
 2113               	__c.2789:
 2114 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 2114      4D6F 7573 
 2114      656B 6579 
 2114      202D 0A45 
 2114      5343 2F71 
 2115               		.section	.progmem.data.__c.2694,"a",@progbits
 2118               	__c.2694:
 2119 0000 3F00      		.string	"?"
 2120               		.section	.progmem.data.__c.2691,"a",@progbits
 2123               	__c.2691:
 2124 0000 4D3E 2000 		.string	"M> "
 2125               		.section	.progmem.data.__c.2696,"a",@progbits
 2128               	__c.2696:
 2129 0000 433E 2000 		.string	"C> "
 2130               		.section	.progmem.data.__c.2840,"a",@progbits
 2133               	__c.2840:
 2134 0000 4C25 640A 		.string	"L%d\n"
 2134      00
 2135               		.section	.progmem.data.__c.2680,"a",@progbits
 2138               	__c.2680:
 2139 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 2139      436F 6E73 
 2139      6F6C 6520 
 2139      2D0A 4553 
 2139      432F 713A 
 2140               		.section	.progmem.data.__c.2512,"a",@progbits
 2143               	__c.2512:
 2144 0000 0A09 2D20 		.string	"\n\t- Magic -\nd:\tdebug\nx:\tdebug matrix\nk:\tdebug keyboard\nm:\tdebug mouse\nv:\tvers
 2144      4D61 6769 
 2144      6320 2D0A 
 2144      643A 0964 
 2144      6562 7567 
 2145               		.section	.progmem.data.__c.2607,"a",@progbits
 2148               	__c.2607:
 2149 0000 0A00      		.string	"\n"
 2150               		.section	.progmem.data.__c.2605,"a",@progbits
 2153               	__c.2605:
 2154 0000 2575 00   		.string	"%u"
 2155               		.section	.progmem.data.__c.2603,"a",@progbits
 2158               	__c.2603:
 2159 0000 2E6E 6B72 		.string	".nkro: "
 2159      6F3A 2000 
 2160               		.section	.progmem.data.__c.2601,"a",@progbits
 2163               	__c.2601:
 2164 0000 0A00      		.string	"\n"
 2165               		.section	.progmem.data.__c.2599,"a",@progbits
 2168               	__c.2599:
 2169 0000 2575 00   		.string	"%u"
 2170               		.section	.progmem.data.__c.2597,"a",@progbits
 2173               	__c.2597:
 2174 0000 2E73 7761 		.string	".swap_backslash_backspace: "
 2174      705F 6261 
 2174      636B 736C 
 2174      6173 685F 
 2174      6261 636B 
 2175               		.section	.progmem.data.__c.2595,"a",@progbits
 2178               	__c.2595:
 2179 0000 0A00      		.string	"\n"
 2180               		.section	.progmem.data.__c.2593,"a",@progbits
 2183               	__c.2593:
 2184 0000 2575 00   		.string	"%u"
 2185               		.section	.progmem.data.__c.2591,"a",@progbits
 2188               	__c.2591:
 2189 0000 2E73 7761 		.string	".swap_grave_esc: "
 2189      705F 6772 
 2189      6176 655F 
 2189      6573 633A 
 2189      2000 
 2190               		.section	.progmem.data.__c.2589,"a",@progbits
 2193               	__c.2589:
 2194 0000 0A00      		.string	"\n"
 2195               		.section	.progmem.data.__c.2587,"a",@progbits
 2198               	__c.2587:
 2199 0000 2575 00   		.string	"%u"
 2200               		.section	.progmem.data.__c.2585,"a",@progbits
 2203               	__c.2585:
 2204 0000 2E6E 6F5F 		.string	".no_gui: "
 2204      6775 693A 
 2204      2000 
 2205               		.section	.progmem.data.__c.2583,"a",@progbits
 2208               	__c.2583:
 2209 0000 0A00      		.string	"\n"
 2210               		.section	.progmem.data.__c.2581,"a",@progbits
 2213               	__c.2581:
 2214 0000 2575 00   		.string	"%u"
 2215               		.section	.progmem.data.__c.2579,"a",@progbits
 2218               	__c.2579:
 2219 0000 2E73 7761 		.string	".swap_ralt_rgui: "
 2219      705F 7261 
 2219      6C74 5F72 
 2219      6775 693A 
 2219      2000 
 2220               		.section	.progmem.data.__c.2577,"a",@progbits
 2223               	__c.2577:
 2224 0000 0A00      		.string	"\n"
 2225               		.section	.progmem.data.__c.2575,"a",@progbits
 2228               	__c.2575:
 2229 0000 2575 00   		.string	"%u"
 2230               		.section	.progmem.data.__c.2573,"a",@progbits
 2233               	__c.2573:
 2234 0000 2E73 7761 		.string	".swap_lalt_lgui: "
 2234      705F 6C61 
 2234      6C74 5F6C 
 2234      6775 693A 
 2234      2000 
 2235               		.section	.progmem.data.__c.2571,"a",@progbits
 2238               	__c.2571:
 2239 0000 0A00      		.string	"\n"
 2240               		.section	.progmem.data.__c.2569,"a",@progbits
 2243               	__c.2569:
 2244 0000 2575 00   		.string	"%u"
 2245               		.section	.progmem.data.__c.2567,"a",@progbits
 2248               	__c.2567:
 2249 0000 2E63 6170 		.string	".capslock_to_control: "
 2249      736C 6F63 
 2249      6B5F 746F 
 2249      5F63 6F6E 
 2249      7472 6F6C 
 2250               		.section	.progmem.data.__c.2565,"a",@progbits
 2253               	__c.2565:
 2254 0000 0A00      		.string	"\n"
 2255               		.section	.progmem.data.__c.2563,"a",@progbits
 2258               	__c.2563:
 2259 0000 2575 00   		.string	"%u"
 2260               		.section	.progmem.data.__c.2561,"a",@progbits
 2263               	__c.2561:
 2264 0000 2E73 7761 		.string	".swap_control_capslock: "
 2264      705F 636F 
 2264      6E74 726F 
 2264      6C5F 6361 
 2264      7073 6C6F 
 2265               		.section	.progmem.data.__c.2559,"a",@progbits
 2268               	__c.2559:
 2269 0000 0A00      		.string	"\n"
 2270               		.section	.progmem.data.__c.2557,"a",@progbits
 2273               	__c.2557:
 2274 0000 2530 3258 		.string	"%02X"
 2274      00
 2275               		.section	.progmem.data.__c.2555,"a",@progbits
 2278               	__c.2555:
 2279 0000 6B65 796D 		.string	"keymap_config.raw: "
 2279      6170 5F63 
 2279      6F6E 6669 
 2279      672E 7261 
 2279      773A 2000 
 2280               		.section	.progmem.data.__c.2552,"a",@progbits
 2283               	__c.2552:
 2284 0000 0A00      		.string	"\n"
 2285               		.section	.progmem.data.__c.2550,"a",@progbits
 2288               	__c.2550:
 2289 0000 2575 00   		.string	"%u"
 2290               		.section	.progmem.data.__c.2548,"a",@progbits
 2293               	__c.2548:
 2294 0000 2E6D 6F75 		.string	".mouse: "
 2294      7365 3A20 
 2294      00
 2295               		.section	.progmem.data.__c.2546,"a",@progbits
 2298               	__c.2546:
 2299 0000 0A00      		.string	"\n"
 2300               		.section	.progmem.data.__c.2544,"a",@progbits
 2303               	__c.2544:
 2304 0000 2575 00   		.string	"%u"
 2305               		.section	.progmem.data.__c.2542,"a",@progbits
 2308               	__c.2542:
 2309 0000 2E6B 6579 		.string	".keyboard: "
 2309      626F 6172 
 2309      643A 2000 
 2310               		.section	.progmem.data.__c.2540,"a",@progbits
 2313               	__c.2540:
 2314 0000 0A00      		.string	"\n"
 2315               		.section	.progmem.data.__c.2538,"a",@progbits
 2318               	__c.2538:
 2319 0000 2575 00   		.string	"%u"
 2320               		.section	.progmem.data.__c.2536,"a",@progbits
 2323               	__c.2536:
 2324 0000 2E6D 6174 		.string	".matrix: "
 2324      7269 783A 
 2324      2000 
 2325               		.section	.progmem.data.__c.2534,"a",@progbits
 2328               	__c.2534:
 2329 0000 0A00      		.string	"\n"
 2330               		.section	.progmem.data.__c.2532,"a",@progbits
 2333               	__c.2532:
 2334 0000 2575 00   		.string	"%u"
 2335               		.section	.progmem.data.__c.2530,"a",@progbits
 2338               	__c.2530:
 2339 0000 2E65 6E61 		.string	".enable: "
 2339      626C 653A 
 2339      2000 
 2340               		.section	.progmem.data.__c.2528,"a",@progbits
 2343               	__c.2528:
 2344 0000 0A00      		.string	"\n"
 2345               		.section	.progmem.data.__c.2526,"a",@progbits
 2348               	__c.2526:
 2349 0000 2530 3258 		.string	"%02X"
 2349      00
 2350               		.section	.progmem.data.__c.2524,"a",@progbits
 2353               	__c.2524:
 2354 0000 6465 6275 		.string	"debug_config.raw: "
 2354      675F 636F 
 2354      6E66 6967 
 2354      2E72 6177 
 2354      3A20 00
 2355               		.section	.progmem.data.__c.2521,"a",@progbits
 2358               	__c.2521:
 2359 0000 0A00      		.string	"\n"
 2360               		.section	.progmem.data.__c.2519,"a",@progbits
 2363               	__c.2519:
 2364 0000 2575 00   		.string	"%u"
 2365               		.section	.progmem.data.__c.2517,"a",@progbits
 2368               	__c.2517:
 2369 0000 6465 6661 		.string	"default_layer: "
 2369      756C 745F 
 2369      6C61 7965 
 2369      723A 2000 
 2370               		.section	.progmem.data.__c.2675,"a",@progbits
 2373               	__c.2675:
 2374 0000 3F00      		.string	"?"
 2375               		.section	.progmem.data.__c.2666,"a",@progbits
 2378               	__c.2666:
 2379 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 2379      725F 7265 
 2379      6164 3332 
 2379      2829 3A20 
 2379      2530 346C 
 2380               		.section	.progmem.data.__c.2664,"a",@progbits
 2383               	__c.2664:
 2384 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 2384      6F61 7264 
 2384      5F69 646C 
 2384      653A 2025 
 2384      580A 00
 2385               		.section	.progmem.data.__c.2662,"a",@progbits
 2388               	__c.2662:
 2389 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 2389      6F61 7264 
 2389      5F70 726F 
 2389      746F 636F 
 2389      6C3A 2025 
 2390               		.section	.progmem.data.__c.2660,"a",@progbits
 2393               	__c.2660:
 2394 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 2394      5F6B 6579 
 2394      626F 6172 
 2394      645F 6C65 
 2394      6473 2829 
 2395               		.section	.progmem.data.__c.2658,"a",@progbits
 2398               	__c.2658:
 2399 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 2399      5374 6174 
 2399      7573 202D 
 2399      0A00 
 2400               		.section	.progmem.data.__c.2655,"a",@progbits
 2403               	__c.2655:
 2404 0000 4743 433A 		.string	"GCC: 4.8.2 AVR-LIBC: 1.8.0svn AVR_ARCH: avr51\n"
 2404      2034 2E38 
 2404      2E32 2041 
 2404      5652 2D4C 
 2404      4942 433A 
 2405               		.section	.progmem.data.__c.2653,"a",@progbits
 2408               	__c.2653:
 2409 0000 4F50 5449 		.string	"OPTIONS: LUFA BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND 4096\n"
 2409      4F4E 533A 
 2409      204C 5546 
 2409      4120 424F 
 2409      4F54 4D41 
 2410               		.section	.progmem.data.__c.2651,"a",@progbits
 2413               	__c.2651:
 2414 0000 4255 494C 		.string	"BUILD: 7585487-dirty (19:17:57 Jan 28 2017)\n"
 2414      443A 2037 
 2414      3538 3534 
 2414      3837 2D64 
 2414      6972 7479 
 2415               		.section	.progmem.data.__c.2649,"a",@progbits
 2418               	__c.2649:
 2419 0000 5649 443A 		.string	"VID: 0xFEED(geekhack) PID: 0x6060(GH60) VER: 0x0001\n"
 2419      2030 7846 
 2419      4545 4428 
 2419      6765 656B 
 2419      6861 636B 
 2420               		.section	.progmem.data.__c.2647,"a",@progbits
 2423               	__c.2647:
 2424 0000 4445 5343 		.string	"DESC: t.m.k. keyboard firmware for GH60\n"
 2424      3A20 742E 
 2424      6D2E 6B2E 
 2424      206B 6579 
 2424      626F 6172 
 2425               		.section	.progmem.data.__c.2645,"a",@progbits
 2428               	__c.2645:
 2429 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 2429      5665 7273 
 2429      696F 6E20 
 2429      2D0A 00
 2430               		.section	.progmem.data.__c.2642,"a",@progbits
 2433               	__c.2642:
 2434 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 2434      7365 3A20 
 2434      6F66 660A 
 2434      00
 2435               		.section	.progmem.data.__c.2640,"a",@progbits
 2438               	__c.2640:
 2439 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 2439      7365 3A20 
 2439      6F6E 0A00 
 2440               		.section	.progmem.data.__c.2637,"a",@progbits
 2443               	__c.2637:
 2444 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 2444      626F 6172 
 2444      643A 206F 
 2444      6666 0A00 
 2445               		.section	.progmem.data.__c.2635,"a",@progbits
 2448               	__c.2635:
 2449 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 2449      626F 6172 
 2449      643A 206F 
 2449      6E0A 00
 2450               		.section	.progmem.data.__c.2632,"a",@progbits
 2453               	__c.2632:
 2454 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 2454      7269 783A 
 2454      206F 6666 
 2454      0A00 
 2455               		.section	.progmem.data.__c.2630,"a",@progbits
 2458               	__c.2630:
 2459 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 2459      7269 783A 
 2459      206F 6E0A 
 2459      00
 2460               		.section	.progmem.data.__c.2627,"a",@progbits
 2463               	__c.2627:
 2464 0000 0A64 6562 		.string	"\ndebug: on\n"
 2464      7567 3A20 
 2464      6F6E 0A00 
 2465               		.section	.progmem.data.__c.2625,"a",@progbits
 2468               	__c.2625:
 2469 0000 0A64 6562 		.string	"\ndebug: off\n"
 2469      7567 3A20 
 2469      6F66 660A 
 2469      00
 2470               		.section	.progmem.data.__c.2622,"a",@progbits
 2473               	__c.2622:
 2474 0000 0A0A 626F 		.string	"\n\nbootloader... "
 2474      6F74 6C6F 
 2474      6164 6572 
 2474      2E2E 2E20 
 2474      00
 2475               		.section	.progmem.data.__c.2619,"a",@progbits
 2478               	__c.2619:
 2479 0000 433E 2000 		.string	"C> "
 2480               		.section	.progmem.data.__c.2613,"a",@progbits
 2483               	__c.2613:
 2484 0000 6565 636F 		.string	"eeconfig:\n"
 2484      6E66 6967 
 2484      3A0A 00
 2485               		.section	.bss.mousekey_param,"aw",@nobits
 2488               	mousekey_param:
 2489 0000 00        		.zero	1
 2490               	.global	command_state
 2491               		.section	.bss.command_state,"aw",@nobits
 2494               	command_state:
 2495 0000 00        		.zero	1
 2496               		.text
 2497               	.Letext0:
 2498               		.file 3 "c:\\program files (x86)\\mhv avr tools\\avr\\include\\stdint.h"
 2499               		.file 4 "../../tmk_core/common/report.h"
 2500               		.file 5 "../../tmk_core/common/keymap.h"
 2501               		.file 6 "../../tmk_core/common/debug.h"
 2502               		.file 7 "../../tmk_core/common/command.h"
 2503               		.file 8 "../../tmk_core/common/host.h"
 2504               		.file 9 "../../tmk_core/common/action_util.h"
 2505               		.file 10 "../../tmk_core/common/mousekey.h"
 2506               		.file 11 "../../tmk_core/common/avr/xprintf.h"
 2507               		.file 12 "../../tmk_core/common/action_layer.h"
 2508               		.file 13 "../../tmk_core/common/action.h"
 2509               		.file 14 "../../tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:00000000 command.c
C:\msys64\tmp\ccBD544r.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\ccBD544r.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\ccBD544r.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\ccBD544r.s:5      *ABS*:0000003b __RAMPZ__
C:\msys64\tmp\ccBD544r.s:6      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\ccBD544r.s:7      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\ccBD544r.s:13     .text.mousekey_console_help:00000000 mousekey_console_help
C:\msys64\tmp\ccBD544r.s:2113   .progmem.data.__c.2789:00000000 __c.2789
C:\msys64\tmp\ccBD544r.s:2108   .progmem.data.__c.2791:00000000 __c.2791
C:\msys64\tmp\ccBD544r.s:66     .text.mousekey_param_inc:00000000 mousekey_param_inc
C:\msys64\tmp\ccBD544r.s:1983   .progmem.data.__c.2745:00000000 __c.2745
C:\msys64\tmp\ccBD544r.s:1978   .progmem.data.__c.2749:00000000 __c.2749
C:\msys64\tmp\ccBD544r.s:1973   .progmem.data.__c.2752:00000000 __c.2752
C:\msys64\tmp\ccBD544r.s:1968   .progmem.data.__c.2755:00000000 __c.2755
C:\msys64\tmp\ccBD544r.s:1963   .progmem.data.__c.2758:00000000 __c.2758
C:\msys64\tmp\ccBD544r.s:1958   .progmem.data.__c.2761:00000000 __c.2761
C:\msys64\tmp\ccBD544r.s:339    .text.mousekey_param_dec:00000000 mousekey_param_dec
C:\msys64\tmp\ccBD544r.s:1953   .progmem.data.__c.2768:00000000 __c.2768
C:\msys64\tmp\ccBD544r.s:1948   .progmem.data.__c.2772:00000000 __c.2772
C:\msys64\tmp\ccBD544r.s:1943   .progmem.data.__c.2775:00000000 __c.2775
C:\msys64\tmp\ccBD544r.s:1938   .progmem.data.__c.2778:00000000 __c.2778
C:\msys64\tmp\ccBD544r.s:1933   .progmem.data.__c.2781:00000000 __c.2781
C:\msys64\tmp\ccBD544r.s:1928   .progmem.data.__c.2784:00000000 __c.2784
C:\msys64\tmp\ccBD544r.s:557    .text.switch_default_layer:00000000 switch_default_layer
C:\msys64\tmp\ccBD544r.s:2133   .progmem.data.__c.2840:00000000 __c.2840
C:\msys64\tmp\ccBD544r.s:623    .text.command_common:00000000 command_common
C:\msys64\tmp\ccBD544r.s:2138   .progmem.data.__c.2680:00000000 __c.2680
C:\msys64\tmp\ccBD544r.s:2478   .progmem.data.__c.2619:00000000 __c.2619
C:\msys64\tmp\ccBD544r.s:2494   .bss.command_state:00000000 command_state
C:\msys64\tmp\ccBD544r.s:2473   .progmem.data.__c.2622:00000000 __c.2622
C:\msys64\tmp\ccBD544r.s:2483   .progmem.data.__c.2613:00000000 __c.2613
C:\msys64\tmp\ccBD544r.s:2368   .progmem.data.__c.2517:00000000 __c.2517
C:\msys64\tmp\ccBD544r.s:2363   .progmem.data.__c.2519:00000000 __c.2519
C:\msys64\tmp\ccBD544r.s:2358   .progmem.data.__c.2521:00000000 __c.2521
C:\msys64\tmp\ccBD544r.s:2353   .progmem.data.__c.2524:00000000 __c.2524
C:\msys64\tmp\ccBD544r.s:2348   .progmem.data.__c.2526:00000000 __c.2526
C:\msys64\tmp\ccBD544r.s:2343   .progmem.data.__c.2528:00000000 __c.2528
C:\msys64\tmp\ccBD544r.s:2338   .progmem.data.__c.2530:00000000 __c.2530
C:\msys64\tmp\ccBD544r.s:2333   .progmem.data.__c.2532:00000000 __c.2532
C:\msys64\tmp\ccBD544r.s:2328   .progmem.data.__c.2534:00000000 __c.2534
C:\msys64\tmp\ccBD544r.s:2323   .progmem.data.__c.2536:00000000 __c.2536
C:\msys64\tmp\ccBD544r.s:2318   .progmem.data.__c.2538:00000000 __c.2538
C:\msys64\tmp\ccBD544r.s:2313   .progmem.data.__c.2540:00000000 __c.2540
C:\msys64\tmp\ccBD544r.s:2308   .progmem.data.__c.2542:00000000 __c.2542
C:\msys64\tmp\ccBD544r.s:2303   .progmem.data.__c.2544:00000000 __c.2544
C:\msys64\tmp\ccBD544r.s:2298   .progmem.data.__c.2546:00000000 __c.2546
C:\msys64\tmp\ccBD544r.s:2293   .progmem.data.__c.2548:00000000 __c.2548
C:\msys64\tmp\ccBD544r.s:2288   .progmem.data.__c.2550:00000000 __c.2550
C:\msys64\tmp\ccBD544r.s:2283   .progmem.data.__c.2552:00000000 __c.2552
C:\msys64\tmp\ccBD544r.s:2278   .progmem.data.__c.2555:00000000 __c.2555
C:\msys64\tmp\ccBD544r.s:2273   .progmem.data.__c.2557:00000000 __c.2557
C:\msys64\tmp\ccBD544r.s:2268   .progmem.data.__c.2559:00000000 __c.2559
C:\msys64\tmp\ccBD544r.s:2263   .progmem.data.__c.2561:00000000 __c.2561
C:\msys64\tmp\ccBD544r.s:2258   .progmem.data.__c.2563:00000000 __c.2563
C:\msys64\tmp\ccBD544r.s:2253   .progmem.data.__c.2565:00000000 __c.2565
C:\msys64\tmp\ccBD544r.s:2248   .progmem.data.__c.2567:00000000 __c.2567
C:\msys64\tmp\ccBD544r.s:2243   .progmem.data.__c.2569:00000000 __c.2569
C:\msys64\tmp\ccBD544r.s:2238   .progmem.data.__c.2571:00000000 __c.2571
C:\msys64\tmp\ccBD544r.s:2233   .progmem.data.__c.2573:00000000 __c.2573
C:\msys64\tmp\ccBD544r.s:2228   .progmem.data.__c.2575:00000000 __c.2575
C:\msys64\tmp\ccBD544r.s:2223   .progmem.data.__c.2577:00000000 __c.2577
C:\msys64\tmp\ccBD544r.s:2218   .progmem.data.__c.2579:00000000 __c.2579
C:\msys64\tmp\ccBD544r.s:2213   .progmem.data.__c.2581:00000000 __c.2581
C:\msys64\tmp\ccBD544r.s:2208   .progmem.data.__c.2583:00000000 __c.2583
C:\msys64\tmp\ccBD544r.s:2203   .progmem.data.__c.2585:00000000 __c.2585
C:\msys64\tmp\ccBD544r.s:2198   .progmem.data.__c.2587:00000000 __c.2587
C:\msys64\tmp\ccBD544r.s:2193   .progmem.data.__c.2589:00000000 __c.2589
C:\msys64\tmp\ccBD544r.s:2188   .progmem.data.__c.2591:00000000 __c.2591
C:\msys64\tmp\ccBD544r.s:2183   .progmem.data.__c.2593:00000000 __c.2593
C:\msys64\tmp\ccBD544r.s:2178   .progmem.data.__c.2595:00000000 __c.2595
C:\msys64\tmp\ccBD544r.s:2173   .progmem.data.__c.2597:00000000 __c.2597
C:\msys64\tmp\ccBD544r.s:2168   .progmem.data.__c.2599:00000000 __c.2599
C:\msys64\tmp\ccBD544r.s:2163   .progmem.data.__c.2601:00000000 __c.2601
C:\msys64\tmp\ccBD544r.s:2158   .progmem.data.__c.2603:00000000 __c.2603
C:\msys64\tmp\ccBD544r.s:2153   .progmem.data.__c.2605:00000000 __c.2605
C:\msys64\tmp\ccBD544r.s:2148   .progmem.data.__c.2607:00000000 __c.2607
C:\msys64\tmp\ccBD544r.s:2143   .progmem.data.__c.2512:00000000 __c.2512
C:\msys64\tmp\ccBD544r.s:2468   .progmem.data.__c.2625:00000000 __c.2625
C:\msys64\tmp\ccBD544r.s:2463   .progmem.data.__c.2627:00000000 __c.2627
C:\msys64\tmp\ccBD544r.s:2458   .progmem.data.__c.2630:00000000 __c.2630
C:\msys64\tmp\ccBD544r.s:2453   .progmem.data.__c.2632:00000000 __c.2632
C:\msys64\tmp\ccBD544r.s:2448   .progmem.data.__c.2635:00000000 __c.2635
C:\msys64\tmp\ccBD544r.s:2443   .progmem.data.__c.2637:00000000 __c.2637
C:\msys64\tmp\ccBD544r.s:2438   .progmem.data.__c.2640:00000000 __c.2640
C:\msys64\tmp\ccBD544r.s:2433   .progmem.data.__c.2642:00000000 __c.2642
C:\msys64\tmp\ccBD544r.s:2428   .progmem.data.__c.2645:00000000 __c.2645
C:\msys64\tmp\ccBD544r.s:2423   .progmem.data.__c.2647:00000000 __c.2647
C:\msys64\tmp\ccBD544r.s:2418   .progmem.data.__c.2649:00000000 __c.2649
C:\msys64\tmp\ccBD544r.s:2413   .progmem.data.__c.2651:00000000 __c.2651
C:\msys64\tmp\ccBD544r.s:2408   .progmem.data.__c.2653:00000000 __c.2653
C:\msys64\tmp\ccBD544r.s:2403   .progmem.data.__c.2655:00000000 __c.2655
C:\msys64\tmp\ccBD544r.s:2398   .progmem.data.__c.2658:00000000 __c.2658
C:\msys64\tmp\ccBD544r.s:2393   .progmem.data.__c.2660:00000000 __c.2660
C:\msys64\tmp\ccBD544r.s:2388   .progmem.data.__c.2662:00000000 __c.2662
C:\msys64\tmp\ccBD544r.s:2383   .progmem.data.__c.2664:00000000 __c.2664
C:\msys64\tmp\ccBD544r.s:2378   .progmem.data.__c.2666:00000000 __c.2666
C:\msys64\tmp\ccBD544r.s:2373   .progmem.data.__c.2675:00000000 __c.2675
C:\msys64\tmp\ccBD544r.s:1419   .text.command_extra:00000000 command_extra
C:\msys64\tmp\ccBD544r.s:1438   .text.command_console_extra:00000000 command_console_extra
C:\msys64\tmp\ccBD544r.s:1457   .text.command_proc:00000000 command_proc
C:\msys64\tmp\ccBD544r.s:2123   .progmem.data.__c.2691:00000000 __c.2691
C:\msys64\tmp\ccBD544r.s:2128   .progmem.data.__c.2696:00000000 __c.2696
C:\msys64\tmp\ccBD544r.s:2118   .progmem.data.__c.2694:00000000 __c.2694
C:\msys64\tmp\ccBD544r.s:2098   .progmem.data.__c.2815:00000000 __c.2815
C:\msys64\tmp\ccBD544r.s:2488   .bss.mousekey_param:00000000 mousekey_param
C:\msys64\tmp\ccBD544r.s:2103   .progmem.data.__c.2801:00000000 __c.2801
C:\msys64\tmp\ccBD544r.s:2078   .progmem.data.__c.2702:00000000 __c.2702
C:\msys64\tmp\ccBD544r.s:2073   .progmem.data.__c.2704:00000000 __c.2704
C:\msys64\tmp\ccBD544r.s:2068   .progmem.data.__c.2706:00000000 __c.2706
C:\msys64\tmp\ccBD544r.s:2063   .progmem.data.__c.2708:00000000 __c.2708
C:\msys64\tmp\ccBD544r.s:2058   .progmem.data.__c.2710:00000000 __c.2710
C:\msys64\tmp\ccBD544r.s:2053   .progmem.data.__c.2712:00000000 __c.2712
C:\msys64\tmp\ccBD544r.s:2048   .progmem.data.__c.2714:00000000 __c.2714
C:\msys64\tmp\ccBD544r.s:2043   .progmem.data.__c.2716:00000000 __c.2716
C:\msys64\tmp\ccBD544r.s:2038   .progmem.data.__c.2718:00000000 __c.2718
C:\msys64\tmp\ccBD544r.s:2033   .progmem.data.__c.2720:00000000 __c.2720
C:\msys64\tmp\ccBD544r.s:2028   .progmem.data.__c.2722:00000000 __c.2722
C:\msys64\tmp\ccBD544r.s:2023   .progmem.data.__c.2724:00000000 __c.2724
C:\msys64\tmp\ccBD544r.s:2018   .progmem.data.__c.2726:00000000 __c.2726
C:\msys64\tmp\ccBD544r.s:2013   .progmem.data.__c.2728:00000000 __c.2728
C:\msys64\tmp\ccBD544r.s:2008   .progmem.data.__c.2730:00000000 __c.2730
C:\msys64\tmp\ccBD544r.s:2003   .progmem.data.__c.2732:00000000 __c.2732
C:\msys64\tmp\ccBD544r.s:1998   .progmem.data.__c.2734:00000000 __c.2734
C:\msys64\tmp\ccBD544r.s:1993   .progmem.data.__c.2736:00000000 __c.2736
C:\msys64\tmp\ccBD544r.s:1988   .progmem.data.__c.2738:00000000 __c.2738
C:\msys64\tmp\ccBD544r.s:1914   .rodata.CSWTCH.41:00000000 CSWTCH.41
C:\msys64\tmp\ccBD544r.s:2093   .progmem.data.__c.2818:00000000 __c.2818
C:\msys64\tmp\ccBD544r.s:2088   .progmem.data.__c.2820:00000000 __c.2820
C:\msys64\tmp\ccBD544r.s:2083   .progmem.data.__c.2822:00000000 __c.2822

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
host_keyboard_leds
keyboard_protocol
keyboard_idle
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
