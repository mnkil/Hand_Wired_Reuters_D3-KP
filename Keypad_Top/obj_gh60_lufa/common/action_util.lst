   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.add_key,"ax",@progbits
  12               	.global	add_key
  14               	add_key:
  15               	.LFB2:
  16               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  17               		.loc 1 77 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24               	.LBB4:
  25               	.LBB5:
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  26               		.loc 1 238 0
  27 0000 4091 0000 		lds r20,keyboard_report
  28 0004 5091 0000 		lds r21,keyboard_report+1
  29 0008 20E0      		ldi r18,0
  30 000a 30E0      		ldi r19,0
 236:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
  31               		.loc 1 236 0
  32 000c 9FEF      		ldi r25,lo8(-1)
  33               	.LVL1:
  34               	.L5:
  35 000e FA01      		movw r30,r20
  36 0010 E20F      		add r30,r18
  37 0012 F31F      		adc r31,r19
  38               		.loc 1 238 0
  39 0014 6281      		ldd r22,Z+2
  40 0016 6817      		cp r22,r24
  41 0018 01F0      		breq .L1
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
  42               		.loc 1 241 0
  43 001a 9F3F      		cpi r25,lo8(-1)
  44 001c 01F4      		brne .L3
  45 001e 6111      		cpse r22,__zero_reg__
  46 0020 00C0      		rjmp .L3
  47 0022 922F      		mov r25,r18
  48               	.LVL2:
  49               	.L3:
  50 0024 2F5F      		subi r18,-1
  51 0026 3F4F      		sbci r19,-1
  52               	.LVL3:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  53               		.loc 1 237 0
  54 0028 2630      		cpi r18,6
  55 002a 3105      		cpc r19,__zero_reg__
  56 002c 01F4      		brne .L5
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
  57               		.loc 1 246 0
  58 002e 9F3F      		cpi r25,lo8(-1)
  59 0030 01F0      		breq .L1
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
  60               		.loc 1 247 0
  61 0032 FA01      		movw r30,r20
  62 0034 E90F      		add r30,r25
  63 0036 F11D      		adc r31,__zero_reg__
  64 0038 97FD      		sbrc r25,7
  65 003a FA95      		dec r31
  66 003c 8283      		std Z+2,r24
  67 003e 0895      		ret
  68               	.LVL4:
  69               	.L1:
  70 0040 0895      		ret
  71               	.LBE5:
  72               	.LBE4:
  73               		.cfi_endproc
  74               	.LFE2:
  76               		.section	.text.del_key,"ax",@progbits
  77               	.global	del_key
  79               	del_key:
  80               	.LFB3:
  88:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  81               		.loc 1 88 0
  82               		.cfi_startproc
  83               	.LVL5:
  84               	/* prologue: function */
  85               	/* frame size = 0 */
  86               	/* stack size = 0 */
  87               	.L__stack_usage = 0
  88               	.LBB9:
  89               	.LBB10:
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  90               		.loc 1 282 0
  91 0000 4091 0000 		lds r20,keyboard_report
  92 0004 5091 0000 		lds r21,keyboard_report+1
  93 0008 20E0      		ldi r18,0
  94 000a 30E0      		ldi r19,0
  95               	.LVL6:
  96               	.L12:
  97 000c FA01      		movw r30,r20
  98 000e E20F      		add r30,r18
  99 0010 F31F      		adc r31,r19
 100 0012 9281      		ldd r25,Z+2
 101 0014 9813      		cpse r25,r24
 102 0016 00C0      		rjmp .L10
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 103               		.loc 1 283 0
 104 0018 1282      		std Z+2,__zero_reg__
 105               	.L10:
 106               	.LVL7:
 107 001a 2F5F      		subi r18,-1
 108 001c 3F4F      		sbci r19,-1
 109               	.LVL8:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 110               		.loc 1 281 0
 111 001e 2630      		cpi r18,6
 112 0020 3105      		cpc r19,__zero_reg__
 113 0022 01F4      		brne .L12
 114               	/* epilogue start */
 115               	.LBE10:
 116               	.LBE9:
  96:../../tmk_core/common/action_util.c **** 
 117               		.loc 1 96 0
 118 0024 0895      		ret
 119               		.cfi_endproc
 120               	.LFE3:
 122               		.section	.text.clear_keys,"ax",@progbits
 123               	.global	clear_keys
 125               	clear_keys:
 126               	.LFB4:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 127               		.loc 1 99 0
 128               		.cfi_startproc
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 0 */
 132               	.L__stack_usage = 0
 133               	.LVL9:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 134               		.loc 1 99 0
 135 0000 81E0      		ldi r24,lo8(1)
 136 0002 90E0      		ldi r25,0
 137               	.LVL10:
 138               	.L15:
 139               	.LBB11:
 102:../../tmk_core/common/action_util.c ****     }
 140               		.loc 1 102 0 discriminator 2
 141 0004 E091 0000 		lds r30,keyboard_report
 142 0008 F091 0000 		lds r31,keyboard_report+1
 143 000c E80F      		add r30,r24
 144 000e F91F      		adc r31,r25
 145 0010 1082      		st Z,__zero_reg__
 146               	.LVL11:
 147 0012 0196      		adiw r24,1
 148               	.LVL12:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 149               		.loc 1 101 0 discriminator 2
 150 0014 8830      		cpi r24,8
 151 0016 9105      		cpc r25,__zero_reg__
 152 0018 01F4      		brne .L15
 153               	/* epilogue start */
 154               	.LBE11:
 104:../../tmk_core/common/action_util.c **** 
 155               		.loc 1 104 0
 156 001a 0895      		ret
 157               		.cfi_endproc
 158               	.LFE4:
 160               		.section	.text.get_mods,"ax",@progbits
 161               	.global	get_mods
 163               	get_mods:
 164               	.LFB5:
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 165               		.loc 1 108 0
 166               		.cfi_startproc
 167               	/* prologue: function */
 168               	/* frame size = 0 */
 169               	/* stack size = 0 */
 170               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 171               		.loc 1 108 0
 172 0000 8091 0000 		lds r24,real_mods
 173 0004 0895      		ret
 174               		.cfi_endproc
 175               	.LFE5:
 177               		.section	.text.add_mods,"ax",@progbits
 178               	.global	add_mods
 180               	add_mods:
 181               	.LFB6:
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 182               		.loc 1 109 0
 183               		.cfi_startproc
 184               	.LVL13:
 185               	/* prologue: function */
 186               	/* frame size = 0 */
 187               	/* stack size = 0 */
 188               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 189               		.loc 1 109 0
 190 0000 9091 0000 		lds r25,real_mods
 191 0004 982B      		or r25,r24
 192 0006 9093 0000 		sts real_mods,r25
 193 000a 0895      		ret
 194               		.cfi_endproc
 195               	.LFE6:
 197               		.section	.text.del_mods,"ax",@progbits
 198               	.global	del_mods
 200               	del_mods:
 201               	.LFB7:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 202               		.loc 1 110 0
 203               		.cfi_startproc
 204               	.LVL14:
 205               	/* prologue: function */
 206               	/* frame size = 0 */
 207               	/* stack size = 0 */
 208               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 209               		.loc 1 110 0
 210 0000 8095      		com r24
 211               	.LVL15:
 212 0002 9091 0000 		lds r25,real_mods
 213 0006 9823      		and r25,r24
 214 0008 9093 0000 		sts real_mods,r25
 215 000c 0895      		ret
 216               		.cfi_endproc
 217               	.LFE7:
 219               		.section	.text.set_mods,"ax",@progbits
 220               	.global	set_mods
 222               	set_mods:
 223               	.LFB8:
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 224               		.loc 1 111 0
 225               		.cfi_startproc
 226               	.LVL16:
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 231               		.loc 1 111 0
 232 0000 8093 0000 		sts real_mods,r24
 233 0004 0895      		ret
 234               		.cfi_endproc
 235               	.LFE8:
 237               		.section	.text.clear_mods,"ax",@progbits
 238               	.global	clear_mods
 240               	clear_mods:
 241               	.LFB9:
 112:../../tmk_core/common/action_util.c **** 
 242               		.loc 1 112 0
 243               		.cfi_startproc
 244               	/* prologue: function */
 245               	/* frame size = 0 */
 246               	/* stack size = 0 */
 247               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** 
 248               		.loc 1 112 0
 249 0000 1092 0000 		sts real_mods,__zero_reg__
 250 0004 0895      		ret
 251               		.cfi_endproc
 252               	.LFE9:
 254               		.section	.text.get_weak_mods,"ax",@progbits
 255               	.global	get_weak_mods
 257               	get_weak_mods:
 258               	.LFB10:
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 259               		.loc 1 115 0
 260               		.cfi_startproc
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 0 */
 264               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 265               		.loc 1 115 0
 266 0000 8091 0000 		lds r24,weak_mods
 267 0004 0895      		ret
 268               		.cfi_endproc
 269               	.LFE10:
 271               		.section	.text.add_weak_mods,"ax",@progbits
 272               	.global	add_weak_mods
 274               	add_weak_mods:
 275               	.LFB11:
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 276               		.loc 1 116 0
 277               		.cfi_startproc
 278               	.LVL17:
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* stack size = 0 */
 282               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 283               		.loc 1 116 0
 284 0000 9091 0000 		lds r25,weak_mods
 285 0004 982B      		or r25,r24
 286 0006 9093 0000 		sts weak_mods,r25
 287 000a 0895      		ret
 288               		.cfi_endproc
 289               	.LFE11:
 291               		.section	.text.del_weak_mods,"ax",@progbits
 292               	.global	del_weak_mods
 294               	del_weak_mods:
 295               	.LFB12:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 296               		.loc 1 117 0
 297               		.cfi_startproc
 298               	.LVL18:
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 0 */
 302               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 303               		.loc 1 117 0
 304 0000 8095      		com r24
 305               	.LVL19:
 306 0002 9091 0000 		lds r25,weak_mods
 307 0006 9823      		and r25,r24
 308 0008 9093 0000 		sts weak_mods,r25
 309 000c 0895      		ret
 310               		.cfi_endproc
 311               	.LFE12:
 313               		.section	.text.set_weak_mods,"ax",@progbits
 314               	.global	set_weak_mods
 316               	set_weak_mods:
 317               	.LFB13:
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 318               		.loc 1 118 0
 319               		.cfi_startproc
 320               	.LVL20:
 321               	/* prologue: function */
 322               	/* frame size = 0 */
 323               	/* stack size = 0 */
 324               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 325               		.loc 1 118 0
 326 0000 8093 0000 		sts weak_mods,r24
 327 0004 0895      		ret
 328               		.cfi_endproc
 329               	.LFE13:
 331               		.section	.text.clear_weak_mods,"ax",@progbits
 332               	.global	clear_weak_mods
 334               	clear_weak_mods:
 335               	.LFB14:
 119:../../tmk_core/common/action_util.c **** 
 336               		.loc 1 119 0
 337               		.cfi_startproc
 338               	/* prologue: function */
 339               	/* frame size = 0 */
 340               	/* stack size = 0 */
 341               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** 
 342               		.loc 1 119 0
 343 0000 1092 0000 		sts weak_mods,__zero_reg__
 344 0004 0895      		ret
 345               		.cfi_endproc
 346               	.LFE14:
 348               		.section	.text.set_oneshot_mods,"ax",@progbits
 349               	.global	set_oneshot_mods
 351               	set_oneshot_mods:
 352               	.LFB15:
 124:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 353               		.loc 1 124 0
 354               		.cfi_startproc
 355               	.LVL21:
 356               	/* prologue: function */
 357               	/* frame size = 0 */
 358               	/* stack size = 0 */
 359               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 360               		.loc 1 125 0
 361 0000 8093 0000 		sts oneshot_mods,r24
 362 0004 0895      		ret
 363               		.cfi_endproc
 364               	.LFE15:
 366               		.section	.text.clear_oneshot_mods,"ax",@progbits
 367               	.global	clear_oneshot_mods
 369               	clear_oneshot_mods:
 370               	.LFB16:
 131:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 371               		.loc 1 131 0
 372               		.cfi_startproc
 373               	/* prologue: function */
 374               	/* frame size = 0 */
 375               	/* stack size = 0 */
 376               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 377               		.loc 1 132 0
 378 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 379 0004 0895      		ret
 380               		.cfi_endproc
 381               	.LFE16:
 383               		.section	.text.has_anykey,"ax",@progbits
 384               	.global	has_anykey
 386               	has_anykey:
 387               	.LFB17:
 146:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 388               		.loc 1 146 0
 389               		.cfi_startproc
 390               	/* prologue: function */
 391               	/* frame size = 0 */
 392               	/* stack size = 0 */
 393               	.L__stack_usage = 0
 394               	.LVL22:
 395               	.LBB12:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 396               		.loc 1 149 0
 397 0000 4091 0000 		lds r20,keyboard_report
 398 0004 5091 0000 		lds r21,keyboard_report+1
 399 0008 20E0      		ldi r18,0
 400 000a 30E0      		ldi r19,0
 401               	.LBE12:
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 402               		.loc 1 147 0
 403 000c 80E0      		ldi r24,0
 404               	.LVL23:
 405               	.L31:
 406 000e FA01      		movw r30,r20
 407 0010 E20F      		add r30,r18
 408 0012 F31F      		adc r31,r19
 409               	.LBB13:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 410               		.loc 1 149 0
 411 0014 9181      		ldd r25,Z+1
 412 0016 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****     }
 413               		.loc 1 150 0
 414 0018 8F5F      		subi r24,lo8(-(1))
 415               	.LVL24:
 416               	.L29:
 417 001a 2F5F      		subi r18,-1
 418 001c 3F4F      		sbci r19,-1
 419               	.LVL25:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 420               		.loc 1 148 0
 421 001e 2730      		cpi r18,7
 422 0020 3105      		cpc r19,__zero_reg__
 423 0022 01F4      		brne .L31
 424               	/* epilogue start */
 425               	.LBE13:
 153:../../tmk_core/common/action_util.c **** 
 426               		.loc 1 153 0
 427 0024 0895      		ret
 428               		.cfi_endproc
 429               	.LFE17:
 431               		.section	.text.send_keyboard_report,"ax",@progbits
 432               	.global	send_keyboard_report
 434               	send_keyboard_report:
 435               	.LFB1:
  55:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 436               		.loc 1 55 0
 437               		.cfi_startproc
 438               	/* prologue: function */
 439               	/* frame size = 0 */
 440               	/* stack size = 0 */
 441               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 442               		.loc 1 56 0
 443 0000 E091 0000 		lds r30,keyboard_report
 444 0004 F091 0000 		lds r31,keyboard_report+1
 445 0008 8091 0000 		lds r24,real_mods
 446 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 447               		.loc 1 57 0
 448 000e E091 0000 		lds r30,keyboard_report
 449 0012 F091 0000 		lds r31,keyboard_report+1
 450 0016 8081      		ld r24,Z
 451 0018 9091 0000 		lds r25,weak_mods
 452 001c 892B      		or r24,r25
 453 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 454               		.loc 1 59 0
 455 0020 9091 0000 		lds r25,oneshot_mods
 456 0024 9923      		tst r25
 457 0026 01F0      		breq .L37
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 458               		.loc 1 66 0
 459 0028 E091 0000 		lds r30,keyboard_report
 460 002c F091 0000 		lds r31,keyboard_report+1
 461 0030 8081      		ld r24,Z
 462 0032 892B      		or r24,r25
 463 0034 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 464               		.loc 1 67 0
 465 0036 0E94 0000 		call has_anykey
 466               	.LVL26:
 467 003a 8111      		cpse r24,__zero_reg__
 468               	.LBB16:
 469               	.LBB17:
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 470               		.loc 1 132 0
 471 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 472               	.L37:
 473               	.LBE17:
 474               	.LBE16:
  72:../../tmk_core/common/action_util.c **** }
 475               		.loc 1 72 0
 476 0040 8091 0000 		lds r24,keyboard_report
 477 0044 9091 0000 		lds r25,keyboard_report+1
 478 0048 0C94 0000 		jmp host_keyboard_send
 479               	.LVL27:
 480               		.cfi_endproc
 481               	.LFE1:
 483               		.section	.text.has_anymod,"ax",@progbits
 484               	.global	has_anymod
 486               	has_anymod:
 487               	.LFB18:
 156:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 488               		.loc 1 156 0
 489               		.cfi_startproc
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 492               	/* stack size = 0 */
 493               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c **** }
 494               		.loc 1 157 0
 495 0000 8091 0000 		lds r24,real_mods
 496 0004 0C94 0000 		jmp bitpop
 497               	.LVL28:
 498               		.cfi_endproc
 499               	.LFE18:
 501               		.section	.text.get_first_key,"ax",@progbits
 502               	.global	get_first_key
 504               	get_first_key:
 505               	.LFB19:
 161:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 506               		.loc 1 161 0
 507               		.cfi_startproc
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 0 */
 511               	.L__stack_usage = 0
 180:../../tmk_core/common/action_util.c **** #endif
 512               		.loc 1 180 0
 513 0000 E091 0000 		lds r30,keyboard_report
 514 0004 F091 0000 		lds r31,keyboard_report+1
 182:../../tmk_core/common/action_util.c **** 
 515               		.loc 1 182 0
 516 0008 8281      		ldd r24,Z+2
 517 000a 0895      		ret
 518               		.cfi_endproc
 519               	.LFE19:
 521               		.section	.bss.oneshot_mods,"aw",@nobits
 524               	oneshot_mods:
 525 0000 00        		.zero	1
 526               	.global	keyboard_report
 527               		.section	.data.keyboard_report,"aw",@progbits
 530               	keyboard_report:
 531 0000 0000      		.word	__compound_literal.0
 532               		.section	.bss.__compound_literal.0,"aw",@nobits
 535               	__compound_literal.0:
 536 0000 0000 0000 		.zero	8
 536      0000 0000 
 537               		.section	.bss.weak_mods,"aw",@nobits
 540               	weak_mods:
 541 0000 00        		.zero	1
 542               		.section	.bss.real_mods,"aw",@nobits
 545               	real_mods:
 546 0000 00        		.zero	1
 547               		.text
 548               	.Letext0:
 549               		.file 2 "c:\\program files (x86)\\mhv avr tools\\avr\\include\\stdint.h"
 550               		.file 3 "../../tmk_core/common/report.h"
 551               		.file 4 "../../tmk_core/common/host.h"
 552               		.file 5 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action_util.c
C:\msys64\tmp\cczKjYsm.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\cczKjYsm.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\cczKjYsm.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\cczKjYsm.s:5      *ABS*:0000003b __RAMPZ__
C:\msys64\tmp\cczKjYsm.s:6      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\cczKjYsm.s:7      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\cczKjYsm.s:14     .text.add_key:00000000 add_key
C:\msys64\tmp\cczKjYsm.s:530    .data.keyboard_report:00000000 keyboard_report
C:\msys64\tmp\cczKjYsm.s:79     .text.del_key:00000000 del_key
C:\msys64\tmp\cczKjYsm.s:125    .text.clear_keys:00000000 clear_keys
C:\msys64\tmp\cczKjYsm.s:163    .text.get_mods:00000000 get_mods
C:\msys64\tmp\cczKjYsm.s:545    .bss.real_mods:00000000 real_mods
C:\msys64\tmp\cczKjYsm.s:180    .text.add_mods:00000000 add_mods
C:\msys64\tmp\cczKjYsm.s:200    .text.del_mods:00000000 del_mods
C:\msys64\tmp\cczKjYsm.s:222    .text.set_mods:00000000 set_mods
C:\msys64\tmp\cczKjYsm.s:240    .text.clear_mods:00000000 clear_mods
C:\msys64\tmp\cczKjYsm.s:257    .text.get_weak_mods:00000000 get_weak_mods
C:\msys64\tmp\cczKjYsm.s:540    .bss.weak_mods:00000000 weak_mods
C:\msys64\tmp\cczKjYsm.s:274    .text.add_weak_mods:00000000 add_weak_mods
C:\msys64\tmp\cczKjYsm.s:294    .text.del_weak_mods:00000000 del_weak_mods
C:\msys64\tmp\cczKjYsm.s:316    .text.set_weak_mods:00000000 set_weak_mods
C:\msys64\tmp\cczKjYsm.s:334    .text.clear_weak_mods:00000000 clear_weak_mods
C:\msys64\tmp\cczKjYsm.s:351    .text.set_oneshot_mods:00000000 set_oneshot_mods
C:\msys64\tmp\cczKjYsm.s:524    .bss.oneshot_mods:00000000 oneshot_mods
C:\msys64\tmp\cczKjYsm.s:369    .text.clear_oneshot_mods:00000000 clear_oneshot_mods
C:\msys64\tmp\cczKjYsm.s:386    .text.has_anykey:00000000 has_anykey
C:\msys64\tmp\cczKjYsm.s:434    .text.send_keyboard_report:00000000 send_keyboard_report
C:\msys64\tmp\cczKjYsm.s:486    .text.has_anymod:00000000 has_anymod
C:\msys64\tmp\cczKjYsm.s:504    .text.get_first_key:00000000 get_first_key
C:\msys64\tmp\cczKjYsm.s:535    .bss.__compound_literal.0:00000000 __compound_literal.0

UNDEFINED SYMBOLS
host_keyboard_send
bitpop
__do_copy_data
__do_clear_bss
