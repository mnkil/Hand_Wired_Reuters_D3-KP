
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000050fe  00005192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800132  00800132  000051c4  2**0
                  ALLOC
  3 .noinit       00000004  008001be  008001be  000051c4  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000051c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a0  00000000  00000000  00005a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000027  00000000  00000000  00005b1c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b20  00000000  00000000  00005b48  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010f70  00000000  00000000  00006668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a01  00000000  00000000  000175d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000058ae  00000000  00000000  0001bfd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001ba4  00000000  00000000  00021888  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004a77  00000000  00000000  0002342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000089b8  00000000  00000000  00027ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf0  00000000  00000000  0003085b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__ctors_end>
       4:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
       8:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
       c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      10:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      14:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      18:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      1c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      20:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      24:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      28:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__vector_10>
      2c:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__vector_11>
      30:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__vector_12>
      34:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      3c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      40:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      44:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      4c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      50:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__vector_21>
      58:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      5c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      60:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      68:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      70:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      74:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      78:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      7c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      84:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      88:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      90:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      94:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__bad_interrupt>
      98:	f2 0d       	add	r31, r2
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      9a:	14 0e       	add	r1, r20

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	ff 0e       	add	r15, r31
      9e:	14 0e       	add	r1, r20
      a0:	ff 0e       	add	r15, r31
      a2:	56 0e       	add	r5, r22
      a4:	79 0e       	add	r7, r25
      a6:	ff 0e       	add	r15, r31
      a8:	ce 0e       	add	r12, r30

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      aa:	e1 0e       	add	r14, r17
      ac:	25 12       	cpse	r2, r21
      ae:	25 12       	cpse	r2, r21
      b0:	53 12       	cpse	r5, r19
      b2:	53 12       	cpse	r5, r19
      b4:	af 12       	cpse	r10, r31
      b6:	eb 12       	cpse	r14, r27
      b8:	dc 14       	cp	r13, r12
      ba:	dc 14       	cp	r13, r12
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      bc:	03 13       	cpse	r16, r19
      be:	dc 14       	cp	r13, r12
      c0:	fa 13       	cpse	r31, r26
      c2:	fa 13       	cpse	r31, r26
      c4:	b6 14       	cp	r11, r6
      c6:	dc 14       	cp	r13, r12
      c8:	dc 14       	cp	r13, r12
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      ca:	ca 14       	cp	r12, r10

000000cc <__trampolines_end>:
      cc:	f1 a6       	std	Z+41, r15	; 0x29

000000ce <keymaps>:
      ce:	4b 4e 24 25 26 4a 4d 50 4f 21 22 23 e7 38 29 4f     KN$%&JMPO!"#.8)O

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      de:	1e 1f 20 29 65 29 29 27 37 2a 1e 28                 .. )e))'7*.(

000000ea <__c.1891>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ea:	0a 00                                               ..

000000ec <__c.1889>:
      ec:	25 30 31 36 62 00                                   %016b.

000000f2 <__c.1887>:
      f2:	3a 20 00                                            : .

000000f5 <__c.1885>:
      f5:	25 30 32 58 00                                      %02X.

000000fa <__c.1882>:
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      fa:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10a:	42 43 44 45 46 0a 00                                BCDEF..

00000111 <__c.1860>:
     111:	0a 00                                               ..

00000113 <__c.1858>:
     113:	25 30 32 58 00                                      %02X.

00000118 <__c.1856>:
     118:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000122 <__c.4756>:
     122:	5b 73 5d 00                                         [s].

00000126 <__c.4754>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     136:	00                                                  .

00000137 <__c.4752>:
     137:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
				ReportSize     -= 4;
     147:	00                                                  .

00000148 <__c.4654>:
				ReportData     += 4;
     148:	5b 57 5d 00                                         [W].

0000014c <__c.4650>:
     14c:	5b 53 5d 00                                         [S].

00000150 <__c.4646>:
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	5b 52 5d 00                                         [R].

00000154 <__c.4641>:
     154:	5b 44 5d 00                                         [D].

00000158 <__c.4636>:
     158:	5b 43 5d 00                                         [C].

0000015c <ProductString>:
     15c:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

00000168 <ManufacturerString>:
				ReportSize     -= 2;
				ReportData     += 2;
     168:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     178:	6b 00 00 00                                         k...

0000017c <LanguageString>:
				ReportSize     -= 1;
     17c:	04 03 09 04                                         ....

00000180 <ConfigurationDescriptor>:
				ReportData     += 1;
     180:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     190:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     1a0:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1b0:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1c0:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     1d0:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     1e0:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     1f0:	03 20 00 01                                         . ..

000001f4 <DeviceDescriptor>:
     1f4:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     204:	00 01                                               ..

00000206 <ConsoleReport>:
				break;
     206:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     216:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000226 <ExtrakeyReport>:
     226:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     236:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     246:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     256:	10 95 01 81 00 c0                                   ......

0000025c <MouseReport>:
     25c:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     26c:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     27c:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     28c:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     29c:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000002a9 <KeyboardReport>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a9:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b9:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c9:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d9:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000002e8 <__c.1996>:

				if (ParserData->UsingReportIDs)
     2e8:	0a 00                                               ..

000002ea <__c.1991>:
     2ea:	25 30 32 58 20 00                                   %02X .

000002f0 <__c.1988>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f0:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     300:	20 00                                                .

00000302 <__c.2350>:
     302:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

0000030d <__c.2425>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     30d:	64 6f 6e 65 2e 0a 00                                done...

00000314 <__c.2419>:
     314:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     324:	2e 2e 2e 20 00                                      ... .

00000329 <__c.2069>:
     329:	29 0a 00                                            )..

0000032c <__c.2067>:
     32c:	25 75 00                                            %u.

0000032f <__c.2065>:
     32f:	2f 00                                               /.

00000331 <__c.2063>:
     331:	25 75 00                                            %u.

00000334 <__c.2061>:
     334:	5d 28 00                                            ](.

00000337 <__c.2059>:
     337:	25 64 00                                            %d.

0000033a <__c.2057>:
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     33a:	20 00                                                .

0000033c <__c.2055>:
     33c:	25 64 00                                            %d.

0000033f <__c.2053>:
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33f:	20 00                                                .

00000341 <__c.2051>:
     341:	25 64 00                                            %d.

00000344 <__c.2049>:
     344:	20 00                                                .

00000346 <__c.2047>:
     346:	25 64 00                                            %d.

00000349 <__c.2045>:
     349:	7c 00                                               |.

0000034b <__c.2043>:
     34b:	25 30 32 58 00                                      %02X.

00000350 <__c.2041>:
     350:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     360:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     370:	20 5b 00                                             [.

00000373 <__c.2784>:
     373:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     383:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000038e <__c.2781>:
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38e:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     39e:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000003a7 <__c.2778>:
     3a7:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b7:	20 25 64 0a 00                                       %d..

000003bc <__c.2775>:
     3bc:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3cc:	64 0a 00                                            d..

000003cf <__c.2772>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3cf:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3df:	0a 00                                               ..

000003e1 <__c.2768>:
     3e1:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000003f0 <__c.2761>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     400:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000040b <__c.2758>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     40b:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     41b:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000424 <__c.2755>:

				if (UsageListSize)
     424:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     434:	20 25 64 0a 00                                       %d..

00000439 <__c.2752>:
     439:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %

					for (uint8_t i = 1; i < UsageListSize; i++)
     449:	64 0a 00                                            d..

0000044c <__c.2749>:
					  UsageList[i - 1] = UsageList[i];
     44c:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

					UsageListSize--;
     45c:	0a 00                                               ..

0000045e <__c.2745>:
     45e:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000046d <__c.2738>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     46d:	0a 00                                               ..

0000046f <__c.2736>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46f:	25 75 00                                            %u.

00000472 <__c.2734>:
     472:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     482:	5f 6d 61 78 3a 20 00                                _max: .

00000489 <__c.2732>:
     489:	0a 00                                               ..

0000048b <__c.2730>:
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48b:	25 75 00                                            %u.

0000048e <__c.2728>:
     48e:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49e:	65 64 3a 20 00                                      ed: .

000004a3 <__c.2726>:
     4a3:	0a 00                                               ..

000004a5 <__c.2724>:
     4a5:	25 75 00                                            %u.

000004a8 <__c.2722>:
     4a8:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b8:	00                                                  .

000004b9 <__c.2720>:
     4b9:	0a 00                                               ..

000004bb <__c.2718>:
     4bb:	25 75 00                                            %u.

000004be <__c.2716>:
     4be:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000004cd <__c.2714>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4cd:	0a 00                                               ..

000004cf <__c.2712>:
     4cf:	25 75 00                                            %u.

000004d2 <__c.2710>:
     4d2:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     4e2:	20 00                                                .

000004e4 <__c.2708>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	0a 00                                               ..

000004e6 <__c.2706>:
     4e6:	25 75 00                                            %u.

000004e9 <__c.2704>:
     4e9:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f9:	20 00                                                .

000004fb <__c.2702>:
     4fb:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000509 <__c.2822>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     509:	4d 3e 00                                            M>.

0000050c <__c.2820>:
     50c:	4d 25 64 3e 20 00                                   M%d> .

00000512 <__c.2818>:
     512:	3f 00                                               ?.

00000514 <__c.2815>:
     514:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000521 <__c.2801>:
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     521:	43 3e 20 00                                         C> .

00000525 <__c.2791>:
     525:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     535:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d

						for (uint8_t i = 1; i < UsageListSize; i++)
     545:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     555:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     565:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000573 <__c.2789>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     573:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     583:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     593:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     5a3:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5b3:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5c3:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     5d3:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     5e3:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     5f3:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     603:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     613:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     623:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     633:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     643:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     653:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     663:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000066e <__c.2694>:
     66e:	3f 00                                               ?.

00000670 <__c.2691>:
     670:	4d 3e 20 00                                         M> .

00000674 <__c.2696>:
     674:	43 3e 20 00                                         C> .

00000678 <__c.2840>:
     678:	4c 25 64 0a 00                                      L%d..

0000067d <__c.2680>:
     67d:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
					  ParserData->TotalReportItems++;
     68d:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     69d:	73 65 6b 65 79 0a 00                                sekey..

000006a4 <__c.2512>:
		{
			UsageMinMax.Minimum = 0;
     6a4:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6b4:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c4:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d4:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
}
     6e4:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     6f4:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     704:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     714:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     724:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     734:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

00000741 <__c.2607>:
     741:	0a 00                                               ..

00000743 <__c.2605>:
     743:	25 75 00                                            %u.

00000746 <__c.2603>:
     746:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

0000074e <__c.2601>:
     74e:	0a 00                                               ..

00000750 <__c.2599>:
     750:	25 75 00                                            %u.

00000753 <__c.2597>:
     753:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     763:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

0000076f <__c.2595>:
     76f:	0a 00                                               ..

00000771 <__c.2593>:
     771:	25 75 00                                            %u.

00000774 <__c.2591>:
     774:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     784:	20 00                                                .

00000786 <__c.2589>:
     786:	0a 00                                               ..

00000788 <__c.2587>:
     788:	25 75 00                                            %u.

0000078b <__c.2585>:
     78b:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000795 <__c.2583>:
     795:	0a 00                                               ..

00000797 <__c.2581>:
     797:	25 75 00                                            %u.

0000079a <__c.2579>:
     79a:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     7aa:	20 00                                                .

000007ac <__c.2577>:
     7ac:	0a 00                                               ..

000007ae <__c.2575>:
     7ae:	25 75 00                                            %u.

000007b1 <__c.2573>:
     7b1:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     7c1:	20 00                                                .

000007c3 <__c.2571>:
     7c3:	0a 00                                               ..

000007c5 <__c.2569>:
     7c5:	25 75 00                                            %u.

000007c8 <__c.2567>:
     7c8:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     7d8:	74 72 6f 6c 3a 20 00                                trol: .

000007df <__c.2565>:
     7df:	0a 00                                               ..

000007e1 <__c.2563>:
     7e1:	25 75 00                                            %u.

000007e4 <__c.2561>:
     7e4:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     7f4:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

000007fd <__c.2559>:
     7fd:	0a 00                                               ..

000007ff <__c.2557>:
     7ff:	25 30 32 58 00                                      %02X.

00000804 <__c.2555>:
     804:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     814:	77 3a 20 00                                         w: .

00000818 <__c.2552>:
     818:	0a 00                                               ..

0000081a <__c.2550>:
     81a:	25 75 00                                            %u.

0000081d <__c.2548>:
     81d:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000826 <__c.2546>:
     826:	0a 00                                               ..

00000828 <__c.2544>:
     828:	25 75 00                                            %u.

0000082b <__c.2542>:
     82b:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000837 <__c.2540>:
     837:	0a 00                                               ..

00000839 <__c.2538>:
     839:	25 75 00                                            %u.

0000083c <__c.2536>:
     83c:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000846 <__c.2534>:
     846:	0a 00                                               ..

00000848 <__c.2532>:
     848:	25 75 00                                            %u.

0000084b <__c.2530>:
     84b:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000855 <__c.2528>:
     855:	0a 00                                               ..

00000857 <__c.2526>:
     857:	25 30 32 58 00                                      %02X.

0000085c <__c.2524>:
     85c:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     86c:	3a 20 00                                            : .

0000086f <__c.2521>:
     86f:	0a 00                                               ..

00000871 <__c.2519>:
     871:	25 75 00                                            %u.

00000874 <__c.2517>:
     874:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000884 <__c.2675>:
     884:	3f 00                                               ?.

00000886 <__c.2666>:
     886:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     896:	25 30 34 6c 58 0a 00                                %04lX..

0000089d <__c.2664>:
     89d:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     8ad:	58 0a 00                                            X..

000008b0 <__c.2662>:
     8b0:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     8c0:	6c 3a 20 25 58 0a 00                                l: %X..

000008c7 <__c.2660>:
     8c7:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     8d7:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000008e1 <__c.2658>:
     8e1:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000008ef <__c.2655>:
     8ef:	47 43 43 3a 20 34 2e 38 2e 32 20 41 56 52 2d 4c     GCC: 4.8.2 AVR-L
     8ff:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     90f:	52 5f 41 52 43 48 3a 20 61 76 72 35 31 0a 00        R_ARCH: avr51..

0000091e <__c.2653>:
     91e:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     92e:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     93e:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     94e:	45 20 43 4f 4d 4d 41 4e 44 20 34 30 39 36 0a 00     E COMMAND 4096..

0000095e <__c.2651>:
     95e:	42 55 49 4c 44 3a 20 37 35 38 35 34 38 37 2d 64     BUILD: 7585487-d
     96e:	69 72 74 79 20 28 32 33 3a 33 30 3a 31 34 20 4a     irty (23:30:14 J
     97e:	61 6e 20 32 38 20 32 30 31 37 29 0a 00              an 28 2017)..

0000098b <__c.2649>:
     98b:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     99b:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     9ab:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     9bb:	30 30 31 0a 00                                      001..

000009c0 <__c.2647>:
     9c0:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     9d0:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     9e0:	6f 72 20 47 48 36 30 0a 00                          or GH60..

000009e9 <__c.2645>:
     9e9:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000009f8 <__c.2642>:
     9f8:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a05 <__c.2640>:
     a05:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000a11 <__c.2637>:
     a11:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000a21 <__c.2635>:
     a21:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000a30 <__c.2632>:
     a30:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000a3e <__c.2630>:
     a3e:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000a4b <__c.2627>:
     a4b:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000a57 <__c.2625>:
     a57:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000a64 <__c.2622>:
     a64:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     a74:	00                                                  .

00000a75 <__c.2619>:
     a75:	43 3e 20 00                                         C> .

00000a79 <__c.2613>:
     a79:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000a84 <__ctors_end>:
     a84:	11 24       	eor	r1, r1
     a86:	1f be       	out	0x3f, r1	; 63
     a88:	cf ef       	ldi	r28, 0xFF	; 255
     a8a:	d0 e2       	ldi	r29, 0x20	; 32
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	cd bf       	out	0x3d, r28	; 61

00000a90 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     a90:	04 b6       	in	r0, 0x34	; 52
     a92:	03 fe       	sbrs	r0, 3
     a94:	24 c0       	rjmp	.+72     	; 0xade <__do_copy_data>
     a96:	80 91 be 01 	lds	r24, 0x01BE
     a9a:	90 91 bf 01 	lds	r25, 0x01BF
     a9e:	a0 91 c0 01 	lds	r26, 0x01C0
     aa2:	b0 91 c1 01 	lds	r27, 0x01C1
     aa6:	87 30       	cpi	r24, 0x07	; 7
     aa8:	90 4b       	sbci	r25, 0xB0	; 176
     aaa:	a7 40       	sbci	r26, 0x07	; 7
     aac:	b0 4b       	sbci	r27, 0xB0	; 176
     aae:	b9 f4       	brne	.+46     	; 0xade <__do_copy_data>
        reset_key = 0;
     ab0:	10 92 be 01 	sts	0x01BE, r1
     ab4:	10 92 bf 01 	sts	0x01BF, r1
     ab8:	10 92 c0 01 	sts	0x01C0, r1
     abc:	10 92 c1 01 	sts	0x01C1, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     ac0:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     ac2:	84 b7       	in	r24, 0x34	; 52
     ac4:	87 7f       	andi	r24, 0xF7	; 247
     ac6:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     ac8:	88 e1       	ldi	r24, 0x18	; 24
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	80 93 60 00 	sts	0x0060, r24
     ad2:	10 92 60 00 	sts	0x0060, r1
     ad6:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     ad8:	e0 e0       	ldi	r30, 0x00	; 0
     ada:	f8 ef       	ldi	r31, 0xF8	; 248
     adc:	09 95       	icall

00000ade <__do_copy_data>:
     ade:	11 e0       	ldi	r17, 0x01	; 1
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b1 e0       	ldi	r27, 0x01	; 1
     ae4:	ee ef       	ldi	r30, 0xFE	; 254
     ae6:	f0 e5       	ldi	r31, 0x50	; 80
     ae8:	00 e0       	ldi	r16, 0x00	; 0
     aea:	0b bf       	out	0x3b, r16	; 59
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__do_copy_data+0x14>
     aee:	07 90       	elpm	r0, Z+
     af0:	0d 92       	st	X+, r0
     af2:	a2 33       	cpi	r26, 0x32	; 50
     af4:	b1 07       	cpc	r27, r17
     af6:	d9 f7       	brne	.-10     	; 0xaee <__do_copy_data+0x10>

00000af8 <__do_clear_bss>:
     af8:	11 e0       	ldi	r17, 0x01	; 1
     afa:	a2 e3       	ldi	r26, 0x32	; 50
     afc:	b1 e0       	ldi	r27, 0x01	; 1
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <.do_clear_bss_start>

00000b00 <.do_clear_bss_loop>:
     b00:	1d 92       	st	X+, r1

00000b02 <.do_clear_bss_start>:
     b02:	ae 3b       	cpi	r26, 0xBE	; 190
     b04:	b1 07       	cpc	r27, r17
     b06:	e1 f7       	brne	.-8      	; 0xb00 <.do_clear_bss_loop>
     b08:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <main>
     b0c:	0c 94 7d 28 	jmp	0x50fa	; 0x50fa <_exit>

00000b10 <__bad_interrupt>:
     b10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b14 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     b14:	ff 93       	push	r31
	push	ZL
     b16:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     b18:	e0 91 32 01 	lds	r30, 0x0132
	lds	ZH, xfunc_out+1	;/
     b1c:	f0 91 33 01 	lds	r31, 0x0133
	sbiw	ZL, 0		;Skip if null
     b20:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     b22:	09 f0       	breq	.+2      	; 0xb26 <xputc+0x12>
	icall
     b24:	09 95       	icall
2:	pop	ZL
     b26:	ef 91       	pop	r30
	pop	ZH
     b28:	ff 91       	pop	r31
	ret
     b2a:	08 95       	ret

00000b2c <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     b2c:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     b2e:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     b30:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     b32:	11 f0       	breq	.+4      	; 0xb38 <xputs+0xc>
	rcall	xputc
     b34:	ef df       	rcall	.-34     	; 0xb14 <xputc>
	rjmp	1b
     b36:	fb cf       	rjmp	.-10     	; 0xb2e <xputs+0x2>
2:	ret
     b38:	08 95       	ret

00000b3a <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     b3a:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     b3c:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     b3e:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     b40:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     b42:	0c c0       	rjmp	.+24     	; 0xb5c <xitoa+0x22>
	neg	r20		;
     b44:	41 95       	neg	r20
	sbrs	r25, 7		;
     b46:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <xitoa+0x22>
	ldi	r30, '-'	;
     b4a:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     b4c:	60 95       	com	r22
	com	r23		;
     b4e:	70 95       	com	r23
	com	r24		;
     b50:	80 95       	com	r24
	com	r25		;
     b52:	90 95       	com	r25
	adc	r22, r1		;
     b54:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     b56:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     b58:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     b5a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     b5c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <xitoa+0x2a>
	neg	r18		;
     b60:	21 95       	neg	r18
	ldi	r19, '0'	;/
     b62:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     b64:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     b66:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     b68:	66 0f       	add	r22, r22
	rol	r23		;
     b6a:	77 1f       	adc	r23, r23
	rol	r24		;
     b6c:	88 1f       	adc	r24, r24
	rol	r25		;
     b6e:	99 1f       	adc	r25, r25
	rol	r26		;
     b70:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     b72:	a4 17       	cp	r26, r20
	brcs	3f		;
     b74:	10 f0       	brcs	.+4      	; 0xb7a <xitoa+0x40>
	sub	r26, r20	;
     b76:	a4 1b       	sub	r26, r20
	inc	r22		;
     b78:	63 95       	inc	r22
3:	dec	r21		;
     b7a:	5a 95       	dec	r21
	brne	2b		;/
     b7c:	a9 f7       	brne	.-22     	; 0xb68 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     b7e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     b80:	08 f0       	brcs	.+2      	; 0xb84 <xitoa+0x4a>
	subi	r26, -7		;
     b82:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     b84:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     b86:	af 93       	push	r26
	inc	r31		;/
     b88:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     b8a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     b8c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     b8e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     b90:	91 05       	cpc	r25, r1
	brne	1b		;/
     b92:	41 f7       	brne	.-48     	; 0xb64 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     b94:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     b96:	11 f4       	brne	.+4      	; 0xb9c <xitoa+0x62>
	push	r30		;
     b98:	ef 93       	push	r30
	inc	r31		;/
     b9a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     b9c:	f2 17       	cp	r31, r18
	brcc	6f		;
     b9e:	18 f4       	brcc	.+6      	; 0xba6 <xitoa+0x6c>
	push	r19		;
     ba0:	3f 93       	push	r19
	inc	r31		;
     ba2:	f3 95       	inc	r31
	rjmp	5b		;/
     ba4:	fb cf       	rjmp	.-10     	; 0xb9c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     ba6:	8f 91       	pop	r24
	rcall	xputc		;
     ba8:	b5 df       	rcall	.-150    	; 0xb14 <xputc>
	dec	r31		;
     baa:	fa 95       	dec	r31
	brne	6b		;/
     bac:	e1 f7       	brne	.-8      	; 0xba6 <xitoa+0x6c>

	ret
     bae:	08 95       	ret

00000bb0 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     bb0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     bb2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     bb4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     bb6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     bb8:	21 f0       	breq	.+8      	; 0xbc2 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     bba:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     bbc:	19 f0       	breq	.+6      	; 0xbc4 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     bbe:	aa df       	rcall	.-172    	; 0xb14 <xputc>
	rjmp	0b		;/
     bc0:	f9 cf       	rjmp	.-14     	; 0xbb4 <xvprintf+0x4>
90:	ret
     bc2:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     bc4:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     bc6:	e8 94       	clt
	_LPMI	r21		;Get flags
     bc8:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     bca:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     bcc:	c1 f3       	breq	.-16     	; 0xbbe <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     bce:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <xvprintf+0x26>
	set			;/
     bd2:	68 94       	set
22:	_LPMI	r21		;Get width
     bd4:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     bd6:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     bd8:	48 f4       	brcc	.+18     	; 0xbec <xvprintf+0x3c>
	subi	r21, '0'	;
     bda:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     bdc:	90 f3       	brcs	.-28     	; 0xbc2 <xvprintf+0x12>
	lsl	r18		;
     bde:	22 0f       	add	r18, r18
	mov	r0, r18		;
     be0:	02 2e       	mov	r0, r18
	lsl	r18		;
     be2:	22 0f       	add	r18, r18
	lsl	r18		;
     be4:	22 0f       	add	r18, r18
	add	r18, r0		;
     be6:	20 0d       	add	r18, r0
	add	r18, r21	;
     be8:	25 0f       	add	r18, r21
	rjmp	22b		;/
     bea:	f4 cf       	rjmp	.-24     	; 0xbd4 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     bec:	0e f4       	brtc	.+2      	; 0xbf0 <xvprintf+0x40>
	neg	r18		;
     bee:	21 95       	neg	r18
25:	ld	r24, Y+		;
     bf0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     bf2:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     bf4:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     bf6:	19 f3       	breq	.-58     	; 0xbbe <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     bf8:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     bfa:	29 f1       	breq	.+74     	; 0xc46 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     bfc:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     bfe:	59 f1       	breq	.+86     	; 0xc56 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     c00:	bc 01       	movw	r22, r24
	clr	r24		;
     c02:	88 27       	eor	r24, r24
	clr	r25		;
     c04:	99 27       	eor	r25, r25
	clt			;/
     c06:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     c08:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     c0a:	21 f4       	brne	.+8      	; 0xc14 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     c0c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     c0e:	99 91       	ld	r25, Y+
	set			;
     c10:	68 94       	set
	_LPMI	r21		;/
     c12:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     c14:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     c16:	39 f4       	brne	.+14     	; 0xc26 <xvprintf+0x76>
	ldi	r20, -10	;
     c18:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     c1a:	7e f0       	brts	.+30     	; 0xc3a <xvprintf+0x8a>
	sbrs	r23, 7		;
     c1c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     c1e:	0d c0       	rjmp	.+26     	; 0xc3a <xvprintf+0x8a>
	ldi	r24, -1		;
     c20:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     c22:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     c24:	0a c0       	rjmp	.+20     	; 0xc3a <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     c26:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     c28:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     c2a:	39 f0       	breq	.+14     	; 0xc3a <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     c2c:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     c2e:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     c30:	21 f0       	breq	.+8      	; 0xc3a <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     c32:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     c34:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     c36:	09 f0       	breq	.+2      	; 0xc3a <xvprintf+0x8a>
	ret			;abort
     c38:	08 95       	ret
40:	push	ZH		;Output the value
     c3a:	ff 93       	push	r31
	push	ZL		;
     c3c:	ef 93       	push	r30
	rcall	xitoa		;
     c3e:	7d df       	rcall	.-262    	; 0xb3a <xitoa>
42:	pop	ZL		;
     c40:	ef 91       	pop	r30
	pop	ZH		;
     c42:	ff 91       	pop	r31
	rjmp	0b		;/
     c44:	b7 cf       	rjmp	.-146    	; 0xbb4 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     c46:	ff 93       	push	r31
	push	ZL
     c48:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     c4a:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     c4c:	81 91       	ld	r24, Z+
	cpi	r24, 0
     c4e:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     c50:	b9 f3       	breq	.-18     	; 0xc40 <xvprintf+0x90>
	rcall	xputc
     c52:	60 df       	rcall	.-320    	; 0xb14 <xputc>
	rjmp	51b
     c54:	fb cf       	rjmp	.-10     	; 0xc4c <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     c56:	ff 93       	push	r31
	push	ZL
     c58:	ef 93       	push	r30
	rcall	xputs
     c5a:	68 df       	rcall	.-304    	; 0xb2c <xputs>
	rjmp	42b
     c5c:	f1 cf       	rjmp	.-30     	; 0xc40 <xvprintf+0x90>

00000c5e <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     c5e:	df 93       	push	r29
	push	YL
     c60:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     c62:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     c64:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     c66:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     c68:	a3 df       	rcall	.-186    	; 0xbb0 <xvprintf>
	pop	YL
     c6a:	cf 91       	pop	r28
	pop	YH
     c6c:	df 91       	pop	r29
	ret
     c6e:	08 95       	ret

00000c70 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     c70:	97 e0       	ldi	r25, 0x07	; 7
     c72:	79 9f       	mul	r23, r25
     c74:	f0 01       	movw	r30, r0
     c76:	11 24       	eor	r1, r1
     c78:	9c e1       	ldi	r25, 0x1C	; 28
     c7a:	89 9f       	mul	r24, r25
     c7c:	e0 0d       	add	r30, r0
     c7e:	f1 1d       	adc	r31, r1
     c80:	11 24       	eor	r1, r1
     c82:	e6 0f       	add	r30, r22
     c84:	f1 1d       	adc	r31, r1
     c86:	e2 53       	subi	r30, 0x32	; 50
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	84 91       	lpm	r24, Z
}
     c8c:	08 95       	ret

00000c8e <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     c8e:	e8 2f       	mov	r30, r24
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	e4 5b       	subi	r30, 0xB4	; 180
     c98:	f0 40       	sbci	r31, 0x00	; 0
}
     c9a:	85 91       	lpm	r24, Z+
     c9c:	94 91       	lpm	r25, Z
     c9e:	08 95       	ret

00000ca0 <unselect_rows>:
 * pin: D0  D1  D2  D3  D5
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b00011110;
     ca0:	8a b1       	in	r24, 0x0a	; 10
     ca2:	81 7e       	andi	r24, 0xE1	; 225
     ca4:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00011110;
     ca6:	8b b1       	in	r24, 0x0b	; 11
     ca8:	81 7e       	andi	r24, 0xE1	; 225
     caa:	8b b9       	out	0x0b, r24	; 11
     cac:	08 95       	ret

00000cae <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     cae:	0e 94 50 06 	call	0xca0	; 0xca0 <unselect_rows>
 * pin:                                 B7                      (Rev.B)
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRB  &= ~(1<< 7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1);
     cb2:	84 b1       	in	r24, 0x04	; 4
     cb4:	81 70       	andi	r24, 0x01	; 1
     cb6:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<< 7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1);
     cb8:	85 b1       	in	r24, 0x05	; 5
     cba:	8e 6f       	ori	r24, 0xFE	; 254
     cbc:	85 b9       	out	0x05, r24	; 5
    DDRB  &= ~(1<< 7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2);
     cbe:	84 b1       	in	r24, 0x04	; 4
     cc0:	83 70       	andi	r24, 0x03	; 3
     cc2:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<< 7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2);
     cc4:	85 b1       	in	r24, 0x05	; 5
     cc6:	8c 6f       	ori	r24, 0xFC	; 252
     cc8:	85 b9       	out	0x05, r24	; 5
    DDRB  &= ~(1<< 7 | 1<<6 | 1<<5 | 1<<4 | 1<<3);
     cca:	84 b1       	in	r24, 0x04	; 4
     ccc:	87 70       	andi	r24, 0x07	; 7
     cce:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<< 7 | 1<<6 | 1<<5 | 1<<4 | 1<<3);    
     cd0:	85 b1       	in	r24, 0x05	; 5
     cd2:	88 6f       	ori	r24, 0xF8	; 248
     cd4:	85 b9       	out	0x05, r24	; 5
    DDRB  &= ~(1<< 7 | 1<<6 | 1<<5 | 1<<4);
     cd6:	84 b1       	in	r24, 0x04	; 4
     cd8:	8f 70       	andi	r24, 0x0F	; 15
     cda:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<< 7 | 1<<6 | 1<<5 | 1<<4); 
     cdc:	85 b1       	in	r24, 0x05	; 5
     cde:	80 6f       	ori	r24, 0xF0	; 240
     ce0:	85 b9       	out	0x05, r24	; 5
    DDRB  &= ~(1<< 7 | 1<<6 | 1<<5);
     ce2:	84 b1       	in	r24, 0x04	; 4
     ce4:	8f 71       	andi	r24, 0x1F	; 31
     ce6:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<< 7 | 1<<6 | 1<<5);        
     ce8:	85 b1       	in	r24, 0x05	; 5
     cea:	80 6e       	ori	r24, 0xE0	; 224
     cec:	85 b9       	out	0x05, r24	; 5
    DDRB  &= ~(1<< 7 | 1<<6);
     cee:	84 b1       	in	r24, 0x04	; 4
     cf0:	8f 73       	andi	r24, 0x3F	; 63
     cf2:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<< 7 | 1<<6);            
     cf4:	85 b1       	in	r24, 0x05	; 5
     cf6:	80 6c       	ori	r24, 0xC0	; 192
     cf8:	85 b9       	out	0x05, r24	; 5
    DDRB  &= ~(1<< 7);
     cfa:	27 98       	cbi	0x04, 7	; 4
    PORTB |=  (1<< 7);                
     cfc:	2f 9a       	sbi	0x05, 7	; 5
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     cfe:	10 92 38 01 	sts	0x0138, r1
        matrix_debouncing[i] = 0;
     d02:	10 92 34 01 	sts	0x0134, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     d06:	10 92 39 01 	sts	0x0139, r1
        matrix_debouncing[i] = 0;
     d0a:	10 92 35 01 	sts	0x0135, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     d0e:	10 92 3a 01 	sts	0x013A, r1
        matrix_debouncing[i] = 0;
     d12:	10 92 36 01 	sts	0x0136, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     d16:	10 92 3b 01 	sts	0x013B, r1
        matrix_debouncing[i] = 0;
     d1a:	10 92 37 01 	sts	0x0137, r1
     d1e:	08 95       	ret

00000d20 <matrix_scan>:
    }
}

uint8_t matrix_scan(void)
{
     d20:	df 92       	push	r13
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	c4 e3       	ldi	r28, 0x34	; 52
     d30:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     d32:	f1 2c       	mov	r15, r1
    PORTB |=  (1<< 7);                
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<1) ? 0 : (1<<0)) |
     d34:	ee 24       	eor	r14, r14
     d36:	e3 94       	inc	r14
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	d8 2e       	mov	r13, r24
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     d3c:	03 e1       	ldi	r16, 0x13	; 19
     d3e:	11 e0       	ldi	r17, 0x01	; 1
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	f8 16       	cp	r15, r24
     d44:	61 f0       	breq	.+24     	; 0xd5e <matrix_scan+0x3e>
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	f9 16       	cp	r15, r25
     d4a:	61 f0       	breq	.+24     	; 0xd64 <matrix_scan+0x44>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	f8 16       	cp	r15, r24
     d50:	19 f0       	breq	.+6      	; 0xd58 <matrix_scan+0x38>
        case 0:
            DDRD  |= (1<<1);
     d52:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
     d54:	59 98       	cbi	0x0b, 1	; 11
     d56:	08 c0       	rjmp	.+16     	; 0xd68 <matrix_scan+0x48>
            break;
        case 1:
            DDRD  |= (1<<2);
     d58:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
     d5a:	5a 98       	cbi	0x0b, 2	; 11
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <matrix_scan+0x48>
            break;
        case 2:
            DDRD  |= (1<<3);
     d5e:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
     d60:	5b 98       	cbi	0x0b, 3	; 11
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <matrix_scan+0x48>
            break;	    
        case 3:
            DDRD  |= (1<<4);
     d64:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
     d66:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d68:	90 ea       	ldi	r25, 0xA0	; 160
     d6a:	9a 95       	dec	r25
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <matrix_scan+0x4a>
    PORTB |=  (1<< 7);                
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<1) ? 0 : (1<<0)) |
     d6e:	83 b1       	in	r24, 0x03	; 3
     d70:	86 95       	lsr	r24
     d72:	81 70       	andi	r24, 0x01	; 1
     d74:	8e 25       	eor	r24, r14
     d76:	1a 9b       	sbis	0x03, 2	; 3
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <matrix_scan+0x5e>
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <matrix_scan+0x60>
     d7e:	42 e0       	ldi	r20, 0x02	; 2
     d80:	84 2b       	or	r24, r20
     d82:	1b 9b       	sbis	0x03, 3	; 3
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <matrix_scan+0x6a>
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <matrix_scan+0x6c>
     d8a:	44 e0       	ldi	r20, 0x04	; 4
     d8c:	48 2b       	or	r20, r24
     d8e:	1c 9b       	sbis	0x03, 4	; 3
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <matrix_scan+0x76>
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <matrix_scan+0x78>
     d96:	38 e0       	ldi	r19, 0x08	; 8
     d98:	94 2f       	mov	r25, r20
     d9a:	93 2b       	or	r25, r19
     d9c:	1d 9b       	sbis	0x03, 5	; 3
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <matrix_scan+0x84>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <matrix_scan+0x86>
     da4:	20 e1       	ldi	r18, 0x10	; 16
     da6:	92 2b       	or	r25, r18
     da8:	1e 9b       	sbis	0x03, 6	; 3
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <matrix_scan+0x90>
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <matrix_scan+0x92>
     db0:	20 e2       	ldi	r18, 0x20	; 32
     db2:	92 2b       	or	r25, r18
           (PINB&(1<<2) ? 0 : (1<<1)) |
           (PINB&(1<<3) ? 0 : (1<<2)) |
           (PINB&(1<<4) ? 0 : (1<<3)) |	   
           (PINB&(1<<5) ? 0 : (1<<4)) |	   
           (PINB&(1<<6) ? 0 : (1<<5)) |	   	   
	   (PINB&(1<<7) ? 0 : (1<<6));
     db4:	83 b1       	in	r24, 0x03	; 3
    PORTB |=  (1<< 7);                
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<1) ? 0 : (1<<0)) |
     db6:	80 95       	com	r24
     db8:	88 1f       	adc	r24, r24
     dba:	88 27       	eor	r24, r24
     dbc:	88 1f       	adc	r24, r24
     dbe:	82 95       	swap	r24
     dc0:	88 0f       	add	r24, r24
     dc2:	88 0f       	add	r24, r24
     dc4:	80 7c       	andi	r24, 0xC0	; 192
     dc6:	98 2b       	or	r25, r24
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     dc8:	88 81       	ld	r24, Y
     dca:	89 17       	cp	r24, r25
     dcc:	39 f1       	breq	.+78     	; 0xe1c <matrix_scan+0xfc>
            matrix_debouncing[i] = cols;
     dce:	98 83       	st	Y, r25
            if (debouncing) {
     dd0:	80 91 00 01 	lds	r24, 0x0100
     dd4:	88 23       	and	r24, r24
     dd6:	01 f1       	breq	.+64     	; 0xe18 <matrix_scan+0xf8>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     dd8:	80 91 9f 01 	lds	r24, 0x019F
     ddc:	80 ff       	sbrs	r24, 0
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <matrix_scan+0xc8>
     de0:	88 e1       	ldi	r24, 0x18	; 24
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
     de8:	80 91 9f 01 	lds	r24, 0x019F
     dec:	80 ff       	sbrs	r24, 0
     dee:	0c c0       	rjmp	.+24     	; 0xe08 <matrix_scan+0xe8>
     df0:	80 91 00 01 	lds	r24, 0x0100
     df4:	1f 92       	push	r1
     df6:	8f 93       	push	r24
     df8:	1f 93       	push	r17
     dfa:	0f 93       	push	r16
     dfc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	80 91 9f 01 	lds	r24, 0x019F
     e0c:	80 ff       	sbrs	r24, 0
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <matrix_scan+0xf8>
     e10:	81 e1       	ldi	r24, 0x11	; 17
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            }
            debouncing = DEBOUNCE;
     e18:	d0 92 00 01 	sts	0x0100, r13
        }
        unselect_rows();
     e1c:	0e 94 50 06 	call	0xca0	; 0xca0 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     e20:	f3 94       	inc	r15
     e22:	21 96       	adiw	r28, 0x01	; 1
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	f8 12       	cpse	r15, r24
     e28:	8b cf       	rjmp	.-234    	; 0xd40 <matrix_scan+0x20>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     e2a:	80 91 00 01 	lds	r24, 0x0100
     e2e:	88 23       	and	r24, r24
     e30:	e1 f0       	breq	.+56     	; 0xe6a <matrix_scan+0x14a>
        if (--debouncing) {
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	80 93 00 01 	sts	0x0100, r24
     e38:	88 23       	and	r24, r24
     e3a:	39 f0       	breq	.+14     	; 0xe4a <matrix_scan+0x12a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e3c:	8f e9       	ldi	r24, 0x9F	; 159
     e3e:	9f e0       	ldi	r25, 0x0F	; 15
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <matrix_scan+0x120>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <matrix_scan+0x126>
     e46:	00 00       	nop
     e48:	10 c0       	rjmp	.+32     	; 0xe6a <matrix_scan+0x14a>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     e4a:	80 91 34 01 	lds	r24, 0x0134
     e4e:	80 93 38 01 	sts	0x0138, r24
     e52:	80 91 35 01 	lds	r24, 0x0135
     e56:	80 93 39 01 	sts	0x0139, r24
     e5a:	80 91 36 01 	lds	r24, 0x0136
     e5e:	80 93 3a 01 	sts	0x013A, r24
     e62:	80 91 37 01 	lds	r24, 0x0137
     e66:	80 93 3b 01 	sts	0x013B, r24
            }
        }
    }

    return 1;
}
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	08 95       	ret

00000e7c <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     e7c:	e8 2f       	mov	r30, r24
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	e8 5c       	subi	r30, 0xC8	; 200
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
}
     e84:	80 81       	ld	r24, Z
     e86:	08 95       	ret

00000e88 <matrix_print>:

void matrix_print(void)
{
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
     e98:	8a ef       	ldi	r24, 0xFA	; 250
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
     ea0:	98 e3       	ldi	r25, 0x38	; 56
     ea2:	e9 2e       	mov	r14, r25
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	f9 2e       	mov	r15, r25
     ea8:	c0 e0       	ldi	r28, 0x00	; 0
     eaa:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     eac:	25 ef       	ldi	r18, 0xF5	; 245
     eae:	c2 2e       	mov	r12, r18
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	d2 2e       	mov	r13, r18
        pbin_reverse16(matrix_get_row(row));
     eb4:	0c ee       	ldi	r16, 0xEC	; 236
     eb6:	10 e0       	ldi	r17, 0x00	; 0

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	df 92       	push	r13
     ebe:	cf 92       	push	r12
     ec0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
     ec4:	82 ef       	ldi	r24, 0xF2	; 242
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     ecc:	f7 01       	movw	r30, r14
     ece:	81 91       	ld	r24, Z+
     ed0:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 19 1b 	call	0x3632	; 0x3632 <bitrev16>
     ed8:	9f 93       	push	r25
     eda:	8f 93       	push	r24
     edc:	1f 93       	push	r17
     ede:	0f 93       	push	r16
     ee0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
        print("\n");
     ee4:	8a ee       	ldi	r24, 0xEA	; 234
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
     eec:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     eee:	8d b7       	in	r24, 0x3d	; 61
     ef0:	9e b7       	in	r25, 0x3e	; 62
     ef2:	08 96       	adiw	r24, 0x08	; 8
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	9e bf       	out	0x3e, r25	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	8d bf       	out	0x3d, r24	; 61
     efe:	c4 30       	cpi	r28, 0x04	; 4
     f00:	d1 05       	cpc	r29, r1
     f02:	d1 f6       	brne	.-76     	; 0xeb8 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	08 95       	ret

00000f16 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     f16:	81 ff       	sbrs	r24, 1
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <led_set+0x8>
        // output low
        DDRC |= (1<<2);
     f1a:	3a 9a       	sbi	0x07, 2	; 7
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <led_set+0xa>
        PORTC &= ~(1<<2);
    } else {
        // Hi-Z
        DDRC &= ~(1<<2);
     f1e:	3a 98       	cbi	0x07, 2	; 7
        PORTC &= ~(1<<2);
     f20:	42 98       	cbi	0x08, 2	; 8
     f22:	08 95       	ret

00000f24 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     f24:	80 91 47 01 	lds	r24, 0x0147
     f28:	08 95       	ret

00000f2a <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
     f2a:	9f b7       	in	r25, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	10 92 3e 01 	sts	0x013E, r1
     f32:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f34:	90 91 b4 01 	lds	r25, 0x01B4
     f38:	94 30       	cpi	r25, 0x04	; 4
     f3a:	09 f0       	breq	.+2      	; 0xf3e <sendchar+0x14>
     f3c:	58 c0       	rjmp	.+176    	; 0xfee <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f3e:	90 91 e9 00 	lds	r25, 0x00E9
     f42:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f44:	20 91 ec 00 	lds	r18, 0x00EC
     f48:	20 ff       	sbrs	r18, 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <sendchar+0x26>
     f4c:	20 e8       	ldi	r18, 0x80	; 128
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <sendchar+0x28>
     f50:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f52:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     f5a:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     f5e:	90 ff       	sbrs	r25, 0
     f60:	43 c0       	rjmp	.+134    	; 0xfe8 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     f62:	90 91 ee 00 	lds	r25, 0x00EE
     f66:	97 ff       	sbrs	r25, 7
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     f6a:	90 91 3c 01 	lds	r25, 0x013C
     f6e:	99 23       	and	r25, r25
     f70:	21 f0       	breq	.+8      	; 0xf7a <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f72:	90 91 e8 00 	lds	r25, 0x00E8
     f76:	95 ff       	sbrs	r25, 5
     f78:	37 c0       	rjmp	.+110    	; 0xfe8 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
     f7a:	10 92 3c 01 	sts	0x013C, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
     f7e:	96 e0       	ldi	r25, 0x06	; 6
     f80:	30 91 e8 00 	lds	r19, 0x00E8
     f84:	35 fd       	sbrc	r19, 5
     f86:	15 c0       	rjmp	.+42     	; 0xfb2 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
     f88:	30 91 b4 01 	lds	r19, 0x01B4
     f8c:	34 30       	cpi	r19, 0x04	; 4
     f8e:	61 f5       	brne	.+88     	; 0xfe8 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f90:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
     f94:	35 fd       	sbrc	r19, 5
     f96:	28 c0       	rjmp	.+80     	; 0xfe8 <sendchar+0xbe>
     f98:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
     f9a:	21 f4       	brne	.+8      	; 0xfa4 <sendchar+0x7a>
            timeouted = true;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 3c 01 	sts	0x013C, r24
            goto ERROR_EXIT;
     fa2:	22 c0       	rjmp	.+68     	; 0xfe8 <sendchar+0xbe>
     fa4:	ef e9       	ldi	r30, 0x9F	; 159
     fa6:	ff e0       	ldi	r31, 0x0F	; 15
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <sendchar+0x7e>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <sendchar+0x84>
     fae:	00 00       	nop
     fb0:	e7 cf       	rjmp	.-50     	; 0xf80 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fb2:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fb6:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
     fba:	85 fd       	sbrc	r24, 5
     fbc:	0a c0       	rjmp	.+20     	; 0xfd2 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fbe:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
     fc2:	80 ff       	sbrs	r24, 0
     fc4:	fc cf       	rjmp	.-8      	; 0xfbe <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fc6:	80 91 e8 00 	lds	r24, 0x00E8
     fca:	8e 77       	andi	r24, 0x7E	; 126
     fcc:	80 93 e8 00 	sts	0x00E8, r24
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
     fd2:	8f b7       	in	r24, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	90 93 3e 01 	sts	0x013E, r25
     fdc:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fde:	2f 70       	andi	r18, 0x0F	; 15
     fe0:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	08 95       	ret
     fe8:	2f 70       	andi	r18, 0x0F	; 15
     fea:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
     fee:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
     ff0:	08 95       	ret

00000ff2 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <send_consumer+0x6>
     ff8:	1f 92       	push	r1
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     ffe:	20 91 b4 01 	lds	r18, 0x01B4
    1002:	24 30       	cpi	r18, 0x04	; 4
    1004:	19 f5       	brne	.+70     	; 0x104c <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1006:	23 e0       	ldi	r18, 0x03	; 3
    1008:	29 83       	std	Y+1, r18	; 0x01
    100a:	9b 83       	std	Y+3, r25	; 0x03
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	20 93 e9 00 	sts	0x00E9, r18
    1012:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1014:	90 91 e8 00 	lds	r25, 0x00E8
    1018:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    101a:	95 fd       	sbrc	r25, 5
    101c:	06 c0       	rjmp	.+12     	; 0x102a <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101e:	95 ed       	ldi	r25, 0xD5	; 213
    1020:	9a 95       	dec	r25
    1022:	f1 f7       	brne	.-4      	; 0x1020 <send_consumer+0x2e>
    1024:	00 00       	nop
    1026:	81 11       	cpse	r24, r1
    1028:	f5 cf       	rjmp	.-22     	; 0x1014 <send_consumer+0x22>
    102a:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    102e:	85 ff       	sbrs	r24, 5
    1030:	0d c0       	rjmp	.+26     	; 0x104c <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	63 e0       	ldi	r22, 0x03	; 3
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	ce 01       	movw	r24, r28
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1042:	80 91 e8 00 	lds	r24, 0x00E8
    1046:	8e 77       	andi	r24, 0x7E	; 126
    1048:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	00 d0       	rcall	.+0      	; 0x105e <send_system+0x6>
    105e:	1f 92       	push	r1
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1064:	20 91 b4 01 	lds	r18, 0x01B4
    1068:	24 30       	cpi	r18, 0x04	; 4
    106a:	21 f5       	brne	.+72     	; 0x10b4 <send_system+0x5c>
        return;

    report_extra_t r = {
    106c:	22 e0       	ldi	r18, 0x02	; 2
    106e:	29 83       	std	Y+1, r18	; 0x01
    1070:	9b 83       	std	Y+3, r25	; 0x03
    1072:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1074:	83 e0       	ldi	r24, 0x03	; 3
    1076:	80 93 e9 00 	sts	0x00E9, r24
    107a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    107c:	90 91 e8 00 	lds	r25, 0x00E8
    1080:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1082:	95 fd       	sbrc	r25, 5
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <send_system+0x3a>
    1086:	95 ed       	ldi	r25, 0xD5	; 213
    1088:	9a 95       	dec	r25
    108a:	f1 f7       	brne	.-4      	; 0x1088 <send_system+0x30>
    108c:	00 00       	nop
    108e:	81 11       	cpse	r24, r1
    1090:	f5 cf       	rjmp	.-22     	; 0x107c <send_system+0x24>
    1092:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1096:	85 ff       	sbrs	r24, 5
    1098:	0d c0       	rjmp	.+26     	; 0x10b4 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	63 e0       	ldi	r22, 0x03	; 3
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	ce 01       	movw	r24, r28
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10aa:	80 91 e8 00 	lds	r24, 0x00E8
    10ae:	8e 77       	andi	r24, 0x7E	; 126
    10b0:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    10c0:	20 91 b4 01 	lds	r18, 0x01B4
    10c4:	24 30       	cpi	r18, 0x04	; 4
    10c6:	f1 f4       	brne	.+60     	; 0x1104 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10c8:	22 e0       	ldi	r18, 0x02	; 2
    10ca:	20 93 e9 00 	sts	0x00E9, r18
    10ce:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10d0:	30 91 e8 00 	lds	r19, 0x00E8
    10d4:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    10d6:	35 fd       	sbrc	r19, 5
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <send_mouse+0x26>
    10da:	35 ed       	ldi	r19, 0xD5	; 213
    10dc:	3a 95       	dec	r19
    10de:	f1 f7       	brne	.-4      	; 0x10dc <send_mouse+0x1c>
    10e0:	00 00       	nop
    10e2:	21 11       	cpse	r18, r1
    10e4:	f5 cf       	rjmp	.-22     	; 0x10d0 <send_mouse+0x10>
    10e6:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    10ea:	25 ff       	sbrs	r18, 5
    10ec:	0b c0       	rjmp	.+22     	; 0x1104 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	65 e0       	ldi	r22, 0x05	; 5
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10fa:	80 91 e8 00 	lds	r24, 0x00E8
    10fe:	8e 77       	andi	r24, 0x7E	; 126
    1100:	80 93 e8 00 	sts	0x00E8, r24
    1104:	08 95       	ret

00001106 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    110c:	80 91 b4 01 	lds	r24, 0x01B4
    1110:	84 30       	cpi	r24, 0x04	; 4
    1112:	39 f5       	brne	.+78     	; 0x1162 <send_keyboard+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 e9 00 	sts	0x00E9, r24
    111a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    111c:	90 91 e8 00 	lds	r25, 0x00E8
    1120:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1122:	95 fd       	sbrc	r25, 5
    1124:	06 c0       	rjmp	.+12     	; 0x1132 <send_keyboard+0x2c>
    1126:	95 ed       	ldi	r25, 0xD5	; 213
    1128:	9a 95       	dec	r25
    112a:	f1 f7       	brne	.-4      	; 0x1128 <send_keyboard+0x22>
    112c:	00 00       	nop
    112e:	81 11       	cpse	r24, r1
    1130:	f5 cf       	rjmp	.-22     	; 0x111c <send_keyboard+0x16>
    1132:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1136:	85 ff       	sbrs	r24, 5
    1138:	14 c0       	rjmp	.+40     	; 0x1162 <send_keyboard+0x5c>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	68 e0       	ldi	r22, 0x08	; 8
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 a9 0a 	call	0x1552	; 0x1552 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1148:	80 91 e8 00 	lds	r24, 0x00E8
    114c:	8e 77       	andi	r24, 0x7E	; 126
    114e:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1152:	88 e0       	ldi	r24, 0x08	; 8
    1154:	fe 01       	movw	r30, r28
    1156:	af e3       	ldi	r26, 0x3F	; 63
    1158:	b1 e0       	ldi	r27, 0x01	; 1
    115a:	01 90       	ld	r0, Z+
    115c:	0d 92       	st	X+, r0
    115e:	8a 95       	dec	r24
    1160:	e1 f7       	brne	.-8      	; 0x115a <send_keyboard+0x54>
}
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	08 95       	ret

00001168 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1168:	88 e5       	ldi	r24, 0x58	; 88
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1170:	80 91 b3 01 	lds	r24, 0x01B3
    1174:	81 11       	cpse	r24, r1
    1176:	09 c0       	rjmp	.+18     	; 0x118a <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1178:	0e 94 35 0c 	call	0x186a	; 0x186a <USB_Disable>
        USB_Init();
    117c:	0e 94 97 0c 	call	0x192e	; 0x192e <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1180:	80 91 e2 00 	lds	r24, 0x00E2
    1184:	84 60       	ori	r24, 0x04	; 4
    1186:	80 93 e2 00 	sts	0x00E2, r24
    118a:	08 95       	ret

0000118c <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    118c:	84 e5       	ldi	r24, 0x54	; 84
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1194:	10 92 b3 01 	sts	0x01B3, r1
    1198:	08 95       	ret

0000119a <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    119a:	80 e5       	ldi	r24, 0x50	; 80
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <xputs>

000011a2 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    11a2:	80 91 3d 01 	lds	r24, 0x013D
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	80 93 3d 01 	sts	0x013D, r24
    11ac:	62 e3       	ldi	r22, 0x32	; 50
    11ae:	0e 94 12 28 	call	0x5024	; 0x5024 <__udivmodqi4>
    11b2:	91 11       	cpse	r25, r1
    11b4:	35 c0       	rjmp	.+106    	; 0x1220 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    11b6:	10 92 3d 01 	sts	0x013D, r1

    if (!console_flush) return;
    11ba:	80 91 3e 01 	lds	r24, 0x013E
    11be:	88 23       	and	r24, r24
    11c0:	79 f1       	breq	.+94     	; 0x1220 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    11c2:	80 91 b4 01 	lds	r24, 0x01B4
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	49 f5       	brne	.+82     	; 0x121c <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11ca:	80 91 e9 00 	lds	r24, 0x00E9
    11ce:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11d0:	90 91 ec 00 	lds	r25, 0x00EC
    11d4:	90 ff       	sbrs	r25, 0
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <EVENT_USB_Device_StartOfFrame+0x3a>
    11d8:	90 e8       	ldi	r25, 0x80	; 128
    11da:	01 c0       	rjmp	.+2      	; 0x11de <EVENT_USB_Device_StartOfFrame+0x3c>
    11dc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11de:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11e0:	84 e0       	ldi	r24, 0x04	; 4
    11e2:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    11e6:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    11ea:	80 ff       	sbrs	r24, 0
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    11ee:	80 91 ee 00 	lds	r24, 0x00EE
    11f2:	87 ff       	sbrs	r24, 7
    11f4:	10 c0       	rjmp	.+32     	; 0x1216 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11f6:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    11fa:	85 ff       	sbrs	r24, 5
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11fe:	10 92 f1 00 	sts	0x00F1, r1
    1202:	f9 cf       	rjmp	.-14     	; 0x11f6 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1204:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1208:	80 ff       	sbrs	r24, 0
    120a:	05 c0       	rjmp	.+10     	; 0x1216 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    120c:	80 91 e8 00 	lds	r24, 0x00E8
    1210:	8e 77       	andi	r24, 0x7E	; 126
    1212:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1216:	9f 70       	andi	r25, 0x0F	; 15
    1218:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    121c:	10 92 3e 01 	sts	0x013E, r1
    1220:	08 95       	ret

00001222 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1222:	42 e0       	ldi	r20, 0x02	; 2
    1224:	61 ec       	ldi	r22, 0xC1	; 193
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 af 0b 	call	0x175e	; 0x175e <Endpoint_ConfigureEndpoint_Prv>
    122c:	42 e0       	ldi	r20, 0x02	; 2
    122e:	61 ec       	ldi	r22, 0xC1	; 193
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	0e 94 af 0b 	call	0x175e	; 0x175e <Endpoint_ConfigureEndpoint_Prv>
    1236:	42 e0       	ldi	r20, 0x02	; 2
    1238:	61 ec       	ldi	r22, 0xC1	; 193
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	0e 94 af 0b 	call	0x175e	; 0x175e <Endpoint_ConfigureEndpoint_Prv>
    1240:	42 e2       	ldi	r20, 0x22	; 34
    1242:	61 ec       	ldi	r22, 0xC1	; 193
    1244:	84 e0       	ldi	r24, 0x04	; 4
    1246:	0c 94 af 0b 	jmp	0x175e	; 0x175e <Endpoint_ConfigureEndpoint_Prv>

0000124a <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    124a:	80 91 b6 01 	lds	r24, 0x01B6
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	09 f4       	brne	.+2      	; 0x1254 <EVENT_USB_Device_ControlRequest+0xa>
    1252:	53 c0       	rjmp	.+166    	; 0x12fa <EVENT_USB_Device_ControlRequest+0xb0>
    1254:	30 f4       	brcc	.+12     	; 0x1262 <EVENT_USB_Device_ControlRequest+0x18>
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	71 f0       	breq	.+28     	; 0x1276 <EVENT_USB_Device_ControlRequest+0x2c>
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	09 f4       	brne	.+2      	; 0x1260 <EVENT_USB_Device_ControlRequest+0x16>
    125e:	8c c0       	rjmp	.+280    	; 0x1378 <EVENT_USB_Device_ControlRequest+0x12e>
    1260:	08 95       	ret
    1262:	8a 30       	cpi	r24, 0x0A	; 10
    1264:	09 f4       	brne	.+2      	; 0x1268 <EVENT_USB_Device_ControlRequest+0x1e>
    1266:	78 c0       	rjmp	.+240    	; 0x1358 <EVENT_USB_Device_ControlRequest+0x10e>
    1268:	8b 30       	cpi	r24, 0x0B	; 11
    126a:	09 f4       	brne	.+2      	; 0x126e <EVENT_USB_Device_ControlRequest+0x24>
    126c:	5e c0       	rjmp	.+188    	; 0x132a <EVENT_USB_Device_ControlRequest+0xe0>
    126e:	89 30       	cpi	r24, 0x09	; 9
    1270:	09 f0       	breq	.+2      	; 0x1274 <EVENT_USB_Device_ControlRequest+0x2a>
    1272:	9a c0       	rjmp	.+308    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
    1274:	20 c0       	rjmp	.+64     	; 0x12b6 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1276:	80 91 b5 01 	lds	r24, 0x01B5
    127a:	81 3a       	cpi	r24, 0xA1	; 161
    127c:	09 f0       	breq	.+2      	; 0x1280 <EVENT_USB_Device_ControlRequest+0x36>
    127e:	94 c0       	rjmp	.+296    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1280:	80 91 e8 00 	lds	r24, 0x00E8
    1284:	87 7f       	andi	r24, 0xF7	; 247
    1286:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    128a:	80 91 b9 01 	lds	r24, 0x01B9
    128e:	90 91 ba 01 	lds	r25, 0x01BA
    1292:	89 2b       	or	r24, r25
    1294:	21 f0       	breq	.+8      	; 0x129e <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1296:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	03 c0       	rjmp	.+6      	; 0x12a4 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    129e:	68 e0       	ldi	r22, 0x08	; 8

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    12a0:	8f e3       	ldi	r24, 0x3F	; 63
    12a2:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12aa:	80 91 e8 00 	lds	r24, 0x00E8
    12ae:	8b 77       	andi	r24, 0x7B	; 123
    12b0:	80 93 e8 00 	sts	0x00E8, r24
    12b4:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12b6:	80 91 b5 01 	lds	r24, 0x01B5
    12ba:	81 32       	cpi	r24, 0x21	; 33
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <EVENT_USB_Device_ControlRequest+0x76>
    12be:	74 c0       	rjmp	.+232    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    12c0:	80 91 b9 01 	lds	r24, 0x01B9
    12c4:	90 91 ba 01 	lds	r25, 0x01BA
    12c8:	89 2b       	or	r24, r25
    12ca:	09 f0       	breq	.+2      	; 0x12ce <EVENT_USB_Device_ControlRequest+0x84>
    12cc:	6d c0       	rjmp	.+218    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12ce:	80 91 e8 00 	lds	r24, 0x00E8
    12d2:	87 7f       	andi	r24, 0xF7	; 247
    12d4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12d8:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    12dc:	82 fd       	sbrc	r24, 2
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    12e0:	80 91 b4 01 	lds	r24, 0x01B4
    12e4:	81 11       	cpse	r24, r1
    12e6:	f8 cf       	rjmp	.-16     	; 0x12d8 <EVENT_USB_Device_ControlRequest+0x8e>
    12e8:	5f c0       	rjmp	.+190    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12ea:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    12ee:	80 93 47 01 	sts	0x0147, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12f2:	80 91 e8 00 	lds	r24, 0x00E8
    12f6:	8b 77       	andi	r24, 0x7B	; 123
    12f8:	53 c0       	rjmp	.+166    	; 0x13a0 <EVENT_USB_Device_ControlRequest+0x156>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12fa:	80 91 b5 01 	lds	r24, 0x01B5
    12fe:	81 3a       	cpi	r24, 0xA1	; 161
    1300:	09 f0       	breq	.+2      	; 0x1304 <EVENT_USB_Device_ControlRequest+0xba>
    1302:	52 c0       	rjmp	.+164    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1304:	80 91 b9 01 	lds	r24, 0x01B9
    1308:	90 91 ba 01 	lds	r25, 0x01BA
    130c:	89 2b       	or	r24, r25
    130e:	09 f0       	breq	.+2      	; 0x1312 <EVENT_USB_Device_ControlRequest+0xc8>
    1310:	4b c0       	rjmp	.+150    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1312:	80 91 e8 00 	lds	r24, 0x00E8
    1316:	87 7f       	andi	r24, 0xF7	; 247
    1318:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    131c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1320:	80 ff       	sbrs	r24, 0
    1322:	fc cf       	rjmp	.-8      	; 0x131c <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    1324:	80 91 0b 01 	lds	r24, 0x010B
    1328:	36 c0       	rjmp	.+108    	; 0x1396 <EVENT_USB_Device_ControlRequest+0x14c>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    132a:	80 91 b5 01 	lds	r24, 0x01B5
    132e:	81 32       	cpi	r24, 0x21	; 33
    1330:	d9 f5       	brne	.+118    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1332:	80 91 b9 01 	lds	r24, 0x01B9
    1336:	90 91 ba 01 	lds	r25, 0x01BA
    133a:	89 2b       	or	r24, r25
    133c:	a9 f5       	brne	.+106    	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    133e:	80 91 e8 00 	lds	r24, 0x00E8
    1342:	87 7f       	andi	r24, 0xF7	; 247
    1344:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1348:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    134c:	80 91 b7 01 	lds	r24, 0x01B7
    1350:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    1354:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1358:	80 91 b5 01 	lds	r24, 0x01B5
    135c:	81 32       	cpi	r24, 0x21	; 33
    135e:	21 f5       	brne	.+72     	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
    1360:	80 91 e8 00 	lds	r24, 0x00E8
    1364:	87 7f       	andi	r24, 0xF7	; 247
    1366:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    136a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    136e:	80 91 b8 01 	lds	r24, 0x01B8
    1372:	80 93 48 01 	sts	0x0148, r24
    1376:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1378:	80 91 b5 01 	lds	r24, 0x01B5
    137c:	81 3a       	cpi	r24, 0xA1	; 161
    137e:	a1 f4       	brne	.+40     	; 0x13a8 <EVENT_USB_Device_ControlRequest+0x15e>
    1380:	80 91 e8 00 	lds	r24, 0x00E8
    1384:	87 7f       	andi	r24, 0xF7	; 247
    1386:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    138a:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    138e:	80 ff       	sbrs	r24, 0
    1390:	fc cf       	rjmp	.-8      	; 0x138a <EVENT_USB_Device_ControlRequest+0x140>
                Endpoint_Write_8(keyboard_idle);
    1392:	80 91 48 01 	lds	r24, 0x0148
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1396:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    139a:	80 91 e8 00 	lds	r24, 0x00E8
    139e:	8e 77       	andi	r24, 0x7E	; 126
    13a0:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    13a4:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <Endpoint_ClearStatusStage>
    13a8:	08 95       	ret

000013aa <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    13aa:	08 95       	ret

000013ac <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    13ac:	08 95       	ret

000013ae <hook_usb_suspend_entry>:

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    13ae:	08 95       	ret

000013b0 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    13b0:	8c e4       	ldi	r24, 0x4C	; 76
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    hook_usb_suspend_entry();
    13b8:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <hook_usb_suspend_entry>

000013bc <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    13bc:	0e 94 47 1b 	call	0x368e	; 0x368e <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    13c0:	80 91 b2 01 	lds	r24, 0x01B2
    13c4:	88 23       	and	r24, r24
    13c6:	29 f0       	breq	.+10     	; 0x13d2 <hook_usb_suspend_loop+0x16>
    13c8:	0e 94 6f 1b 	call	0x36de	; 0x36de <suspend_wakeup_condition>
    13cc:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    13ce:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <USB_Device_SendRemoteWakeup>
    13d2:	08 95       	ret

000013d4 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    13d4:	84 b7       	in	r24, 0x34	; 52
    13d6:	87 7f       	andi	r24, 0xF7	; 247
    13d8:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    13da:	88 e1       	ldi	r24, 0x18	; 24
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	80 93 60 00 	sts	0x0060, r24
    13e4:	10 92 60 00 	sts	0x0060, r1
    13e8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	80 e8       	ldi	r24, 0x80	; 128
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	80 93 61 00 	sts	0x0061, r24
    13f6:	90 93 61 00 	sts	0x0061, r25
    13fa:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    13fc:	0e 94 d5 09 	call	0x13aa	; 0x13aa <hook_early_init>
    keyboard_setup();
    1400:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1404:	0e 94 35 0c 	call	0x186a	; 0x186a <USB_Disable>

    USB_Init();
    1408:	0e 94 97 0c 	call	0x192e	; 0x192e <USB_Init>
    140c:	80 91 e2 00 	lds	r24, 0x00E2
    1410:	84 60       	ori	r24, 0x04	; 4
    1412:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1416:	85 e9       	ldi	r24, 0x95	; 149
    1418:	97 e0       	ldi	r25, 0x07	; 7
    141a:	0e 94 02 1b 	call	0x3604	; 0x3604 <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    141e:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1420:	80 91 b4 01 	lds	r24, 0x01B4
    1424:	84 30       	cpi	r24, 0x04	; 4
    1426:	e1 f7       	brne	.-8      	; 0x1420 <main+0x4c>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1428:	87 e3       	ldi	r24, 0x37	; 55
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>

    /* init modules */
    keyboard_init();
    1430:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <keyboard_init>
    host_set_driver(&lufa_driver);
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    143c:	86 e2       	ldi	r24, 0x26	; 38
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    hook_late_init();
    1444:	0e 94 d6 09 	call	0x13ac	; 0x13ac <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1448:	80 91 b4 01 	lds	r24, 0x01B4
    144c:	85 30       	cpi	r24, 0x05	; 5
    144e:	39 f4       	brne	.+14     	; 0x145e <main+0x8a>
            print("[s]");
    1450:	82 e2       	ldi	r24, 0x22	; 34
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            hook_usb_suspend_loop();
    1458:	0e 94 de 09 	call	0x13bc	; 0x13bc <hook_usb_suspend_loop>
    145c:	f5 cf       	rjmp	.-22     	; 0x1448 <main+0x74>
        }

        keyboard_task();
    145e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1462:	f2 cf       	rjmp	.-28     	; 0x1448 <main+0x74>

00001464 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1464:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <suspend_wakeup_init>

00001468 <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1468:	88 e4       	ldi	r24, 0x48	; 72
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    hook_usb_wakeup();
    1470:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <hook_usb_wakeup>

00001474 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1474:	29 2f       	mov	r18, r25
    1476:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1478:	23 30       	cpi	r18, 0x03	; 3
    147a:	31 05       	cpc	r19, r1
    147c:	a9 f0       	breq	.+42     	; 0x14a8 <CALLBACK_USB_GetDescriptor+0x34>
    147e:	6c f4       	brge	.+26     	; 0x149a <CALLBACK_USB_GetDescriptor+0x26>
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	31 05       	cpc	r19, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <CALLBACK_USB_GetDescriptor+0x14>
    1486:	42 c0       	rjmp	.+132    	; 0x150c <CALLBACK_USB_GetDescriptor+0x98>
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	09 f0       	breq	.+2      	; 0x1490 <CALLBACK_USB_GetDescriptor+0x1c>
    148e:	43 c0       	rjmp	.+134    	; 0x1516 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1490:	84 e7       	ldi	r24, 0x74	; 116
    1492:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1494:	20 e8       	ldi	r18, 0x80	; 128
    1496:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1498:	42 c0       	rjmp	.+132    	; 0x151e <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    149a:	21 32       	cpi	r18, 0x21	; 33
    149c:	31 05       	cpc	r19, r1
    149e:	c9 f0       	breq	.+50     	; 0x14d2 <CALLBACK_USB_GetDescriptor+0x5e>
    14a0:	22 32       	cpi	r18, 0x22	; 34
    14a2:	31 05       	cpc	r19, r1
    14a4:	19 f1       	breq	.+70     	; 0x14ec <CALLBACK_USB_GetDescriptor+0x78>
    14a6:	37 c0       	rjmp	.+110    	; 0x1516 <CALLBACK_USB_GetDescriptor+0xa2>
    14a8:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	41 f0       	breq	.+16     	; 0x14c0 <CALLBACK_USB_GetDescriptor+0x4c>
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	91 05       	cpc	r25, r1
    14b4:	41 f0       	breq	.+16     	; 0x14c6 <CALLBACK_USB_GetDescriptor+0x52>
    14b6:	89 2b       	or	r24, r25
    14b8:	71 f5       	brne	.+92     	; 0x1516 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    14ba:	ec e7       	ldi	r30, 0x7C	; 124
    14bc:	f1 e0       	ldi	r31, 0x01	; 1
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    14c0:	e8 e6       	ldi	r30, 0x68	; 104
    14c2:	f1 e0       	ldi	r31, 0x01	; 1
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    14c6:	ec e5       	ldi	r30, 0x5C	; 92
    14c8:	f1 e0       	ldi	r31, 0x01	; 1
    14ca:	84 91       	lpm	r24, Z
    14cc:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    14ce:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    14d0:	26 c0       	rjmp	.+76     	; 0x151e <CALLBACK_USB_GetDescriptor+0xaa>
    14d2:	64 30       	cpi	r22, 0x04	; 4
    14d4:	00 f5       	brcc	.+64     	; 0x1516 <CALLBACK_USB_GetDescriptor+0xa2>
    14d6:	e6 2f       	mov	r30, r22
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	e0 5e       	subi	r30, 0xE0	; 224
    14e0:	fe 4f       	sbci	r31, 0xFE	; 254
    14e2:	20 81       	ld	r18, Z
    14e4:	31 81       	ldd	r19, Z+1	; 0x01
    14e6:	89 e0       	ldi	r24, 0x09	; 9
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	19 c0       	rjmp	.+50     	; 0x151e <CALLBACK_USB_GetDescriptor+0xaa>
    14ec:	64 30       	cpi	r22, 0x04	; 4
    14ee:	98 f4       	brcc	.+38     	; 0x1516 <CALLBACK_USB_GetDescriptor+0xa2>
    14f0:	e6 2f       	mov	r30, r22
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	df 01       	movw	r26, r30
    14f6:	aa 0f       	add	r26, r26
    14f8:	bb 1f       	adc	r27, r27
    14fa:	a8 5e       	subi	r26, 0xE8	; 232
    14fc:	be 4f       	sbci	r27, 0xFE	; 254
    14fe:	2d 91       	ld	r18, X+
    1500:	3c 91       	ld	r19, X
    1502:	ec 5e       	subi	r30, 0xEC	; 236
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	80 81       	ld	r24, Z
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	09 c0       	rjmp	.+18     	; 0x151e <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    150c:	82 e1       	ldi	r24, 0x12	; 18
    150e:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1510:	24 ef       	ldi	r18, 0xF4	; 244
    1512:	31 e0       	ldi	r19, 0x01	; 1
    1514:	04 c0       	rjmp	.+8      	; 0x151e <CALLBACK_USB_GetDescriptor+0xaa>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    151e:	fa 01       	movw	r30, r20
    1520:	31 83       	std	Z+1, r19	; 0x01
    1522:	20 83       	st	Z, r18
    return Size;
}
    1524:	08 95       	ret

00001526 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1526:	84 e1       	ldi	r24, 0x14	; 20
    1528:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    152a:	86 e1       	ldi	r24, 0x16	; 22
    152c:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    152e:	09 b4       	in	r0, 0x29	; 41
    1530:	00 fe       	sbrs	r0, 0
    1532:	fd cf       	rjmp	.-6      	; 0x152e <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1534:	80 91 d8 00 	lds	r24, 0x00D8
    1538:	8f 7d       	andi	r24, 0xDF	; 223
    153a:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    153e:	80 91 e0 00 	lds	r24, 0x00E0
    1542:	82 60       	ori	r24, 0x02	; 2
    1544:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1548:	80 91 e0 00 	lds	r24, 0x00E0
    154c:	81 fd       	sbrc	r24, 1
    154e:	fc cf       	rjmp	.-8      	; 0x1548 <USB_Device_SendRemoteWakeup+0x22>
}
    1550:	08 95       	ret

00001552 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	7c 01       	movw	r14, r24
    1564:	8b 01       	movw	r16, r22
    1566:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1568:	0e 94 05 0c 	call	0x180a	; 0x180a <Endpoint_WaitUntilReady>
    156c:	81 11       	cpse	r24, r1
    156e:	31 c0       	rjmp	.+98     	; 0x15d2 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1570:	20 97       	sbiw	r28, 0x00	; 0
    1572:	31 f0       	breq	.+12     	; 0x1580 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1574:	88 81       	ld	r24, Y
    1576:	99 81       	ldd	r25, Y+1	; 0x01
    1578:	08 1b       	sub	r16, r24
    157a:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    157c:	e8 0e       	add	r14, r24
    157e:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1580:	c1 2c       	mov	r12, r1
    1582:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1584:	01 15       	cp	r16, r1
    1586:	11 05       	cpc	r17, r1
    1588:	19 f1       	breq	.+70     	; 0x15d0 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    158a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    158e:	85 fd       	sbrc	r24, 5
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1592:	80 91 e8 00 	lds	r24, 0x00E8
    1596:	8e 77       	andi	r24, 0x7E	; 126
    1598:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    159c:	20 97       	sbiw	r28, 0x00	; 0
    159e:	41 f0       	breq	.+16     	; 0x15b0 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    15a0:	88 81       	ld	r24, Y
    15a2:	99 81       	ldd	r25, Y+1	; 0x01
    15a4:	8c 0d       	add	r24, r12
    15a6:	9d 1d       	adc	r25, r13
    15a8:	99 83       	std	Y+1, r25	; 0x01
    15aa:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    15ac:	85 e0       	ldi	r24, 0x05	; 5
    15ae:	11 c0       	rjmp	.+34     	; 0x15d2 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    15b0:	0e 94 05 0c 	call	0x180a	; 0x180a <Endpoint_WaitUntilReady>
    15b4:	88 23       	and	r24, r24
    15b6:	31 f3       	breq	.-52     	; 0x1584 <Endpoint_Write_Stream_LE+0x32>
    15b8:	0c c0       	rjmp	.+24     	; 0x15d2 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    15ba:	f7 01       	movw	r30, r14
    15bc:	81 91       	ld	r24, Z+
    15be:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15c0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    15c4:	01 50       	subi	r16, 0x01	; 1
    15c6:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    15c8:	ff ef       	ldi	r31, 0xFF	; 255
    15ca:	cf 1a       	sub	r12, r31
    15cc:	df 0a       	sbc	r13, r31
    15ce:	da cf       	rjmp	.-76     	; 0x1584 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    15d0:	80 e0       	ldi	r24, 0x00	; 0
}
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	08 95       	ret

000015e4 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    15e4:	20 91 bb 01 	lds	r18, 0x01BB
    15e8:	30 91 bc 01 	lds	r19, 0x01BC
    15ec:	26 17       	cp	r18, r22
    15ee:	37 07       	cpc	r19, r23
    15f0:	48 f0       	brcs	.+18     	; 0x1604 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    15f2:	61 15       	cp	r22, r1
    15f4:	71 05       	cpc	r23, r1
    15f6:	39 f4       	brne	.+14     	; 0x1606 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15f8:	20 91 e8 00 	lds	r18, 0x00E8
    15fc:	2e 77       	andi	r18, 0x7E	; 126
    15fe:	20 93 e8 00 	sts	0x00E8, r18
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <Endpoint_Write_Control_Stream_LE+0x22>
    1604:	b9 01       	movw	r22, r18
    1606:	fc 01       	movw	r30, r24
    1608:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    160a:	61 15       	cp	r22, r1
    160c:	71 05       	cpc	r23, r1
    160e:	99 f1       	breq	.+102    	; 0x1676 <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1610:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1614:	88 23       	and	r24, r24
    1616:	e9 f1       	breq	.+122    	; 0x1692 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1618:	85 30       	cpi	r24, 0x05	; 5
    161a:	e9 f1       	breq	.+122    	; 0x1696 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    161c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1620:	83 fd       	sbrc	r24, 3
    1622:	3b c0       	rjmp	.+118    	; 0x169a <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1624:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1628:	82 ff       	sbrs	r24, 2
    162a:	06 c0       	rjmp	.+12     	; 0x1638 <Endpoint_Write_Control_Stream_LE+0x54>
    162c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1630:	82 ff       	sbrs	r24, 2
    1632:	24 c0       	rjmp	.+72     	; 0x167c <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1638:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    163c:	80 ff       	sbrs	r24, 0
    163e:	e5 cf       	rjmp	.-54     	; 0x160a <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1640:	80 91 f2 00 	lds	r24, 0x00F2
    1644:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1648:	61 15       	cp	r22, r1
    164a:	71 05       	cpc	r23, r1
    164c:	51 f0       	breq	.+20     	; 0x1662 <Endpoint_Write_Control_Stream_LE+0x7e>
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	91 05       	cpc	r25, r1
    1652:	38 f4       	brcc	.+14     	; 0x1662 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1654:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1656:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    165a:	61 50       	subi	r22, 0x01	; 1
    165c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	f3 cf       	rjmp	.-26     	; 0x1648 <Endpoint_Write_Control_Stream_LE+0x64>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1662:	21 e0       	ldi	r18, 0x01	; 1
    1664:	08 97       	sbiw	r24, 0x08	; 8
    1666:	09 f0       	breq	.+2      	; 0x166a <Endpoint_Write_Control_Stream_LE+0x86>
    1668:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    166a:	80 91 e8 00 	lds	r24, 0x00E8
    166e:	8e 77       	andi	r24, 0x7E	; 126
    1670:	80 93 e8 00 	sts	0x00E8, r24
    1674:	ca cf       	rjmp	.-108    	; 0x160a <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1676:	21 11       	cpse	r18, r1
    1678:	cb cf       	rjmp	.-106    	; 0x1610 <Endpoint_Write_Control_Stream_LE+0x2c>
    167a:	d8 cf       	rjmp	.-80     	; 0x162c <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    167c:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1680:	88 23       	and	r24, r24
    1682:	39 f0       	breq	.+14     	; 0x1692 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1684:	85 30       	cpi	r24, 0x05	; 5
    1686:	39 f0       	breq	.+14     	; 0x1696 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1688:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    168c:	83 ff       	sbrs	r24, 3
    168e:	ce cf       	rjmp	.-100    	; 0x162c <Endpoint_Write_Control_Stream_LE+0x48>
    1690:	04 c0       	rjmp	.+8      	; 0x169a <Endpoint_Write_Control_Stream_LE+0xb6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    169a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    169c:	08 95       	ret

0000169e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    169e:	20 91 bb 01 	lds	r18, 0x01BB
    16a2:	30 91 bc 01 	lds	r19, 0x01BC
    16a6:	26 17       	cp	r18, r22
    16a8:	37 07       	cpc	r19, r23
    16aa:	48 f0       	brcs	.+18     	; 0x16be <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    16ac:	61 15       	cp	r22, r1
    16ae:	71 05       	cpc	r23, r1
    16b0:	39 f4       	brne	.+14     	; 0x16c0 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16b2:	20 91 e8 00 	lds	r18, 0x00E8
    16b6:	2e 77       	andi	r18, 0x7E	; 126
    16b8:	20 93 e8 00 	sts	0x00E8, r18
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <Endpoint_Write_Control_PStream_LE+0x22>
    16be:	b9 01       	movw	r22, r18
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    16c4:	61 15       	cp	r22, r1
    16c6:	71 05       	cpc	r23, r1
    16c8:	b1 f1       	breq	.+108    	; 0x1736 <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16ca:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16ce:	88 23       	and	r24, r24
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <Endpoint_Write_Control_PStream_LE+0x36>
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16d4:	85 30       	cpi	r24, 0x05	; 5
    16d6:	09 f4       	brne	.+2      	; 0x16da <Endpoint_Write_Control_PStream_LE+0x3c>
    16d8:	3e c0       	rjmp	.+124    	; 0x1756 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16de:	83 fd       	sbrc	r24, 3
    16e0:	3c c0       	rjmp	.+120    	; 0x175a <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16e2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    16e6:	82 ff       	sbrs	r24, 2
    16e8:	06 c0       	rjmp	.+12     	; 0x16f6 <Endpoint_Write_Control_PStream_LE+0x58>
    16ea:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    16ee:	82 ff       	sbrs	r24, 2
    16f0:	25 c0       	rjmp	.+74     	; 0x173c <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16f6:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    16fa:	80 ff       	sbrs	r24, 0
    16fc:	e3 cf       	rjmp	.-58     	; 0x16c4 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    16fe:	80 91 f2 00 	lds	r24, 0x00F2
    1702:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1706:	61 15       	cp	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	59 f0       	breq	.+22     	; 0x1722 <Endpoint_Write_Control_PStream_LE+0x84>
    170c:	88 30       	cpi	r24, 0x08	; 8
    170e:	91 05       	cpc	r25, r1
    1710:	40 f4       	brcc	.+16     	; 0x1722 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1712:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1714:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1718:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    171a:	61 50       	subi	r22, 0x01	; 1
    171c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	f2 cf       	rjmp	.-28     	; 0x1706 <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1722:	21 e0       	ldi	r18, 0x01	; 1
    1724:	08 97       	sbiw	r24, 0x08	; 8
    1726:	09 f0       	breq	.+2      	; 0x172a <Endpoint_Write_Control_PStream_LE+0x8c>
    1728:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    172a:	80 91 e8 00 	lds	r24, 0x00E8
    172e:	8e 77       	andi	r24, 0x7E	; 126
    1730:	80 93 e8 00 	sts	0x00E8, r24
    1734:	c7 cf       	rjmp	.-114    	; 0x16c4 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1736:	21 11       	cpse	r18, r1
    1738:	c8 cf       	rjmp	.-112    	; 0x16ca <Endpoint_Write_Control_PStream_LE+0x2c>
    173a:	d7 cf       	rjmp	.-82     	; 0x16ea <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    173c:	80 91 b4 01 	lds	r24, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1740:	88 23       	and	r24, r24
    1742:	39 f0       	breq	.+14     	; 0x1752 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1744:	85 30       	cpi	r24, 0x05	; 5
    1746:	39 f0       	breq	.+14     	; 0x1756 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1748:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    174c:	83 ff       	sbrs	r24, 3
    174e:	cd cf       	rjmp	.-102    	; 0x16ea <Endpoint_Write_Control_PStream_LE+0x4c>
    1750:	04 c0       	rjmp	.+8      	; 0x175a <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    175a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    175c:	08 95       	ret

0000175e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    175e:	98 2f       	mov	r25, r24
    1760:	97 30       	cpi	r25, 0x07	; 7
    1762:	58 f5       	brcc	.+86     	; 0x17ba <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1764:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1768:	98 17       	cp	r25, r24
    176a:	39 f0       	breq	.+14     	; 0x177a <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    176c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1770:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1774:	50 91 f0 00 	lds	r21, 0x00F0
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    177a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    177c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    177e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1780:	21 ff       	sbrs	r18, 1
    1782:	19 c0       	rjmp	.+50     	; 0x17b6 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1784:	30 91 eb 00 	lds	r19, 0x00EB
    1788:	3e 7f       	andi	r19, 0xFE	; 254
    178a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    178e:	30 91 ed 00 	lds	r19, 0x00ED
    1792:	3d 7f       	andi	r19, 0xFD	; 253
    1794:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1798:	30 91 eb 00 	lds	r19, 0x00EB
    179c:	31 60       	ori	r19, 0x01	; 1
    179e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    17a2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    17a6:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    17aa:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    17ae:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    17b2:	27 ff       	sbrs	r18, 7
    17b4:	07 c0       	rjmp	.+14     	; 0x17c4 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    17b6:	9f 5f       	subi	r25, 0xFF	; 255
    17b8:	d3 cf       	rjmp	.-90     	; 0x1760 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17ba:	8f 70       	andi	r24, 0x0F	; 15
    17bc:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    17c6:	08 95       	ret

000017c8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    17c8:	80 91 b5 01 	lds	r24, 0x01B5
    17cc:	87 fd       	sbrc	r24, 7
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17d0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    17d4:	80 ff       	sbrs	r24, 0
    17d6:	0e c0       	rjmp	.+28     	; 0x17f4 <Endpoint_ClearStatusStage+0x2c>
    17d8:	12 c0       	rjmp	.+36     	; 0x17fe <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17da:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    17de:	82 fd       	sbrc	r24, 2
    17e0:	05 c0       	rjmp	.+10     	; 0x17ec <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    17e2:	80 91 b4 01 	lds	r24, 0x01B4
    17e6:	81 11       	cpse	r24, r1
    17e8:	f8 cf       	rjmp	.-16     	; 0x17da <Endpoint_ClearStatusStage+0x12>
    17ea:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17ec:	80 91 e8 00 	lds	r24, 0x00E8
    17f0:	8b 77       	andi	r24, 0x7B	; 123
    17f2:	08 c0       	rjmp	.+16     	; 0x1804 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    17f4:	80 91 b4 01 	lds	r24, 0x01B4
    17f8:	81 11       	cpse	r24, r1
    17fa:	ea cf       	rjmp	.-44     	; 0x17d0 <Endpoint_ClearStatusStage+0x8>
    17fc:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17fe:	80 91 e8 00 	lds	r24, 0x00E8
    1802:	8e 77       	andi	r24, 0x7E	; 126
    1804:	80 93 e8 00 	sts	0x00E8, r24
    1808:	08 95       	ret

0000180a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    180a:	80 91 e4 00 	lds	r24, 0x00E4
    180e:	90 91 e5 00 	lds	r25, 0x00E5
    1812:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1814:	20 91 ec 00 	lds	r18, 0x00EC
    1818:	20 ff       	sbrs	r18, 0
    181a:	21 c0       	rjmp	.+66     	; 0x185e <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    181c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1820:	20 fd       	sbrc	r18, 0
    1822:	21 c0       	rjmp	.+66     	; 0x1866 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1824:	20 91 b4 01 	lds	r18, 0x01B4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1828:	22 23       	and	r18, r18
    182a:	89 f0       	breq	.+34     	; 0x184e <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    182c:	25 30       	cpi	r18, 0x05	; 5
    182e:	89 f0       	breq	.+34     	; 0x1852 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1830:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1834:	25 fd       	sbrc	r18, 5
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <Endpoint_WaitUntilReady+0x4c>
    1838:	20 91 e4 00 	lds	r18, 0x00E4
    183c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1840:	28 17       	cp	r18, r24
    1842:	39 07       	cpc	r19, r25
    1844:	39 f3       	breq	.-50     	; 0x1814 <Endpoint_WaitUntilReady+0xa>
    1846:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1848:	41 f0       	breq	.+16     	; 0x185a <Endpoint_WaitUntilReady+0x50>
    184a:	c9 01       	movw	r24, r18
    184c:	e3 cf       	rjmp	.-58     	; 0x1814 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    185a:	84 e0       	ldi	r24, 0x04	; 4
    185c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    185e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1862:	22 ff       	sbrs	r18, 2
    1864:	df cf       	rjmp	.-66     	; 0x1824 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	08 95       	ret

0000186a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    186a:	0e 94 a6 0c 	call	0x194c	; 0x194c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    186e:	0e 94 ae 0c 	call	0x195c	; 0x195c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1872:	e0 ee       	ldi	r30, 0xE0	; 224
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	81 60       	ori	r24, 0x01	; 1
    187a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    187c:	e8 ed       	ldi	r30, 0xD8	; 216
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8f 77       	andi	r24, 0x7F	; 127
    1884:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1886:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1888:	a7 ed       	ldi	r26, 0xD7	; 215
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	8c 91       	ld	r24, X
    188e:	8e 7f       	andi	r24, 0xFE	; 254
    1890:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1892:	80 81       	ld	r24, Z
    1894:	8f 7e       	andi	r24, 0xEF	; 239
    1896:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1898:	10 92 b3 01 	sts	0x01B3, r1
    189c:	08 95       	ret

0000189e <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    18a6:	0e 94 a6 0c 	call	0x194c	; 0x194c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18aa:	0e 94 ae 0c 	call	0x195c	; 0x195c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    18ae:	c8 ed       	ldi	r28, 0xD8	; 216
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
    18b2:	88 81       	ld	r24, Y
    18b4:	8f 77       	andi	r24, 0x7F	; 127
    18b6:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    18b8:	88 81       	ld	r24, Y
    18ba:	80 68       	ori	r24, 0x80	; 128
    18bc:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18be:	88 81       	ld	r24, Y
    18c0:	8f 7d       	andi	r24, 0xDF	; 223
    18c2:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    18c4:	e7 ed       	ldi	r30, 0xD7	; 215
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 68       	ori	r24, 0x80	; 128
    18cc:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18ce:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    18d0:	10 92 b4 01 	sts	0x01B4, r1
	USB_Device_ConfigurationNumber  = 0;
    18d4:	10 92 b0 01 	sts	0x01B0, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    18d8:	10 92 b2 01 	sts	0x01B2, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    18dc:	10 92 b1 01 	sts	0x01B1, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    18e0:	00 ee       	ldi	r16, 0xE0	; 224
    18e2:	10 e0       	ldi	r17, 0x00	; 0
    18e4:	f8 01       	movw	r30, r16
    18e6:	80 81       	ld	r24, Z
    18e8:	8b 7f       	andi	r24, 0xFB	; 251
    18ea:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    18ec:	88 81       	ld	r24, Y
    18ee:	81 60       	ori	r24, 0x01	; 1
    18f0:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    18f2:	42 e0       	ldi	r20, 0x02	; 2
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	0e 94 af 0b 	call	0x175e	; 0x175e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    18fc:	e1 ee       	ldi	r30, 0xE1	; 225
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8e 7f       	andi	r24, 0xFE	; 254
    1904:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1906:	e2 ee       	ldi	r30, 0xE2	; 226
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	81 60       	ori	r24, 0x01	; 1
    190e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1910:	80 81       	ld	r24, Z
    1912:	88 60       	ori	r24, 0x08	; 8
    1914:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1916:	f8 01       	movw	r30, r16
    1918:	80 81       	ld	r24, Z
    191a:	8e 7f       	andi	r24, 0xFE	; 254
    191c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    191e:	88 81       	ld	r24, Y
    1920:	80 61       	ori	r24, 0x10	; 16
    1922:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    192e:	e8 ed       	ldi	r30, 0xD8	; 216
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 7e       	andi	r24, 0xEF	; 239
    1936:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1938:	e7 ed       	ldi	r30, 0xD7	; 215
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	81 60       	ori	r24, 0x01	; 1
    1940:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 b3 01 	sts	0x01B3, r24

	USB_ResetInterface();
    1948:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <USB_ResetInterface>

0000194c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    194c:	e8 ed       	ldi	r30, 0xD8	; 216
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8c 7f       	andi	r24, 0xFC	; 252
    1954:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1956:	10 92 e2 00 	sts	0x00E2, r1
    195a:	08 95       	ret

0000195c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    195c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1960:	10 92 e1 00 	sts	0x00E1, r1
    1964:	08 95       	ret

00001966 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1966:	1f 92       	push	r1
    1968:	0f 92       	push	r0
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	0b b6       	in	r0, 0x3b	; 59
    1972:	0f 92       	push	r0
    1974:	2f 93       	push	r18
    1976:	3f 93       	push	r19
    1978:	4f 93       	push	r20
    197a:	5f 93       	push	r21
    197c:	6f 93       	push	r22
    197e:	7f 93       	push	r23
    1980:	8f 93       	push	r24
    1982:	9f 93       	push	r25
    1984:	af 93       	push	r26
    1986:	bf 93       	push	r27
    1988:	ef 93       	push	r30
    198a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    198c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1990:	82 ff       	sbrs	r24, 2
    1992:	0b c0       	rjmp	.+22     	; 0x19aa <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1994:	80 91 e2 00 	lds	r24, 0x00E2
    1998:	82 ff       	sbrs	r24, 2
    199a:	07 c0       	rjmp	.+14     	; 0x19aa <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    199c:	80 91 e1 00 	lds	r24, 0x00E1
    19a0:	8b 7f       	andi	r24, 0xFB	; 251
    19a2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    19a6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    19aa:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    19ae:	80 ff       	sbrs	r24, 0
    19b0:	1f c0       	rjmp	.+62     	; 0x19f0 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    19b2:	80 91 d8 00 	lds	r24, 0x00D8
    19b6:	80 ff       	sbrs	r24, 0
    19b8:	1b c0       	rjmp	.+54     	; 0x19f0 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    19ba:	80 91 da 00 	lds	r24, 0x00DA
    19be:	8e 7f       	andi	r24, 0xFE	; 254
    19c0:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    19c4:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    19c8:	80 ff       	sbrs	r24, 0
    19ca:	0d c0       	rjmp	.+26     	; 0x19e6 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19cc:	84 e1       	ldi	r24, 0x14	; 20
    19ce:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19d0:	86 e1       	ldi	r24, 0x16	; 22
    19d2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    19d4:	09 b4       	in	r0, 0x29	; 41
    19d6:	00 fe       	sbrs	r0, 0
    19d8:	fd cf       	rjmp	.-6      	; 0x19d4 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 93 b4 01 	sts	0x01B4, r24
			EVENT_USB_Device_Connect();
    19e0:	0e 94 b4 08 	call	0x1168	; 0x1168 <EVENT_USB_Device_Connect>
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    19e6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    19e8:	10 92 b4 01 	sts	0x01B4, r1
			EVENT_USB_Device_Disconnect();
    19ec:	0e 94 c6 08 	call	0x118c	; 0x118c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    19f0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    19f4:	80 ff       	sbrs	r24, 0
    19f6:	19 c0       	rjmp	.+50     	; 0x1a2a <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    19f8:	80 91 e2 00 	lds	r24, 0x00E2
    19fc:	80 ff       	sbrs	r24, 0
    19fe:	15 c0       	rjmp	.+42     	; 0x1a2a <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a00:	80 91 e2 00 	lds	r24, 0x00E2
    1a04:	8e 7f       	andi	r24, 0xFE	; 254
    1a06:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a0a:	80 91 e2 00 	lds	r24, 0x00E2
    1a0e:	80 61       	ori	r24, 0x10	; 16
    1a10:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1a14:	80 91 d8 00 	lds	r24, 0x00D8
    1a18:	80 62       	ori	r24, 0x20	; 32
    1a1a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a1e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1a20:	85 e0       	ldi	r24, 0x05	; 5
    1a22:	80 93 b4 01 	sts	0x01B4, r24
		EVENT_USB_Device_Suspend();
    1a26:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1a2a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1a2e:	84 ff       	sbrs	r24, 4
    1a30:	30 c0       	rjmp	.+96     	; 0x1a92 <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1a32:	80 91 e2 00 	lds	r24, 0x00E2
    1a36:	84 ff       	sbrs	r24, 4
    1a38:	2c c0       	rjmp	.+88     	; 0x1a92 <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a3a:	84 e1       	ldi	r24, 0x14	; 20
    1a3c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a3e:	86 e1       	ldi	r24, 0x16	; 22
    1a40:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1a42:	09 b4       	in	r0, 0x29	; 41
    1a44:	00 fe       	sbrs	r0, 0
    1a46:	fd cf       	rjmp	.-6      	; 0x1a42 <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a48:	80 91 d8 00 	lds	r24, 0x00D8
    1a4c:	8f 7d       	andi	r24, 0xDF	; 223
    1a4e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1a52:	80 91 e1 00 	lds	r24, 0x00E1
    1a56:	8f 7e       	andi	r24, 0xEF	; 239
    1a58:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1a5c:	80 91 e2 00 	lds	r24, 0x00E2
    1a60:	8f 7e       	andi	r24, 0xEF	; 239
    1a62:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1a66:	80 91 e2 00 	lds	r24, 0x00E2
    1a6a:	81 60       	ori	r24, 0x01	; 1
    1a6c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1a70:	80 91 b0 01 	lds	r24, 0x01B0
    1a74:	88 23       	and	r24, r24
    1a76:	11 f0       	breq	.+4      	; 0x1a7c <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1a78:	84 e0       	ldi	r24, 0x04	; 4
    1a7a:	07 c0       	rjmp	.+14     	; 0x1a8a <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1a7c:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1a80:	87 ff       	sbrs	r24, 7
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <__vector_10+0x122>
    1a84:	83 e0       	ldi	r24, 0x03	; 3
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <__vector_10+0x124>
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	80 93 b4 01 	sts	0x01B4, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1a8e:	0e 94 34 0a 	call	0x1468	; 0x1468 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1a92:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1a96:	83 ff       	sbrs	r24, 3
    1a98:	29 c0       	rjmp	.+82     	; 0x1aec <__vector_10+0x186>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1a9a:	80 91 e2 00 	lds	r24, 0x00E2
    1a9e:	83 ff       	sbrs	r24, 3
    1aa0:	25 c0       	rjmp	.+74     	; 0x1aec <__vector_10+0x186>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1aa2:	80 91 e1 00 	lds	r24, 0x00E1
    1aa6:	87 7f       	andi	r24, 0xF7	; 247
    1aa8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	80 93 b4 01 	sts	0x01B4, r24
		USB_Device_ConfigurationNumber = 0;
    1ab2:	10 92 b0 01 	sts	0x01B0, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ab6:	80 91 e1 00 	lds	r24, 0x00E1
    1aba:	8e 7f       	andi	r24, 0xFE	; 254
    1abc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ac0:	80 91 e2 00 	lds	r24, 0x00E2
    1ac4:	8e 7f       	andi	r24, 0xFE	; 254
    1ac6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1aca:	80 91 e2 00 	lds	r24, 0x00E2
    1ace:	80 61       	ori	r24, 0x10	; 16
    1ad0:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ad4:	42 e0       	ldi	r20, 0x02	; 2
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	0e 94 af 0b 	call	0x175e	; 0x175e <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ade:	80 91 f0 00 	lds	r24, 0x00F0
    1ae2:	88 60       	ori	r24, 0x08	; 8
    1ae4:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ae8:	0e 94 cd 08 	call	0x119a	; 0x119a <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1aec:	ff 91       	pop	r31
    1aee:	ef 91       	pop	r30
    1af0:	bf 91       	pop	r27
    1af2:	af 91       	pop	r26
    1af4:	9f 91       	pop	r25
    1af6:	8f 91       	pop	r24
    1af8:	7f 91       	pop	r23
    1afa:	6f 91       	pop	r22
    1afc:	5f 91       	pop	r21
    1afe:	4f 91       	pop	r20
    1b00:	3f 91       	pop	r19
    1b02:	2f 91       	pop	r18
    1b04:	0f 90       	pop	r0
    1b06:	0b be       	out	0x3b, r0	; 59
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	0f 90       	pop	r0
    1b0e:	1f 90       	pop	r1
    1b10:	18 95       	reti

00001b12 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1b12:	1f 92       	push	r1
    1b14:	0f 92       	push	r0
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	0f 92       	push	r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	0b b6       	in	r0, 0x3b	; 59
    1b1e:	0f 92       	push	r0
    1b20:	2f 93       	push	r18
    1b22:	3f 93       	push	r19
    1b24:	4f 93       	push	r20
    1b26:	5f 93       	push	r21
    1b28:	6f 93       	push	r22
    1b2a:	7f 93       	push	r23
    1b2c:	8f 93       	push	r24
    1b2e:	9f 93       	push	r25
    1b30:	af 93       	push	r26
    1b32:	bf 93       	push	r27
    1b34:	cf 93       	push	r28
    1b36:	ef 93       	push	r30
    1b38:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1b3a:	c0 91 e9 00 	lds	r28, 0x00E9
    1b3e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b40:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b44:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1b48:	80 91 f0 00 	lds	r24, 0x00F0
    1b4c:	87 7f       	andi	r24, 0xF7	; 247
    1b4e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1b52:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1b54:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <USB_Device_ProcessControlRequest>
    1b58:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1b5c:	80 91 f0 00 	lds	r24, 0x00F0
    1b60:	88 60       	ori	r24, 0x08	; 8
    1b62:	80 93 f0 00 	sts	0x00F0, r24
    1b66:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1b6a:	ff 91       	pop	r31
    1b6c:	ef 91       	pop	r30
    1b6e:	cf 91       	pop	r28
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0b be       	out	0x3b, r0	; 59
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	0f 90       	pop	r0
    1b8e:	1f 90       	pop	r1
    1b90:	18 95       	reti

00001b92 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	aa 97       	sbiw	r28, 0x2a	; 42
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	e5 eb       	ldi	r30, 0xB5	; 181
    1baa:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1bac:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1bb0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1bb2:	21 e0       	ldi	r18, 0x01	; 1
    1bb4:	ed 3b       	cpi	r30, 0xBD	; 189
    1bb6:	f2 07       	cpc	r31, r18
    1bb8:	c9 f7       	brne	.-14     	; 0x1bac <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1bba:	0e 94 25 09 	call	0x124a	; 0x124a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1bbe:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1bc2:	83 ff       	sbrs	r24, 3
    1bc4:	1c c1       	rjmp	.+568    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1bc6:	20 91 b5 01 	lds	r18, 0x01B5

		switch (USB_ControlRequest.bRequest)
    1bca:	30 91 b6 01 	lds	r19, 0x01B6
    1bce:	83 2f       	mov	r24, r19
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	8a 30       	cpi	r24, 0x0A	; 10
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <USB_Device_ProcessControlRequest+0x48>
    1bd8:	12 c1       	rjmp	.+548    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e4 5b       	subi	r30, 0xB4	; 180
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1be4:	20 38       	cpi	r18, 0x80	; 128
    1be6:	81 f0       	breq	.+32     	; 0x1c08 <USB_Device_ProcessControlRequest+0x76>
    1be8:	22 38       	cpi	r18, 0x82	; 130
    1bea:	09 f0       	breq	.+2      	; 0x1bee <USB_Device_ProcessControlRequest+0x5c>
    1bec:	08 c1       	rjmp	.+528    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bee:	80 91 b9 01 	lds	r24, 0x01B9
    1bf2:	8f 70       	andi	r24, 0x0F	; 15
    1bf4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bf8:	80 91 eb 00 	lds	r24, 0x00EB
    1bfc:	85 fb       	bst	r24, 5
    1bfe:	88 27       	eor	r24, r24
    1c00:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c02:	10 92 e9 00 	sts	0x00E9, r1
    1c06:	06 c0       	rjmp	.+12     	; 0x1c14 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1c08:	80 91 b1 01 	lds	r24, 0x01B1
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1c0c:	90 91 b2 01 	lds	r25, 0x01B2
    1c10:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1c12:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c14:	90 91 e8 00 	lds	r25, 0x00E8
    1c18:	97 7f       	andi	r25, 0xF7	; 247
    1c1a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1c1e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1c22:	10 92 f1 00 	sts	0x00F1, r1
    1c26:	c5 c0       	rjmp	.+394    	; 0x1db2 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1c28:	82 2f       	mov	r24, r18
    1c2a:	8d 7f       	andi	r24, 0xFD	; 253
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <USB_Device_ProcessControlRequest+0x9e>
    1c2e:	e7 c0       	rjmp	.+462    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1c30:	22 23       	and	r18, r18
    1c32:	19 f0       	breq	.+6      	; 0x1c3a <USB_Device_ProcessControlRequest+0xa8>
    1c34:	22 30       	cpi	r18, 0x02	; 2
    1c36:	61 f0       	breq	.+24     	; 0x1c50 <USB_Device_ProcessControlRequest+0xbe>
    1c38:	e2 c0       	rjmp	.+452    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1c3a:	80 91 b7 01 	lds	r24, 0x01B7
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <USB_Device_ProcessControlRequest+0xb2>
    1c42:	dd c0       	rjmp	.+442    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1c44:	33 30       	cpi	r19, 0x03	; 3
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <USB_Device_ProcessControlRequest+0xb8>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	80 93 b2 01 	sts	0x01B2, r24
    1c4e:	28 c0       	rjmp	.+80     	; 0x1ca0 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1c50:	80 91 b7 01 	lds	r24, 0x01B7
    1c54:	81 11       	cpse	r24, r1
    1c56:	24 c0       	rjmp	.+72     	; 0x1ca0 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1c58:	20 91 b9 01 	lds	r18, 0x01B9
    1c5c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <USB_Device_ProcessControlRequest+0xd0>
    1c60:	ce c0       	rjmp	.+412    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c62:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1c66:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1c6a:	80 ff       	sbrs	r24, 0
    1c6c:	19 c0       	rjmp	.+50     	; 0x1ca0 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c6e:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1c72:	33 30       	cpi	r19, 0x03	; 3
    1c74:	11 f4       	brne	.+4      	; 0x1c7a <USB_Device_ProcessControlRequest+0xe8>
    1c76:	80 62       	ori	r24, 0x20	; 32
    1c78:	11 c0       	rjmp	.+34     	; 0x1c9c <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c7a:	80 61       	ori	r24, 0x10	; 16
    1c7c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <USB_Device_ProcessControlRequest+0xf8>
    1c88:	88 0f       	add	r24, r24
    1c8a:	0a 94       	dec	r0
    1c8c:	ea f7       	brpl	.-6      	; 0x1c88 <USB_Device_ProcessControlRequest+0xf6>
    1c8e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1c92:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c96:	80 91 eb 00 	lds	r24, 0x00EB
    1c9a:	88 60       	ori	r24, 0x08	; 8
    1c9c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ca0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ca4:	80 91 e8 00 	lds	r24, 0x00E8
    1ca8:	87 7f       	andi	r24, 0xF7	; 247
    1caa:	86 c0       	rjmp	.+268    	; 0x1db8 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1cac:	21 11       	cpse	r18, r1
    1cae:	a7 c0       	rjmp	.+334    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1cb0:	10 91 b7 01 	lds	r17, 0x01B7
    1cb4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1cb6:	80 91 e3 00 	lds	r24, 0x00E3
    1cba:	80 78       	andi	r24, 0x80	; 128
    1cbc:	81 2b       	or	r24, r17
    1cbe:	80 93 e3 00 	sts	0x00E3, r24
    1cc2:	80 91 e8 00 	lds	r24, 0x00E8
    1cc6:	87 7f       	andi	r24, 0xF7	; 247
    1cc8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ccc:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1cd0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1cd4:	80 ff       	sbrs	r24, 0
    1cd6:	fc cf       	rjmp	.-8      	; 0x1cd0 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1cd8:	80 91 e3 00 	lds	r24, 0x00E3
    1cdc:	80 68       	ori	r24, 0x80	; 128
    1cde:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1ce2:	11 23       	and	r17, r17
    1ce4:	11 f0       	breq	.+4      	; 0x1cea <USB_Device_ProcessControlRequest+0x158>
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <USB_Device_ProcessControlRequest+0x15a>
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	80 93 b4 01 	sts	0x01B4, r24
    1cf0:	86 c0       	rjmp	.+268    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1cf2:	20 58       	subi	r18, 0x80	; 128
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	08 f0       	brcs	.+2      	; 0x1cfa <USB_Device_ProcessControlRequest+0x168>
    1cf8:	82 c0       	rjmp	.+260    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1cfa:	80 91 b7 01 	lds	r24, 0x01B7
    1cfe:	90 91 b8 01 	lds	r25, 0x01B8
    1d02:	8c 3d       	cpi	r24, 0xDC	; 220
    1d04:	23 e0       	ldi	r18, 0x03	; 3
    1d06:	92 07       	cpc	r25, r18
    1d08:	79 f5       	brne	.+94     	; 0x1d68 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1d0e:	8a e2       	ldi	r24, 0x2A	; 42
    1d10:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1d12:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1d14:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1d16:	de 01       	movw	r26, r28
    1d18:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1d1c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1d1e:	51 e2       	ldi	r21, 0x21	; 33
    1d20:	e3 2f       	mov	r30, r19
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	50 93 57 00 	sts	0x0057, r21
    1d28:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1d2a:	20 ff       	sbrs	r18, 0
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1d2e:	e2 95       	swap	r30
    1d30:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1d32:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1d34:	ef 70       	andi	r30, 0x0F	; 15
    1d36:	8e 2f       	mov	r24, r30
    1d38:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1d3a:	ea 30       	cpi	r30, 0x0A	; 10
    1d3c:	10 f0       	brcs	.+4      	; 0x1d42 <USB_Device_ProcessControlRequest+0x1b0>
    1d3e:	c7 96       	adiw	r24, 0x37	; 55
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <USB_Device_ProcessControlRequest+0x1b2>
    1d42:	c0 96       	adiw	r24, 0x30	; 48
    1d44:	8d 93       	st	X+, r24
    1d46:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1d48:	2f 5f       	subi	r18, 0xFF	; 255
    1d4a:	24 31       	cpi	r18, 0x14	; 20
    1d4c:	49 f7       	brne	.-46     	; 0x1d20 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1d4e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d50:	80 91 e8 00 	lds	r24, 0x00E8
    1d54:	87 7f       	andi	r24, 0xF7	; 247
    1d56:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1d5a:	6a e2       	ldi	r22, 0x2A	; 42
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	ce 01       	movw	r24, r28
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Endpoint_Write_Control_Stream_LE>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1d68:	ae 01       	movw	r20, r28
    1d6a:	4f 5f       	subi	r20, 0xFF	; 255
    1d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6e:	60 91 b9 01 	lds	r22, 0x01B9
    1d72:	0e 94 3a 0a 	call	0x1474	; 0x1474 <CALLBACK_USB_GetDescriptor>
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <USB_Device_ProcessControlRequest+0x1ea>
    1d7a:	41 c0       	rjmp	.+130    	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
    1d7c:	20 91 e8 00 	lds	r18, 0x00E8
    1d80:	27 7f       	andi	r18, 0xF7	; 247
    1d82:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1d86:	bc 01       	movw	r22, r24
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	0e 94 4f 0b 	call	0x169e	; 0x169e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d90:	80 91 e8 00 	lds	r24, 0x00E8
    1d94:	8b 77       	andi	r24, 0x7B	; 123
    1d96:	80 93 e8 00 	sts	0x00E8, r24
    1d9a:	31 c0       	rjmp	.+98     	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1d9c:	20 38       	cpi	r18, 0x80	; 128
    1d9e:	79 f5       	brne	.+94     	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1da0:	80 91 e8 00 	lds	r24, 0x00E8
    1da4:	87 7f       	andi	r24, 0xF7	; 247
    1da6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1daa:	80 91 b0 01 	lds	r24, 0x01B0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1dae:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1db2:	80 91 e8 00 	lds	r24, 0x00E8
    1db6:	8e 77       	andi	r24, 0x7E	; 126
    1db8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1dbc:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <Endpoint_ClearStatusStage>
    1dc0:	1e c0       	rjmp	.+60     	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1dc2:	21 11       	cpse	r18, r1
    1dc4:	1c c0       	rjmp	.+56     	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1dc6:	90 91 b7 01 	lds	r25, 0x01B7
    1dca:	92 30       	cpi	r25, 0x02	; 2
    1dcc:	c0 f4       	brcc	.+48     	; 0x1dfe <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dce:	80 91 e8 00 	lds	r24, 0x00E8
    1dd2:	87 7f       	andi	r24, 0xF7	; 247
    1dd4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1dd8:	90 93 b0 01 	sts	0x01B0, r25

	Endpoint_ClearStatusStage();
    1ddc:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1de0:	80 91 b0 01 	lds	r24, 0x01B0
    1de4:	81 11       	cpse	r24, r1
    1de6:	04 c0       	rjmp	.+8      	; 0x1df0 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1de8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1dec:	87 ff       	sbrs	r24, 7
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <USB_Device_ProcessControlRequest+0x262>
    1df0:	84 e0       	ldi	r24, 0x04	; 4
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <USB_Device_ProcessControlRequest+0x264>
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 93 b4 01 	sts	0x01B4, r24

	EVENT_USB_Device_ConfigurationChanged();
    1dfa:	0e 94 11 09 	call	0x1222	; 0x1222 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1dfe:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1e02:	83 ff       	sbrs	r24, 3
    1e04:	0a c0       	rjmp	.+20     	; 0x1e1a <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e06:	80 91 e8 00 	lds	r24, 0x00E8
    1e0a:	87 7f       	andi	r24, 0xF7	; 247
    1e0c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e10:	80 91 eb 00 	lds	r24, 0x00EB
    1e14:	80 62       	ori	r24, 0x20	; 32
    1e16:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1e1a:	aa 96       	adiw	r28, 0x2a	; 42
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	08 95       	ret

00001e2e <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1e2e:	90 93 4e 01 	sts	0x014E, r25
    1e32:	80 93 4d 01 	sts	0x014D, r24
    1e36:	08 95       	ret

00001e38 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1e38:	e0 91 4d 01 	lds	r30, 0x014D
    1e3c:	f0 91 4e 01 	lds	r31, 0x014E
    1e40:	30 97       	sbiw	r30, 0x00	; 0
    1e42:	21 f0       	breq	.+8      	; 0x1e4c <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1e44:	01 90       	ld	r0, Z+
    1e46:	f0 81       	ld	r31, Z
    1e48:	e0 2d       	mov	r30, r0
    1e4a:	09 94       	ijmp
}
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	08 95       	ret

00001e50 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	8c 01       	movw	r16, r24
    if (!driver) return;
    1e5c:	e0 91 4d 01 	lds	r30, 0x014D
    1e60:	f0 91 4e 01 	lds	r31, 0x014E
    1e64:	30 97       	sbiw	r30, 0x00	; 0
    1e66:	99 f1       	breq	.+102    	; 0x1ece <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    1e68:	02 80       	ldd	r0, Z+2	; 0x02
    1e6a:	f3 81       	ldd	r31, Z+3	; 0x03
    1e6c:	e0 2d       	mov	r30, r0
    1e6e:	09 95       	icall

    if (debug_keyboard) {
    1e70:	80 91 9f 01 	lds	r24, 0x019F
    1e74:	82 ff       	sbrs	r24, 2
    1e76:	2b c0       	rjmp	.+86     	; 0x1ece <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    1e78:	80 ff       	sbrs	r24, 0
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <host_keyboard_send+0x34>
    1e7c:	80 ef       	ldi	r24, 0xF0	; 240
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    1e84:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1e86:	88 e0       	ldi	r24, 0x08	; 8
    1e88:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1e8a:	0a ee       	ldi	r16, 0xEA	; 234
    1e8c:	12 e0       	ldi	r17, 0x02	; 2
    1e8e:	80 91 9f 01 	lds	r24, 0x019F
    1e92:	80 ff       	sbrs	r24, 0
    1e94:	0b c0       	rjmp	.+22     	; 0x1eac <host_keyboard_send+0x5c>
    1e96:	88 81       	ld	r24, Y
    1e98:	1f 92       	push	r1
    1e9a:	8f 93       	push	r24
    1e9c:	1f 93       	push	r17
    1e9e:	0f 93       	push	r16
    1ea0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	fa 94       	dec	r15
    1eae:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1eb0:	f1 10       	cpse	r15, r1
    1eb2:	ed cf       	rjmp	.-38     	; 0x1e8e <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1eb4:	80 91 9f 01 	lds	r24, 0x019F
    1eb8:	80 ff       	sbrs	r24, 0
    1eba:	09 c0       	rjmp	.+18     	; 0x1ece <host_keyboard_send+0x7e>
    1ebc:	88 ee       	ldi	r24, 0xE8	; 232
    1ebe:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1eca:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <xputs>
    }
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ff 90       	pop	r15
    1ed8:	08 95       	ret

00001eda <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    1eda:	e0 91 4d 01 	lds	r30, 0x014D
    1ede:	f0 91 4e 01 	lds	r31, 0x014E
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	21 f0       	breq	.+8      	; 0x1eee <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    1ee6:	04 80       	ldd	r0, Z+4	; 0x04
    1ee8:	f5 81       	ldd	r31, Z+5	; 0x05
    1eea:	e0 2d       	mov	r30, r0
    1eec:	09 94       	ijmp
    1eee:	08 95       	ret

00001ef0 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1ef0:	20 91 4b 01 	lds	r18, 0x014B
    1ef4:	30 91 4c 01 	lds	r19, 0x014C
    1ef8:	82 17       	cp	r24, r18
    1efa:	93 07       	cpc	r25, r19
    1efc:	71 f0       	breq	.+28     	; 0x1f1a <host_system_send+0x2a>
    last_system_report = report;
    1efe:	90 93 4c 01 	sts	0x014C, r25
    1f02:	80 93 4b 01 	sts	0x014B, r24

    if (!driver) return;
    1f06:	e0 91 4d 01 	lds	r30, 0x014D
    1f0a:	f0 91 4e 01 	lds	r31, 0x014E
    1f0e:	30 97       	sbiw	r30, 0x00	; 0
    1f10:	21 f0       	breq	.+8      	; 0x1f1a <host_system_send+0x2a>
    (*driver->send_system)(report);
    1f12:	06 80       	ldd	r0, Z+6	; 0x06
    1f14:	f7 81       	ldd	r31, Z+7	; 0x07
    1f16:	e0 2d       	mov	r30, r0
    1f18:	09 94       	ijmp
    1f1a:	08 95       	ret

00001f1c <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    1f1c:	20 91 49 01 	lds	r18, 0x0149
    1f20:	30 91 4a 01 	lds	r19, 0x014A
    1f24:	82 17       	cp	r24, r18
    1f26:	93 07       	cpc	r25, r19
    1f28:	71 f0       	breq	.+28     	; 0x1f46 <host_consumer_send+0x2a>
    last_consumer_report = report;
    1f2a:	90 93 4a 01 	sts	0x014A, r25
    1f2e:	80 93 49 01 	sts	0x0149, r24

    if (!driver) return;
    1f32:	e0 91 4d 01 	lds	r30, 0x014D
    1f36:	f0 91 4e 01 	lds	r31, 0x014E
    1f3a:	30 97       	sbiw	r30, 0x00	; 0
    1f3c:	21 f0       	breq	.+8      	; 0x1f46 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    1f3e:	00 84       	ldd	r0, Z+8	; 0x08
    1f40:	f1 85       	ldd	r31, Z+9	; 0x09
    1f42:	e0 2d       	mov	r30, r0
    1f44:	09 94       	ijmp
    1f46:	08 95       	ret

00001f48 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    1f48:	08 95       	ret

00001f4a <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    1f4a:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <matrix_setup>

00001f4e <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1f4e:	0e 94 af 1b 	call	0x375e	; 0x375e <timer_init>
    matrix_init();
    1f52:	0e 94 57 06 	call	0xcae	; 0xcae <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    1f56:	0c 94 c8 1d 	jmp	0x3b90	; 0x3b90 <bootmagic>

00001f5a <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1f5a:	cf 92       	push	r12
    1f5c:	df 92       	push	r13
    1f5e:	ef 92       	push	r14
    1f60:	ff 92       	push	r15
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <keyboard_task+0x12>
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <keyboard_task+0x14>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <keyboard_task+0x16>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1f74:	0e 94 90 06 	call	0xd20	; 0xd20 <matrix_scan>
    1f78:	30 e5       	ldi	r19, 0x50	; 80
    1f7a:	e3 2e       	mov	r14, r19
    1f7c:	31 e0       	ldi	r19, 0x01	; 1
    1f7e:	f3 2e       	mov	r15, r19
    1f80:	00 e0       	ldi	r16, 0x00	; 0
    1f82:	10 e0       	ldi	r17, 0x00	; 0
    1f84:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1f86:	80 2f       	mov	r24, r16
    1f88:	0e 94 3e 07 	call	0xe7c	; 0xe7c <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    1f8c:	f7 01       	movw	r30, r14
    1f8e:	d1 90       	ld	r13, Z+
    1f90:	7f 01       	movw	r14, r30
    1f92:	d8 26       	eor	r13, r24
        if (matrix_change) {
    1f94:	b1 f4       	brne	.+44     	; 0x1fc2 <keyboard_task+0x68>
    1f96:	0f 5f       	subi	r16, 0xFF	; 255
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1f9a:	04 30       	cpi	r16, 0x04	; 4
    1f9c:	11 05       	cpc	r17, r1
    1f9e:	91 f7       	brne	.-28     	; 0x1f84 <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	8a 83       	std	Y+2, r24	; 0x02
    1fa6:	1b 82       	std	Y+3, r1	; 0x03
    1fa8:	0e 94 b8 1b 	call	0x3770	; 0x3770 <timer_read>
    1fac:	81 60       	ori	r24, 0x01	; 1
    1fae:	78 2f       	mov	r23, r24
    1fb0:	9d 83       	std	Y+5, r25	; 0x05
    1fb2:	8c 83       	std	Y+4, r24	; 0x04
    1fb4:	49 81       	ldd	r20, Y+1	; 0x01
    1fb6:	5a 81       	ldd	r21, Y+2	; 0x02
    1fb8:	6b 81       	ldd	r22, Y+3	; 0x03
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <action_exec>
    1fc0:	48 c0       	rjmp	.+144    	; 0x2052 <keyboard_task+0xf8>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1fc2:	90 91 9f 01 	lds	r25, 0x019F
    1fc6:	91 ff       	sbrs	r25, 1
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <keyboard_task+0x78>
    1fca:	8e 83       	std	Y+6, r24	; 0x06
    1fcc:	0e 94 44 07 	call	0xe88	; 0xe88 <matrix_print>
    1fd0:	8e 81       	ldd	r24, Y+6	; 0x06
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1fd6:	4d 2d       	mov	r20, r13
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	92 2f       	mov	r25, r18
    1fdc:	ba 01       	movw	r22, r20
    1fde:	02 2e       	mov	r0, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <keyboard_task+0x8c>
    1fe2:	75 95       	asr	r23
    1fe4:	67 95       	ror	r22
    1fe6:	0a 94       	dec	r0
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <keyboard_task+0x88>
    1fea:	60 ff       	sbrs	r22, 0
    1fec:	2c c0       	rjmp	.+88     	; 0x2046 <keyboard_task+0xec>
                    keyevent_t e = (keyevent_t){
    1fee:	29 83       	std	Y+1, r18	; 0x01
    1ff0:	ca 82       	std	Y+2, r12	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    1ff2:	ee 24       	eor	r14, r14
    1ff4:	e3 94       	inc	r14
    1ff6:	f1 2c       	mov	r15, r1
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <keyboard_task+0xa4>
    1ffa:	ee 0c       	add	r14, r14
    1ffc:	ff 1c       	adc	r15, r15
    1ffe:	9a 95       	dec	r25
    2000:	e2 f7       	brpl	.-8      	; 0x1ffa <keyboard_task+0xa0>
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	8e 21       	and	r24, r14
    2006:	9f 21       	and	r25, r15
    2008:	21 e0       	ldi	r18, 0x01	; 1
    200a:	89 2b       	or	r24, r25
    200c:	09 f4       	brne	.+2      	; 0x2010 <keyboard_task+0xb6>
    200e:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    2010:	2b 83       	std	Y+3, r18	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2012:	0e 94 b8 1b 	call	0x3770	; 0x3770 <timer_read>
    2016:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    2018:	78 2f       	mov	r23, r24
    201a:	9d 83       	std	Y+5, r25	; 0x05
    201c:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    201e:	49 81       	ldd	r20, Y+1	; 0x01
    2020:	5a 81       	ldd	r21, Y+2	; 0x02
    2022:	6b 81       	ldd	r22, Y+3	; 0x03
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <action_exec>
                    hook_matrix_change(e);
    202a:	49 81       	ldd	r20, Y+1	; 0x01
    202c:	5a 81       	ldd	r21, Y+2	; 0x02
    202e:	6b 81       	ldd	r22, Y+3	; 0x03
    2030:	7c 81       	ldd	r23, Y+4	; 0x04
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	0e 94 35 1b 	call	0x366a	; 0x366a <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2038:	f8 01       	movw	r30, r16
    203a:	e0 5b       	subi	r30, 0xB0	; 176
    203c:	fe 4f       	sbci	r31, 0xFE	; 254
    203e:	80 81       	ld	r24, Z
    2040:	8e 25       	eor	r24, r14
    2042:	80 83       	st	Z, r24
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <keyboard_task+0xf8>
    2046:	2f 5f       	subi	r18, 0xFF	; 255
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    204a:	27 30       	cpi	r18, 0x07	; 7
    204c:	31 05       	cpc	r19, r1
    204e:	29 f6       	brne	.-118    	; 0x1fda <keyboard_task+0x80>
    2050:	a2 cf       	rjmp	.-188    	; 0x1f96 <keyboard_task+0x3c>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    2052:	0e 94 34 1b 	call	0x3668	; 0x3668 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2056:	0e 94 48 21 	call	0x4290	; 0x4290 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    205a:	10 91 4f 01 	lds	r17, 0x014F
    205e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    2062:	18 17       	cp	r17, r24
    2064:	41 f1       	breq	.+80     	; 0x20b6 <keyboard_task+0x15c>
        led_status = host_keyboard_leds();
    2066:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    206a:	80 93 4f 01 	sts	0x014F, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    206e:	90 91 9f 01 	lds	r25, 0x019F
    2072:	92 ff       	sbrs	r25, 2
    2074:	0e c0       	rjmp	.+28     	; 0x2092 <keyboard_task+0x138>
    2076:	90 ff       	sbrs	r25, 0
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <keyboard_task+0x138>
    207a:	1f 92       	push	r1
    207c:	8f 93       	push	r24
    207e:	82 e0       	ldi	r24, 0x02	; 2
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	9f 93       	push	r25
    2084:	8f 93       	push	r24
    2086:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2092:	80 91 4f 01 	lds	r24, 0x014F
    }
}
    2096:	26 96       	adiw	r28, 0x06	; 6
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	ef 90       	pop	r14
    20ae:	df 90       	pop	r13
    20b0:	cf 90       	pop	r12

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    20b2:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <hook_keyboard_leds_change>
    }
}
    20b6:	26 96       	adiw	r28, 0x06	; 6
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	08 95       	ret

000020d4 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    20d4:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <led_set>

000020d8 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	2b 97       	sbiw	r28, 0x0b	; 11
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	4f 83       	std	Y+7, r20	; 0x07
    20ee:	58 87       	std	Y+8, r21	; 0x08
    20f0:	69 87       	std	Y+9, r22	; 0x09
    20f2:	7a 87       	std	Y+10, r23	; 0x0a
    20f4:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    20f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20fa:	89 2b       	or	r24, r25
    20fc:	31 f0       	breq	.+12     	; 0x210a <__stack+0xb>
    20fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2100:	11 f0       	breq	.+4      	; 0x2106 <__stack+0x7>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	03 c0       	rjmp	.+6      	; 0x210c <__stack+0xd>
    2106:	4f 3f       	cpi	r20, 0xFF	; 255
    2108:	e1 f7       	brne	.-8      	; 0x2102 <__stack+0x3>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    210c:	81 11       	cpse	r24, r1
    210e:	07 c0       	rjmp	.+14     	; 0x211e <__stack+0x1f>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2110:	4f 81       	ldd	r20, Y+7	; 0x07
    2112:	58 85       	ldd	r21, Y+8	; 0x08
    2114:	69 85       	ldd	r22, Y+9	; 0x09
    2116:	7a 85       	ldd	r23, Y+10	; 0x0a
    2118:	8b 85       	ldd	r24, Y+11	; 0x0b
    211a:	0e 94 35 1b 	call	0x366a	; 0x366a <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    211e:	de 01       	movw	r26, r28
    2120:	11 96       	adiw	r26, 0x01	; 1
    2122:	86 e0       	ldi	r24, 0x06	; 6
    2124:	fd 01       	movw	r30, r26
    2126:	11 92       	st	Z+, r1
    2128:	8a 95       	dec	r24
    212a:	e9 f7       	brne	.-6      	; 0x2126 <__stack+0x27>
    212c:	85 e0       	ldi	r24, 0x05	; 5
    212e:	fe 01       	movw	r30, r28
    2130:	37 96       	adiw	r30, 0x07	; 7
    2132:	01 90       	ld	r0, Z+
    2134:	0d 92       	st	X+, r0
    2136:	8a 95       	dec	r24
    2138:	e1 f7       	brne	.-8      	; 0x2132 <__stack+0x33>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    213a:	49 81       	ldd	r20, Y+1	; 0x01
    213c:	5a 81       	ldd	r21, Y+2	; 0x02
    213e:	6b 81       	ldd	r22, Y+3	; 0x03
    2140:	7c 81       	ldd	r23, Y+4	; 0x04
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    214a:	2b 96       	adiw	r28, 0x0b	; 11
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    215c:	cf 93       	push	r28
    215e:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2160:	88 23       	and	r24, r24
    2162:	09 f4       	brne	.+2      	; 0x2166 <register_code+0xa>
    2164:	cc c0       	rjmp	.+408    	; 0x22fe <register_code+0x1a2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2166:	82 38       	cpi	r24, 0x82	; 130
    2168:	59 f4       	brne	.+22     	; 0x2180 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    216a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    216e:	81 fd       	sbrc	r24, 1
    2170:	c6 c0       	rjmp	.+396    	; 0x22fe <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    2172:	89 e3       	ldi	r24, 0x39	; 57
    2174:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <add_key>
        send_keyboard_report();
    2178:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    217c:	89 e3       	ldi	r24, 0x39	; 57
    217e:	0c c0       	rjmp	.+24     	; 0x2198 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2180:	83 38       	cpi	r24, 0x83	; 131
    2182:	79 f4       	brne	.+30     	; 0x21a2 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2184:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    2188:	80 fd       	sbrc	r24, 0
    218a:	b9 c0       	rjmp	.+370    	; 0x22fe <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    218c:	83 e5       	ldi	r24, 0x53	; 83
    218e:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <add_key>
        send_keyboard_report();
    2192:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2196:	83 e5       	ldi	r24, 0x53	; 83
    2198:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    219c:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    219e:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    21a2:	84 38       	cpi	r24, 0x84	; 132
    21a4:	59 f4       	brne	.+22     	; 0x21bc <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    21a6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    21aa:	82 fd       	sbrc	r24, 2
    21ac:	a8 c0       	rjmp	.+336    	; 0x22fe <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    21ae:	87 e4       	ldi	r24, 0x47	; 71
    21b0:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <add_key>
        send_keyboard_report();
    21b4:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    21b8:	87 e4       	ldi	r24, 0x47	; 71
    21ba:	ee cf       	rjmp	.-36     	; 0x2198 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    21bc:	8c ef       	ldi	r24, 0xFC	; 252
    21be:	8c 0f       	add	r24, r28
    21c0:	81 3a       	cpi	r24, 0xA1	; 161
    21c2:	48 f4       	brcc	.+18     	; 0x21d6 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    21c4:	8c 2f       	mov	r24, r28
    21c6:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <command_proc>
    21ca:	81 11       	cpse	r24, r1
    21cc:	98 c0       	rjmp	.+304    	; 0x22fe <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    21ce:	8c 2f       	mov	r24, r28
    21d0:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <add_key>
    21d4:	e3 cf       	rjmp	.-58     	; 0x219c <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    21d6:	80 e2       	ldi	r24, 0x20	; 32
    21d8:	8c 0f       	add	r24, r28
    21da:	88 30       	cpi	r24, 0x08	; 8
    21dc:	48 f4       	brcc	.+18     	; 0x21f0 <register_code+0x94>
        add_mods(MOD_BIT(code));
    21de:	c7 70       	andi	r28, 0x07	; 7
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	01 c0       	rjmp	.+2      	; 0x21e6 <register_code+0x8a>
    21e4:	88 0f       	add	r24, r24
    21e6:	ca 95       	dec	r28
    21e8:	ea f7       	brpl	.-6      	; 0x21e4 <register_code+0x88>
    21ea:	0e 94 a0 1a 	call	0x3540	; 0x3540 <add_mods>
    21ee:	d6 cf       	rjmp	.-84     	; 0x219c <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    21f0:	8b e5       	ldi	r24, 0x5B	; 91
    21f2:	8c 0f       	add	r24, r28
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	78 f4       	brcc	.+30     	; 0x2216 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    21f8:	c5 3a       	cpi	r28, 0xA5	; 165
    21fa:	29 f0       	breq	.+10     	; 0x2206 <register_code+0xaa>
    21fc:	c6 3a       	cpi	r28, 0xA6	; 166
    21fe:	31 f4       	brne	.+12     	; 0x220c <register_code+0xb0>
    2200:	82 e8       	ldi	r24, 0x82	; 130
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	05 c0       	rjmp	.+10     	; 0x2210 <register_code+0xb4>
    2206:	81 e8       	ldi	r24, 0x81	; 129
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <register_code+0xb4>
    220c:	83 e8       	ldi	r24, 0x83	; 131
    220e:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2210:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2212:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2216:	88 e5       	ldi	r24, 0x58	; 88
    2218:	8c 0f       	add	r24, r28
    221a:	85 31       	cpi	r24, 0x15	; 21
    221c:	08 f0       	brcs	.+2      	; 0x2220 <register_code+0xc4>
    221e:	6f c0       	rjmp	.+222    	; 0x22fe <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2220:	c8 3a       	cpi	r28, 0xA8	; 168
    2222:	61 f1       	breq	.+88     	; 0x227c <register_code+0x120>
    2224:	c9 3a       	cpi	r28, 0xA9	; 169
    2226:	69 f1       	breq	.+90     	; 0x2282 <register_code+0x126>
    2228:	ca 3a       	cpi	r28, 0xAA	; 170
    222a:	71 f1       	breq	.+92     	; 0x2288 <register_code+0x12c>
    222c:	cb 3a       	cpi	r28, 0xAB	; 171
    222e:	79 f1       	breq	.+94     	; 0x228e <register_code+0x132>
    2230:	cc 3a       	cpi	r28, 0xAC	; 172
    2232:	81 f1       	breq	.+96     	; 0x2294 <register_code+0x138>
    2234:	cd 3a       	cpi	r28, 0xAD	; 173
    2236:	89 f1       	breq	.+98     	; 0x229a <register_code+0x13e>
    2238:	ce 3a       	cpi	r28, 0xAE	; 174
    223a:	91 f1       	breq	.+100    	; 0x22a0 <register_code+0x144>
    223c:	cf 3a       	cpi	r28, 0xAF	; 175
    223e:	99 f1       	breq	.+102    	; 0x22a6 <register_code+0x14a>
    2240:	c1 3b       	cpi	r28, 0xB1	; 177
    2242:	a1 f1       	breq	.+104    	; 0x22ac <register_code+0x150>
    2244:	c0 3b       	cpi	r28, 0xB0	; 176
    2246:	a9 f1       	breq	.+106    	; 0x22b2 <register_code+0x156>
    2248:	c2 3b       	cpi	r28, 0xB2	; 178
    224a:	b1 f1       	breq	.+108    	; 0x22b8 <register_code+0x15c>
    224c:	c3 3b       	cpi	r28, 0xB3	; 179
    224e:	b9 f1       	breq	.+110    	; 0x22be <register_code+0x162>
    2250:	c4 3b       	cpi	r28, 0xB4	; 180
    2252:	c1 f1       	breq	.+112    	; 0x22c4 <register_code+0x168>
    2254:	c5 3b       	cpi	r28, 0xB5	; 181
    2256:	c9 f1       	breq	.+114    	; 0x22ca <register_code+0x16e>
    2258:	c6 3b       	cpi	r28, 0xB6	; 182
    225a:	d1 f1       	breq	.+116    	; 0x22d0 <register_code+0x174>
    225c:	c7 3b       	cpi	r28, 0xB7	; 183
    225e:	d9 f1       	breq	.+118    	; 0x22d6 <register_code+0x17a>
    2260:	c8 3b       	cpi	r28, 0xB8	; 184
    2262:	e1 f1       	breq	.+120    	; 0x22dc <register_code+0x180>
    2264:	c9 3b       	cpi	r28, 0xB9	; 185
    2266:	e9 f1       	breq	.+122    	; 0x22e2 <register_code+0x186>
    2268:	ca 3b       	cpi	r28, 0xBA	; 186
    226a:	f1 f1       	breq	.+124    	; 0x22e8 <register_code+0x18c>
    226c:	cb 3b       	cpi	r28, 0xBB	; 187
    226e:	f9 f1       	breq	.+126    	; 0x22ee <register_code+0x192>
    2270:	cc 3b       	cpi	r28, 0xBC	; 188
    2272:	09 f0       	breq	.+2      	; 0x2276 <register_code+0x11a>
    2274:	3f c0       	rjmp	.+126    	; 0x22f4 <register_code+0x198>
    2276:	8a e2       	ldi	r24, 0x2A	; 42
    2278:	92 e0       	ldi	r25, 0x02	; 2
    227a:	3e c0       	rjmp	.+124    	; 0x22f8 <register_code+0x19c>
    227c:	82 ee       	ldi	r24, 0xE2	; 226
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	3b c0       	rjmp	.+118    	; 0x22f8 <register_code+0x19c>
    2282:	89 ee       	ldi	r24, 0xE9	; 233
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	38 c0       	rjmp	.+112    	; 0x22f8 <register_code+0x19c>
    2288:	8a ee       	ldi	r24, 0xEA	; 234
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	35 c0       	rjmp	.+106    	; 0x22f8 <register_code+0x19c>
    228e:	85 eb       	ldi	r24, 0xB5	; 181
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	32 c0       	rjmp	.+100    	; 0x22f8 <register_code+0x19c>
    2294:	86 eb       	ldi	r24, 0xB6	; 182
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	2f c0       	rjmp	.+94     	; 0x22f8 <register_code+0x19c>
    229a:	83 eb       	ldi	r24, 0xB3	; 179
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	2c c0       	rjmp	.+88     	; 0x22f8 <register_code+0x19c>
    22a0:	84 eb       	ldi	r24, 0xB4	; 180
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	29 c0       	rjmp	.+82     	; 0x22f8 <register_code+0x19c>
    22a6:	87 eb       	ldi	r24, 0xB7	; 183
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	26 c0       	rjmp	.+76     	; 0x22f8 <register_code+0x19c>
    22ac:	8c ec       	ldi	r24, 0xCC	; 204
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	23 c0       	rjmp	.+70     	; 0x22f8 <register_code+0x19c>
    22b2:	8d ec       	ldi	r24, 0xCD	; 205
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	20 c0       	rjmp	.+64     	; 0x22f8 <register_code+0x19c>
    22b8:	83 e8       	ldi	r24, 0x83	; 131
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	1d c0       	rjmp	.+58     	; 0x22f8 <register_code+0x19c>
    22be:	8a e8       	ldi	r24, 0x8A	; 138
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	1a c0       	rjmp	.+52     	; 0x22f8 <register_code+0x19c>
    22c4:	82 e9       	ldi	r24, 0x92	; 146
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	17 c0       	rjmp	.+46     	; 0x22f8 <register_code+0x19c>
    22ca:	84 e9       	ldi	r24, 0x94	; 148
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <register_code+0x19c>
    22d0:	81 e2       	ldi	r24, 0x21	; 33
    22d2:	92 e0       	ldi	r25, 0x02	; 2
    22d4:	11 c0       	rjmp	.+34     	; 0x22f8 <register_code+0x19c>
    22d6:	83 e2       	ldi	r24, 0x23	; 35
    22d8:	92 e0       	ldi	r25, 0x02	; 2
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <register_code+0x19c>
    22dc:	84 e2       	ldi	r24, 0x24	; 36
    22de:	92 e0       	ldi	r25, 0x02	; 2
    22e0:	0b c0       	rjmp	.+22     	; 0x22f8 <register_code+0x19c>
    22e2:	85 e2       	ldi	r24, 0x25	; 37
    22e4:	92 e0       	ldi	r25, 0x02	; 2
    22e6:	08 c0       	rjmp	.+16     	; 0x22f8 <register_code+0x19c>
    22e8:	86 e2       	ldi	r24, 0x26	; 38
    22ea:	92 e0       	ldi	r25, 0x02	; 2
    22ec:	05 c0       	rjmp	.+10     	; 0x22f8 <register_code+0x19c>
    22ee:	87 e2       	ldi	r24, 0x27	; 39
    22f0:	92 e0       	ldi	r25, 0x02	; 2
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <register_code+0x19c>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    22f8:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    22fa:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <host_consumer_send>
    }
}
    22fe:	cf 91       	pop	r28
    2300:	08 95       	ret

00002302 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2302:	88 23       	and	r24, r24
    2304:	09 f4       	brne	.+2      	; 0x2308 <unregister_code+0x6>
    2306:	4b c0       	rjmp	.+150    	; 0x239e <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2308:	82 38       	cpi	r24, 0x82	; 130
    230a:	59 f4       	brne	.+22     	; 0x2322 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    230c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    2310:	81 ff       	sbrs	r24, 1
    2312:	45 c0       	rjmp	.+138    	; 0x239e <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2314:	89 e3       	ldi	r24, 0x39	; 57
    2316:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <add_key>
        send_keyboard_report();
    231a:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    231e:	89 e3       	ldi	r24, 0x39	; 57
    2320:	0c c0       	rjmp	.+24     	; 0x233a <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2322:	83 38       	cpi	r24, 0x83	; 131
    2324:	71 f4       	brne	.+28     	; 0x2342 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2326:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    232a:	80 ff       	sbrs	r24, 0
    232c:	38 c0       	rjmp	.+112    	; 0x239e <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    232e:	83 e5       	ldi	r24, 0x53	; 83
    2330:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <add_key>
        send_keyboard_report();
    2334:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2338:	83 e5       	ldi	r24, 0x53	; 83
    233a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <del_key>
        send_keyboard_report();
    233e:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2342:	84 38       	cpi	r24, 0x84	; 132
    2344:	59 f4       	brne	.+22     	; 0x235c <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2346:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    234a:	82 ff       	sbrs	r24, 2
    234c:	28 c0       	rjmp	.+80     	; 0x239e <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    234e:	87 e4       	ldi	r24, 0x47	; 71
    2350:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <add_key>
        send_keyboard_report();
    2354:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2358:	87 e4       	ldi	r24, 0x47	; 71
    235a:	ef cf       	rjmp	.-34     	; 0x233a <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    235c:	9c ef       	ldi	r25, 0xFC	; 252
    235e:	98 0f       	add	r25, r24
    2360:	91 3a       	cpi	r25, 0xA1	; 161
    2362:	58 f3       	brcs	.-42     	; 0x233a <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2364:	90 e2       	ldi	r25, 0x20	; 32
    2366:	98 0f       	add	r25, r24
    2368:	98 30       	cpi	r25, 0x08	; 8
    236a:	50 f4       	brcc	.+20     	; 0x2380 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    236c:	87 70       	andi	r24, 0x07	; 7
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <unregister_code+0x72>
    2372:	99 0f       	add	r25, r25
    2374:	8a 95       	dec	r24
    2376:	ea f7       	brpl	.-6      	; 0x2372 <unregister_code+0x70>
    2378:	89 2f       	mov	r24, r25
    237a:	0e 94 a6 1a 	call	0x354c	; 0x354c <del_mods>
    237e:	df cf       	rjmp	.-66     	; 0x233e <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2380:	9b e5       	ldi	r25, 0x5B	; 91
    2382:	98 0f       	add	r25, r24
    2384:	93 30       	cpi	r25, 0x03	; 3
    2386:	20 f4       	brcc	.+8      	; 0x2390 <unregister_code+0x8e>
        host_system_send(0);
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2390:	88 5a       	subi	r24, 0xA8	; 168
    2392:	85 31       	cpi	r24, 0x15	; 21
    2394:	20 f4       	brcc	.+8      	; 0x239e <unregister_code+0x9c>
        host_consumer_send(0);
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <host_consumer_send>
    239e:	08 95       	ret

000023a0 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    23a0:	88 23       	and	r24, r24
    23a2:	21 f0       	breq	.+8      	; 0x23ac <register_mods+0xc>
        add_mods(mods);
    23a4:	0e 94 a0 1a 	call	0x3540	; 0x3540 <add_mods>
        send_keyboard_report();
    23a8:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <send_keyboard_report>
    23ac:	08 95       	ret

000023ae <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    23ae:	88 23       	and	r24, r24
    23b0:	21 f0       	breq	.+8      	; 0x23ba <unregister_mods+0xc>
        del_mods(mods);
    23b2:	0e 94 a6 1a 	call	0x354c	; 0x354c <del_mods>
        send_keyboard_report();
    23b6:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <send_keyboard_report>
    23ba:	08 95       	ret

000023bc <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	28 97       	sbiw	r28, 0x08	; 8
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    23de:	85 e0       	ldi	r24, 0x05	; 5
    23e0:	f8 01       	movw	r30, r16
    23e2:	de 01       	movw	r26, r28
    23e4:	11 96       	adiw	r26, 0x01	; 1
    23e6:	01 90       	ld	r0, Z+
    23e8:	0d 92       	st	X+, r0
    23ea:	8a 95       	dec	r24
    23ec:	e1 f7       	brne	.-8      	; 0x23e6 <process_action+0x2a>
    23ee:	f8 01       	movw	r30, r16
    23f0:	40 81       	ld	r20, Z
    23f2:	31 81       	ldd	r19, Z+1	; 0x01
    23f4:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    23f6:	25 81       	ldd	r18, Z+5	; 0x05
    23f8:	22 95       	swap	r18
    23fa:	2f 70       	andi	r18, 0x0F	; 15
    23fc:	83 81       	ldd	r24, Z+3	; 0x03
    23fe:	94 81       	ldd	r25, Z+4	; 0x04
    2400:	89 2b       	or	r24, r25
    2402:	31 f0       	breq	.+12     	; 0x2410 <process_action+0x54>
    2404:	3f 3f       	cpi	r19, 0xFF	; 255
    2406:	31 f4       	brne	.+12     	; 0x2414 <process_action+0x58>
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	4f 3f       	cpi	r20, 0xFF	; 255
    240c:	19 f4       	brne	.+6      	; 0x2414 <process_action+0x58>
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <process_action+0x5a>
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <process_action+0x5a>
    2414:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2416:	80 fd       	sbrc	r24, 0
    2418:	cf c2       	rjmp	.+1438   	; 0x29b8 <process_action+0x5fc>

    action_t action = layer_switch_get_action(event.key);
    241a:	49 83       	std	Y+1, r20	; 0x01
    241c:	3a 83       	std	Y+2, r19	; 0x02
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	2f 83       	std	Y+7, r18	; 0x07
    2424:	0e 94 19 1a 	call	0x3432	; 0x3432 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	88 87       	std	Y+8, r24	; 0x08
    242c:	0e 94 18 1a 	call	0x3430	; 0x3430 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2430:	0e 94 20 19 	call	0x3240	; 0x3240 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2434:	4e 81       	ldd	r20, Y+6	; 0x06
    2436:	e4 2f       	mov	r30, r20
    2438:	e2 95       	swap	r30
    243a:	ef 70       	andi	r30, 0x0F	; 15
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	ea 5a       	subi	r30, 0xAA	; 170
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	2f 81       	ldd	r18, Y+7	; 0x07
    2444:	68 85       	ldd	r22, Y+8	; 0x08
    2446:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    244a:	84 2f       	mov	r24, r20
    244c:	80 7f       	andi	r24, 0xF0	; 240
    244e:	14 2f       	mov	r17, r20
    2450:	1f 70       	andi	r17, 0x0F	; 15
    2452:	88 23       	and	r24, r24
    2454:	11 f0       	breq	.+4      	; 0x245a <process_action+0x9e>
    2456:	12 95       	swap	r17
    2458:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    245a:	ff 20       	and	r15, r15
    245c:	59 f0       	breq	.+22     	; 0x2474 <process_action+0xb8>
                    if (mods) {
    245e:	11 23       	and	r17, r17
    2460:	09 f4       	brne	.+2      	; 0x2464 <process_action+0xa8>
    2462:	5f c2       	rjmp	.+1214   	; 0x2922 <process_action+0x566>
                        add_weak_mods(mods);
    2464:	81 2f       	mov	r24, r17
    2466:	68 87       	std	Y+8, r22	; 0x08
    2468:	0e 94 b3 1a 	call	0x3566	; 0x3566 <add_weak_mods>
                        send_keyboard_report();
    246c:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
    2470:	68 85       	ldd	r22, Y+8	; 0x08
    2472:	57 c2       	rjmp	.+1198   	; 0x2922 <process_action+0x566>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2474:	86 2f       	mov	r24, r22
    2476:	0e 94 81 11 	call	0x2302	; 0x2302 <unregister_code>
                    if (mods) {
    247a:	11 23       	and	r17, r17
    247c:	09 f4       	brne	.+2      	; 0x2480 <process_action+0xc4>
    247e:	9c c2       	rjmp	.+1336   	; 0x29b8 <process_action+0x5fc>
                        del_weak_mods(mods);
    2480:	81 2f       	mov	r24, r17
    2482:	0e 94 b9 1a 	call	0x3572	; 0x3572 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2486:	28 96       	adiw	r28, 0x08	; 8
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	ff 90       	pop	r15
    249c:	ef 90       	pop	r14
    249e:	df 90       	pop	r13
    24a0:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    24a2:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    24a6:	84 2f       	mov	r24, r20
    24a8:	80 7f       	andi	r24, 0xF0	; 240
    24aa:	94 2f       	mov	r25, r20
    24ac:	9f 70       	andi	r25, 0x0F	; 15
    24ae:	e9 2e       	mov	r14, r25
    24b0:	80 32       	cpi	r24, 0x20	; 32
    24b2:	19 f0       	breq	.+6      	; 0x24ba <process_action+0xfe>
    24b4:	e2 94       	swap	r14
    24b6:	80 ef       	ldi	r24, 0xF0	; 240
    24b8:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    24ba:	66 23       	and	r22, r22
    24bc:	19 f0       	breq	.+6      	; 0x24c4 <process_action+0x108>
    24be:	61 30       	cpi	r22, 0x01	; 1
    24c0:	01 f1       	breq	.+64     	; 0x2502 <process_action+0x146>
    24c2:	29 c0       	rjmp	.+82     	; 0x2516 <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    24c4:	ff 20       	and	r15, r15
    24c6:	a9 f0       	breq	.+42     	; 0x24f2 <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    24c8:	8e 2d       	mov	r24, r14
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    24ca:	22 23       	and	r18, r18
    24cc:	49 f1       	breq	.+82     	; 0x2520 <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    24ce:	21 30       	cpi	r18, 0x01	; 1
    24d0:	39 f5       	brne	.+78     	; 0x2520 <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    24d2:	28 96       	adiw	r28, 0x08	; 8
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	df 90       	pop	r13
    24ec:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    24ee:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    24f2:	22 23       	and	r18, r18
    24f4:	19 f0       	breq	.+6      	; 0x24fc <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    24f6:	21 30       	cpi	r18, 0x01	; 1
    24f8:	09 f4       	brne	.+2      	; 0x24fc <process_action+0x140>
    24fa:	5e c2       	rjmp	.+1212   	; 0x29b8 <process_action+0x5fc>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    24fc:	0e 94 c6 1a 	call	0x358c	; 0x358c <clear_oneshot_mods>
    2500:	2c c0       	rjmp	.+88     	; 0x255a <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2502:	ff 20       	and	r15, r15
    2504:	e9 f0       	breq	.+58     	; 0x2540 <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    2506:	26 30       	cpi	r18, 0x06	; 6
    2508:	08 f0       	brcs	.+2      	; 0x250c <process_action+0x150>
    250a:	56 c2       	rjmp	.+1196   	; 0x29b8 <process_action+0x5fc>
                                if (mods & get_mods()) {
    250c:	0e 94 9d 1a 	call	0x353a	; 0x353a <get_mods>
    2510:	8e 21       	and	r24, r14
    2512:	29 f0       	breq	.+10     	; 0x251e <process_action+0x162>
    2514:	22 c0       	rjmp	.+68     	; 0x255a <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2516:	ff 20       	and	r15, r15
    2518:	f1 f0       	breq	.+60     	; 0x2556 <process_action+0x19a>
                            if (tap_count > 0) {
    251a:	21 11       	cpse	r18, r1
    251c:	15 c0       	rjmp	.+42     	; 0x2548 <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    251e:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    2520:	28 96       	adiw	r28, 0x08	; 8
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	ff 90       	pop	r15
    2536:	ef 90       	pop	r14
    2538:	df 90       	pop	r13
    253a:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    253c:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2540:	25 30       	cpi	r18, 0x05	; 5
    2542:	08 f0       	brcs	.+2      	; 0x2546 <process_action+0x18a>
    2544:	39 c2       	rjmp	.+1138   	; 0x29b8 <process_action+0x5fc>
    2546:	09 c0       	rjmp	.+18     	; 0x255a <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    2548:	f8 01       	movw	r30, r16
    254a:	85 81       	ldd	r24, Z+5	; 0x05
    254c:	80 ff       	sbrs	r24, 0
    254e:	e9 c1       	rjmp	.+978    	; 0x2922 <process_action+0x566>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2550:	8f 70       	andi	r24, 0x0F	; 15
    2552:	85 83       	std	Z+5, r24	; 0x05
    2554:	e4 cf       	rjmp	.-56     	; 0x251e <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2556:	21 11       	cpse	r18, r1
    2558:	f8 c1       	rjmp	.+1008   	; 0x294a <process_action+0x58e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    255a:	8e 2d       	mov	r24, r14
    255c:	66 c1       	rjmp	.+716    	; 0x282a <process_action+0x46e>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    255e:	24 2f       	mov	r18, r20
    2560:	26 95       	lsr	r18
    2562:	26 95       	lsr	r18
    2564:	23 70       	andi	r18, 0x03	; 3
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	21 15       	cp	r18, r1
    256a:	31 05       	cpc	r19, r1
    256c:	21 f0       	breq	.+8      	; 0x2576 <process_action+0x1ba>
    256e:	21 30       	cpi	r18, 0x01	; 1
    2570:	31 05       	cpc	r19, r1
    2572:	c9 f0       	breq	.+50     	; 0x25a6 <process_action+0x1ea>
    2574:	21 c2       	rjmp	.+1090   	; 0x29b8 <process_action+0x5fc>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2576:	ff 20       	and	r15, r15
    2578:	21 f0       	breq	.+8      	; 0x2582 <process_action+0x1c6>
                        host_system_send(action.usage.code);
    257a:	86 2f       	mov	r24, r22
    257c:	94 2f       	mov	r25, r20
    257e:	93 70       	andi	r25, 0x03	; 3
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2586:	28 96       	adiw	r28, 0x08	; 8
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	ff 90       	pop	r15
    259c:	ef 90       	pop	r14
    259e:	df 90       	pop	r13
    25a0:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    25a2:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    25a6:	ff 20       	and	r15, r15
    25a8:	21 f0       	breq	.+8      	; 0x25b2 <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    25aa:	86 2f       	mov	r24, r22
    25ac:	94 2f       	mov	r25, r20
    25ae:	93 70       	andi	r25, 0x03	; 3
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    25b6:	28 96       	adiw	r28, 0x08	; 8
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15
    25cc:	ef 90       	pop	r14
    25ce:	df 90       	pop	r13
    25d0:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    25d2:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    25d6:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    25d8:	ff 20       	and	r15, r15
    25da:	19 f0       	breq	.+6      	; 0x25e2 <process_action+0x226>
                mousekey_on(action.key.code);
    25dc:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <mousekey_on>
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    25e2:	0e 94 36 20 	call	0x406c	; 0x406c <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    25e6:	28 96       	adiw	r28, 0x08	; 8
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ff 90       	pop	r15
    25fc:	ef 90       	pop	r14
    25fe:	df 90       	pop	r13
    2600:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2602:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2606:	84 2f       	mov	r24, r20
    2608:	83 70       	andi	r24, 0x03	; 3
    260a:	09 f0       	breq	.+2      	; 0x260e <process_action+0x252>
    260c:	76 c0       	rjmp	.+236    	; 0x26fa <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    260e:	f1 10       	cpse	r15, r1
    2610:	d3 c1       	rjmp	.+934    	; 0x29b8 <process_action+0x5fc>
                    uint8_t shift = action.layer_bitop.part*4;
    2612:	26 2f       	mov	r18, r22
    2614:	22 95       	swap	r18
    2616:	26 95       	lsr	r18
    2618:	27 70       	andi	r18, 0x07	; 7
    261a:	22 0f       	add	r18, r18
    261c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    261e:	86 2f       	mov	r24, r22
    2620:	8f 70       	andi	r24, 0x0F	; 15
    2622:	c8 2e       	mov	r12, r24
    2624:	d1 2c       	mov	r13, r1
    2626:	e1 2c       	mov	r14, r1
    2628:	f1 2c       	mov	r15, r1
    262a:	02 2e       	mov	r0, r18
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <process_action+0x27a>
    262e:	cc 0c       	add	r12, r12
    2630:	dd 1c       	adc	r13, r13
    2632:	ee 1c       	adc	r14, r14
    2634:	ff 1c       	adc	r15, r15
    2636:	0a 94       	dec	r0
    2638:	d2 f7       	brpl	.-12     	; 0x262e <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    263a:	64 ff       	sbrs	r22, 4
    263c:	10 c0       	rjmp	.+32     	; 0x265e <process_action+0x2a2>
    263e:	6f e0       	ldi	r22, 0x0F	; 15
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <process_action+0x294>
    2648:	66 0f       	add	r22, r22
    264a:	77 1f       	adc	r23, r23
    264c:	88 1f       	adc	r24, r24
    264e:	99 1f       	adc	r25, r25
    2650:	2a 95       	dec	r18
    2652:	d2 f7       	brpl	.-12     	; 0x2648 <process_action+0x28c>
    2654:	60 95       	com	r22
    2656:	70 95       	com	r23
    2658:	80 95       	com	r24
    265a:	90 95       	com	r25
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <process_action+0x2a8>
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2664:	24 2f       	mov	r18, r20
    2666:	26 95       	lsr	r18
    2668:	26 95       	lsr	r18
    266a:	23 70       	andi	r18, 0x03	; 3
    266c:	42 2f       	mov	r20, r18
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	42 30       	cpi	r20, 0x02	; 2
    2672:	51 05       	cpc	r21, r1
    2674:	d1 f0       	breq	.+52     	; 0x26aa <process_action+0x2ee>
    2676:	43 30       	cpi	r20, 0x03	; 3
    2678:	51 05       	cpc	r21, r1
    267a:	59 f1       	breq	.+86     	; 0x26d2 <process_action+0x316>
    267c:	6c 29       	or	r22, r12
    267e:	7d 29       	or	r23, r13
    2680:	8e 29       	or	r24, r14
    2682:	9f 29       	or	r25, r15
    2684:	41 30       	cpi	r20, 0x01	; 1
    2686:	51 05       	cpc	r21, r1
    2688:	41 f1       	breq	.+80     	; 0x26da <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    268a:	28 96       	adiw	r28, 0x08	; 8
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	df 90       	pop	r13
    26a4:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    26a6:	0c 94 45 19 	jmp	0x328a	; 0x328a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    26aa:	6c 29       	or	r22, r12
    26ac:	7d 29       	or	r23, r13
    26ae:	8e 29       	or	r24, r14
    26b0:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    26b2:	28 96       	adiw	r28, 0x08	; 8
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
    26ca:	df 90       	pop	r13
    26cc:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    26ce:	0c 94 5f 19 	jmp	0x32be	; 0x32be <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    26d2:	0e 94 45 19 	call	0x328a	; 0x328a <default_layer_and>
    26d6:	c7 01       	movw	r24, r14
    26d8:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    26da:	28 96       	adiw	r28, 0x08	; 8
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0f 91       	pop	r16
    26ee:	ff 90       	pop	r15
    26f0:	ef 90       	pop	r14
    26f2:	df 90       	pop	r13
    26f4:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    26f6:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    26fa:	ff 20       	and	r15, r15
    26fc:	19 f0       	breq	.+6      	; 0x2704 <process_action+0x348>
    26fe:	84 2f       	mov	r24, r20
    2700:	81 70       	andi	r24, 0x01	; 1
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <process_action+0x34a>
    2704:	86 95       	lsr	r24
    2706:	88 23       	and	r24, r24
    2708:	09 f4       	brne	.+2      	; 0x270c <process_action+0x350>
    270a:	56 c1       	rjmp	.+684    	; 0x29b8 <process_action+0x5fc>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    270c:	26 2f       	mov	r18, r22
    270e:	22 95       	swap	r18
    2710:	26 95       	lsr	r18
    2712:	27 70       	andi	r18, 0x07	; 7
    2714:	22 0f       	add	r18, r18
    2716:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2718:	86 2f       	mov	r24, r22
    271a:	8f 70       	andi	r24, 0x0F	; 15
    271c:	c8 2e       	mov	r12, r24
    271e:	d1 2c       	mov	r13, r1
    2720:	e1 2c       	mov	r14, r1
    2722:	f1 2c       	mov	r15, r1
    2724:	02 2e       	mov	r0, r18
    2726:	04 c0       	rjmp	.+8      	; 0x2730 <process_action+0x374>
    2728:	cc 0c       	add	r12, r12
    272a:	dd 1c       	adc	r13, r13
    272c:	ee 1c       	adc	r14, r14
    272e:	ff 1c       	adc	r15, r15
    2730:	0a 94       	dec	r0
    2732:	d2 f7       	brpl	.-12     	; 0x2728 <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2734:	64 ff       	sbrs	r22, 4
    2736:	10 c0       	rjmp	.+32     	; 0x2758 <process_action+0x39c>
    2738:	6f e0       	ldi	r22, 0x0F	; 15
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	04 c0       	rjmp	.+8      	; 0x274a <process_action+0x38e>
    2742:	66 0f       	add	r22, r22
    2744:	77 1f       	adc	r23, r23
    2746:	88 1f       	adc	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	2a 95       	dec	r18
    274c:	d2 f7       	brpl	.-12     	; 0x2742 <process_action+0x386>
    274e:	60 95       	com	r22
    2750:	70 95       	com	r23
    2752:	80 95       	com	r24
    2754:	90 95       	com	r25
    2756:	03 c0       	rjmp	.+6      	; 0x275e <process_action+0x3a2>
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    275e:	24 2f       	mov	r18, r20
    2760:	26 95       	lsr	r18
    2762:	26 95       	lsr	r18
    2764:	23 70       	andi	r18, 0x03	; 3
    2766:	42 2f       	mov	r20, r18
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	42 30       	cpi	r20, 0x02	; 2
    276c:	51 05       	cpc	r21, r1
    276e:	d1 f0       	breq	.+52     	; 0x27a4 <process_action+0x3e8>
    2770:	43 30       	cpi	r20, 0x03	; 3
    2772:	51 05       	cpc	r21, r1
    2774:	59 f1       	breq	.+86     	; 0x27cc <process_action+0x410>
    2776:	6c 29       	or	r22, r12
    2778:	7d 29       	or	r23, r13
    277a:	8e 29       	or	r24, r14
    277c:	9f 29       	or	r25, r15
    277e:	41 30       	cpi	r20, 0x01	; 1
    2780:	51 05       	cpc	r21, r1
    2782:	41 f1       	breq	.+80     	; 0x27d4 <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    2784:	28 96       	adiw	r28, 0x08	; 8
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ff 90       	pop	r15
    279a:	ef 90       	pop	r14
    279c:	df 90       	pop	r13
    279e:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    27a0:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    27a4:	6c 29       	or	r22, r12
    27a6:	7d 29       	or	r23, r13
    27a8:	8e 29       	or	r24, r14
    27aa:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    27ac:	28 96       	adiw	r28, 0x08	; 8
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	df 90       	pop	r13
    27c6:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    27c8:	0c 94 06 1a 	jmp	0x340c	; 0x340c <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    27cc:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <layer_and>
    27d0:	c7 01       	movw	r24, r14
    27d2:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    27d4:	28 96       	adiw	r28, 0x08	; 8
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	df 90       	pop	r13
    27ee:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    27f0:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    27f4:	60 3f       	cpi	r22, 0xF0	; 240
    27f6:	49 f1       	breq	.+82     	; 0x284a <process_action+0x48e>
    27f8:	18 f4       	brcc	.+6      	; 0x2800 <process_action+0x444>
    27fa:	60 3e       	cpi	r22, 0xE0	; 224
    27fc:	48 f4       	brcc	.+18     	; 0x2810 <process_action+0x454>
    27fe:	8c c0       	rjmp	.+280    	; 0x2918 <process_action+0x55c>
    2800:	62 3f       	cpi	r22, 0xF2	; 242
    2802:	09 f4       	brne	.+2      	; 0x2806 <process_action+0x44a>
    2804:	51 c0       	rjmp	.+162    	; 0x28a8 <process_action+0x4ec>
    2806:	e0 f1       	brcs	.+120    	; 0x2880 <process_action+0x4c4>
    2808:	63 3f       	cpi	r22, 0xF3	; 243
    280a:	09 f4       	brne	.+2      	; 0x280e <process_action+0x452>
    280c:	61 c0       	rjmp	.+194    	; 0x28d0 <process_action+0x514>
    280e:	84 c0       	rjmp	.+264    	; 0x2918 <process_action+0x55c>
    2810:	16 2f       	mov	r17, r22
    2812:	1f 70       	andi	r17, 0x0F	; 15
    2814:	84 2f       	mov	r24, r20
    2816:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2818:	ff 20       	and	r15, r15
    281a:	21 f0       	breq	.+8      	; 0x2824 <process_action+0x468>
                        layer_on(action.layer_tap.val);
    281c:	0e 94 8d 19 	call	0x331a	; 0x331a <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2820:	81 2f       	mov	r24, r17
    2822:	7e ce       	rjmp	.-772    	; 0x2520 <process_action+0x164>
                    } else {
                        layer_off(action.layer_tap.val);
    2824:	0e 94 a8 19 	call	0x3350	; 0x3350 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2828:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    282a:	28 96       	adiw	r28, 0x08	; 8
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	ef 90       	pop	r14
    2842:	df 90       	pop	r13
    2844:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2846:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    284a:	ff 20       	and	r15, r15
    284c:	a9 f0       	breq	.+42     	; 0x2878 <process_action+0x4bc>
                        if (tap_count < TAPPING_TOGGLE) {
    284e:	25 30       	cpi	r18, 0x05	; 5
    2850:	08 f0       	brcs	.+2      	; 0x2854 <process_action+0x498>
    2852:	b2 c0       	rjmp	.+356    	; 0x29b8 <process_action+0x5fc>
                            layer_invert(action.layer_tap.val);
    2854:	84 2f       	mov	r24, r20
    2856:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2858:	28 96       	adiw	r28, 0x08	; 8
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ff 90       	pop	r15
    286e:	ef 90       	pop	r14
    2870:	df 90       	pop	r13
    2872:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2874:	0c 94 c7 19 	jmp	0x338e	; 0x338e <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2878:	26 30       	cpi	r18, 0x06	; 6
    287a:	08 f0       	brcs	.+2      	; 0x287e <process_action+0x4c2>
    287c:	9d c0       	rjmp	.+314    	; 0x29b8 <process_action+0x5fc>
    287e:	ea cf       	rjmp	.-44     	; 0x2854 <process_action+0x498>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2880:	ff 20       	and	r15, r15
    2882:	a1 f0       	breq	.+40     	; 0x28ac <process_action+0x4f0>
    2884:	84 2f       	mov	r24, r20
    2886:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2888:	28 96       	adiw	r28, 0x08	; 8
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	df 90       	pop	r13
    28a2:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    28a4:	0c 94 8d 19 	jmp	0x331a	; 0x331a <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    28a8:	ff 20       	and	r15, r15
    28aa:	61 f3       	breq	.-40     	; 0x2884 <process_action+0x4c8>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    28ac:	84 2f       	mov	r24, r20
    28ae:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    28b0:	28 96       	adiw	r28, 0x08	; 8
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    28cc:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    28d0:	ff 20       	and	r15, r15
    28d2:	91 f0       	breq	.+36     	; 0x28f8 <process_action+0x53c>
    28d4:	84 2f       	mov	r24, r20
    28d6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    28d8:	28 96       	adiw	r28, 0x08	; 8
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	ff 90       	pop	r15
    28ee:	ef 90       	pop	r14
    28f0:	df 90       	pop	r13
    28f2:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    28f4:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <layer_move>
            break;
#endif
        default:
            break;
    }
}
    28f8:	28 96       	adiw	r28, 0x08	; 8
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	ff 90       	pop	r15
    290e:	ef 90       	pop	r14
    2910:	df 90       	pop	r13
    2912:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2914:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2918:	ff 20       	and	r15, r15
    291a:	a1 f0       	breq	.+40     	; 0x2944 <process_action+0x588>
                        if (tap_count > 0) {
    291c:	22 23       	and	r18, r18
    291e:	09 f4       	brne	.+2      	; 0x2922 <process_action+0x566>
    2920:	b1 cf       	rjmp	.-158    	; 0x2884 <process_action+0x4c8>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2922:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2924:	28 96       	adiw	r28, 0x08	; 8
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	ff 90       	pop	r15
    293a:	ef 90       	pop	r14
    293c:	df 90       	pop	r13
    293e:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2940:	0c 94 ae 10 	jmp	0x215c	; 0x215c <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2944:	22 23       	and	r18, r18
    2946:	09 f4       	brne	.+2      	; 0x294a <process_action+0x58e>
    2948:	b1 cf       	rjmp	.-158    	; 0x28ac <process_action+0x4f0>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    294a:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    294c:	28 96       	adiw	r28, 0x08	; 8
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	ef 90       	pop	r14
    2964:	df 90       	pop	r13
    2966:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2968:	0c 94 81 11 	jmp	0x2302	; 0x2302 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    296c:	4f 70       	andi	r20, 0x0F	; 15
    296e:	c8 01       	movw	r24, r16
    2970:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2974:	28 96       	adiw	r28, 0x08	; 8
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	ff 90       	pop	r15
    298a:	ef 90       	pop	r14
    298c:	df 90       	pop	r13
    298e:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2990:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2994:	4f 70       	andi	r20, 0x0F	; 15
    2996:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2998:	28 96       	adiw	r28, 0x08	; 8
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ff 90       	pop	r15
    29ae:	ef 90       	pop	r14
    29b0:	df 90       	pop	r13
    29b2:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    29b4:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <action_function>
            break;
#endif
        default:
            break;
    }
}
    29b8:	28 96       	adiw	r28, 0x08	; 8
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	ff 90       	pop	r15
    29ce:	ef 90       	pop	r14
    29d0:	df 90       	pop	r13
    29d2:	cf 90       	pop	r12
    29d4:	08 95       	ret

000029d6 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    29d6:	0e 94 c0 1a 	call	0x3580	; 0x3580 <clear_weak_mods>
    clear_keys();
    29da:	0e 94 8f 1a 	call	0x351e	; 0x351e <clear_keys>
    send_keyboard_report();
    29de:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    29e2:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <mousekey_clear>
    mousekey_send();
    29e6:	0e 94 bb 20 	call	0x4176	; 0x4176 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <host_system_send>
    host_consumer_send(0);
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <host_consumer_send>

000029fa <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    29fa:	0e 94 b0 1a 	call	0x3560	; 0x3560 <clear_mods>
    clear_keyboard_but_mods();
    29fe:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <clear_keyboard_but_mods>

00002a02 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2a02:	0e 94 19 1a 	call	0x3432	; 0x3432 <layer_switch_get_action>

    switch (action.kind.id) {
    2a06:	29 2f       	mov	r18, r25
    2a08:	22 95       	swap	r18
    2a0a:	2f 70       	andi	r18, 0x0F	; 15
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	2c 30       	cpi	r18, 0x0C	; 12
    2a10:	31 05       	cpc	r19, r1
    2a12:	4c f4       	brge	.+18     	; 0x2a26 <is_tap_key+0x24>
    2a14:	2a 30       	cpi	r18, 0x0A	; 10
    2a16:	31 05       	cpc	r19, r1
    2a18:	6c f4       	brge	.+26     	; 0x2a34 <is_tap_key+0x32>
    2a1a:	22 50       	subi	r18, 0x02	; 2
    2a1c:	31 09       	sbc	r19, r1
    2a1e:	22 30       	cpi	r18, 0x02	; 2
    2a20:	31 05       	cpc	r19, r1
    2a22:	90 f4       	brcc	.+36     	; 0x2a48 <is_tap_key+0x46>
    2a24:	07 c0       	rjmp	.+14     	; 0x2a34 <is_tap_key+0x32>
    2a26:	2c 30       	cpi	r18, 0x0C	; 12
    2a28:	31 05       	cpc	r19, r1
    2a2a:	51 f0       	breq	.+20     	; 0x2a40 <is_tap_key+0x3e>
    2a2c:	2f 30       	cpi	r18, 0x0F	; 15
    2a2e:	31 05       	cpc	r19, r1
    2a30:	39 f0       	breq	.+14     	; 0x2a40 <is_tap_key+0x3e>
    2a32:	0a c0       	rjmp	.+20     	; 0x2a48 <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2a34:	80 3e       	cpi	r24, 0xE0	; 224
    2a36:	10 f0       	brcs	.+4      	; 0x2a3c <is_tap_key+0x3a>
    2a38:	80 3f       	cpi	r24, 0xF0	; 240
    2a3a:	31 f4       	brne	.+12     	; 0x2a48 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2a40:	93 fb       	bst	r25, 3
    2a42:	88 27       	eor	r24, r24
    2a44:	80 f9       	bld	r24, 0
    2a46:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    2a48:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2a4a:	08 95       	ret

00002a4c <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <debug_event+0x6>
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <debug_event+0x8>
    2a54:	1f 92       	push	r1
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	08 95       	ret

00002a6a <debug_record>:

void debug_record(keyrecord_t record)
{
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <debug_record+0x6>
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <debug_record+0x8>
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <debug_record+0xa>
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2a78:	26 96       	adiw	r28, 0x06	; 6
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	08 95       	ret

00002a8a <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a90:	c0 91 54 01 	lds	r28, 0x0154
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2a94:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a96:	80 91 55 01 	lds	r24, 0x0155
    2a9a:	c8 17       	cp	r28, r24
    2a9c:	99 f0       	breq	.+38     	; 0x2ac4 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2a9e:	d0 e0       	ldi	r29, 0x00	; 0
    2aa0:	1c 9f       	mul	r17, r28
    2aa2:	f0 01       	movw	r30, r0
    2aa4:	1d 9f       	mul	r17, r29
    2aa6:	f0 0d       	add	r31, r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	ea 5a       	subi	r30, 0xAA	; 170
    2aac:	fe 4f       	sbci	r31, 0xFE	; 254
    2aae:	40 81       	ld	r20, Z
    2ab0:	51 81       	ldd	r21, Z+1	; 0x01
    2ab2:	62 81       	ldd	r22, Z+2	; 0x02
    2ab4:	73 81       	ldd	r23, Z+3	; 0x03
    2ab6:	84 81       	ldd	r24, Z+4	; 0x04
    2ab8:	95 81       	ldd	r25, Z+5	; 0x05
    2aba:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2abe:	21 96       	adiw	r28, 0x01	; 1
    2ac0:	c7 70       	andi	r28, 0x07	; 7
    2ac2:	e9 cf       	rjmp	.-46     	; 0x2a96 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	08 95       	ret

00002acc <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2acc:	40 91 86 01 	lds	r20, 0x0186
    2ad0:	50 91 87 01 	lds	r21, 0x0187
    2ad4:	60 91 88 01 	lds	r22, 0x0188
    2ad8:	70 91 89 01 	lds	r23, 0x0189
    2adc:	80 91 8a 01 	lds	r24, 0x018A
    2ae0:	90 91 8b 01 	lds	r25, 0x018B
    2ae4:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <debug_record>

00002ae8 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2ae8:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2aea:	80 91 8b 01 	lds	r24, 0x018B
    2aee:	82 95       	swap	r24
    2af0:	8f 70       	andi	r24, 0x0F	; 15
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <waiting_buffer_scan_tap+0xe>
    2af4:	5f c0       	rjmp	.+190    	; 0x2bb4 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2af6:	80 91 88 01 	lds	r24, 0x0188
    2afa:	88 23       	and	r24, r24
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <waiting_buffer_scan_tap+0x18>
    2afe:	5a c0       	rjmp	.+180    	; 0x2bb4 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b00:	20 91 54 01 	lds	r18, 0x0154
    2b04:	a0 91 55 01 	lds	r26, 0x0155
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2b08:	60 91 86 01 	lds	r22, 0x0186
    2b0c:	70 91 87 01 	lds	r23, 0x0187
    2b10:	80 91 89 01 	lds	r24, 0x0189
    2b14:	90 91 8a 01 	lds	r25, 0x018A
    2b18:	31 e0       	ldi	r19, 0x01	; 1
    2b1a:	6f 3f       	cpi	r22, 0xFF	; 255
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <waiting_buffer_scan_tap+0x38>
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	b3 2f       	mov	r27, r19
    2b22:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b24:	2a 17       	cp	r18, r26
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <waiting_buffer_scan_tap+0x42>
    2b28:	45 c0       	rjmp	.+138    	; 0x2bb4 <waiting_buffer_scan_tap+0xcc>
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	21 f0       	breq	.+8      	; 0x2b36 <waiting_buffer_scan_tap+0x4e>
    2b2e:	7f 3f       	cpi	r23, 0xFF	; 255
    2b30:	21 f4       	brne	.+8      	; 0x2b3a <waiting_buffer_scan_tap+0x52>
    2b32:	4b 2f       	mov	r20, r27
    2b34:	03 c0       	rjmp	.+6      	; 0x2b3c <waiting_buffer_scan_tap+0x54>
    2b36:	41 e0       	ldi	r20, 0x01	; 1
    2b38:	01 c0       	rjmp	.+2      	; 0x2b3c <waiting_buffer_scan_tap+0x54>
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2b3e:	40 fd       	sbrc	r20, 0
    2b40:	35 c0       	rjmp	.+106    	; 0x2bac <waiting_buffer_scan_tap+0xc4>
    2b42:	c2 9f       	mul	r28, r18
    2b44:	f0 01       	movw	r30, r0
    2b46:	c3 9f       	mul	r28, r19
    2b48:	f0 0d       	add	r31, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	ea 5a       	subi	r30, 0xAA	; 170
    2b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b50:	41 81       	ldd	r20, Z+1	; 0x01
    2b52:	74 13       	cpse	r23, r20
    2b54:	2b c0       	rjmp	.+86     	; 0x2bac <waiting_buffer_scan_tap+0xc4>
    2b56:	40 81       	ld	r20, Z
    2b58:	64 13       	cpse	r22, r20
    2b5a:	28 c0       	rjmp	.+80     	; 0x2bac <waiting_buffer_scan_tap+0xc4>
    2b5c:	42 81       	ldd	r20, Z+2	; 0x02
    2b5e:	41 11       	cpse	r20, r1
    2b60:	25 c0       	rjmp	.+74     	; 0x2bac <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2b62:	43 81       	ldd	r20, Z+3	; 0x03
    2b64:	54 81       	ldd	r21, Z+4	; 0x04
    2b66:	48 17       	cp	r20, r24
    2b68:	59 07       	cpc	r21, r25
    2b6a:	10 f4       	brcc	.+4      	; 0x2b70 <waiting_buffer_scan_tap+0x88>
    2b6c:	41 50       	subi	r20, 0x01	; 1
    2b6e:	51 09       	sbc	r21, r1
    2b70:	48 1b       	sub	r20, r24
    2b72:	59 0b       	sbc	r21, r25
    2b74:	48 3c       	cpi	r20, 0xC8	; 200
    2b76:	51 05       	cpc	r21, r1
    2b78:	c8 f4       	brcc	.+50     	; 0x2bac <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2b7a:	80 91 8b 01 	lds	r24, 0x018B
    2b7e:	8f 70       	andi	r24, 0x0F	; 15
    2b80:	80 61       	ori	r24, 0x10	; 16
    2b82:	80 93 8b 01 	sts	0x018B, r24
            waiting_buffer[i].tap.count = 1;
    2b86:	86 e0       	ldi	r24, 0x06	; 6
    2b88:	82 9f       	mul	r24, r18
    2b8a:	f0 01       	movw	r30, r0
    2b8c:	83 9f       	mul	r24, r19
    2b8e:	f0 0d       	add	r31, r0
    2b90:	11 24       	eor	r1, r1
    2b92:	e5 5a       	subi	r30, 0xA5	; 165
    2b94:	fe 4f       	sbci	r31, 0xFE	; 254
    2b96:	80 81       	ld	r24, Z
    2b98:	8f 70       	andi	r24, 0x0F	; 15
    2b9a:	80 61       	ori	r24, 0x10	; 16
    2b9c:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2b9e:	86 e8       	ldi	r24, 0x86	; 134
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2ba6:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2ba8:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2bac:	2f 5f       	subi	r18, 0xFF	; 255
    2bae:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb0:	27 70       	andi	r18, 0x07	; 7
    2bb2:	b8 cf       	rjmp	.-144    	; 0x2b24 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2bb4:	cf 91       	pop	r28
    2bb6:	08 95       	ret

00002bb8 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2bb8:	cf 92       	push	r12
    2bba:	df 92       	push	r13
    2bbc:	ef 92       	push	r14
    2bbe:	ff 92       	push	r15
    2bc0:	0f 93       	push	r16
    2bc2:	1f 93       	push	r17
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	62 97       	sbiw	r28, 0x12	; 18
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2bda:	85 e0       	ldi	r24, 0x05	; 5
    2bdc:	f8 01       	movw	r30, r16
    2bde:	de 01       	movw	r26, r28
    2be0:	1d 96       	adiw	r26, 0x0d	; 13
    2be2:	01 90       	ld	r0, Z+
    2be4:	0d 92       	st	X+, r0
    2be6:	8a 95       	dec	r24
    2be8:	e1 f7       	brne	.-8      	; 0x2be2 <process_tapping+0x2a>
    2bea:	d8 01       	movw	r26, r16
    2bec:	4c 91       	ld	r20, X
    2bee:	11 96       	adiw	r26, 0x01	; 1
    2bf0:	5c 91       	ld	r21, X
    2bf2:	11 97       	sbiw	r26, 0x01	; 1
    2bf4:	12 96       	adiw	r26, 0x02	; 2
    2bf6:	6c 91       	ld	r22, X
    2bf8:	12 97       	sbiw	r26, 0x02	; 2
    2bfa:	13 96       	adiw	r26, 0x03	; 3
    2bfc:	ed 90       	ld	r14, X+
    2bfe:	fc 90       	ld	r15, X
    2c00:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2c02:	70 91 86 01 	lds	r23, 0x0186
    2c06:	e0 91 87 01 	lds	r30, 0x0187
    2c0a:	20 91 89 01 	lds	r18, 0x0189
    2c0e:	30 91 8a 01 	lds	r19, 0x018A
    2c12:	21 15       	cp	r18, r1
    2c14:	31 05       	cpc	r19, r1
    2c16:	31 f0       	breq	.+12     	; 0x2c24 <process_tapping+0x6c>
    2c18:	ef 3f       	cpi	r30, 0xFF	; 255
    2c1a:	31 f4       	brne	.+12     	; 0x2c28 <process_tapping+0x70>
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	7f 3f       	cpi	r23, 0xFF	; 255
    2c20:	19 f4       	brne	.+6      	; 0x2c28 <process_tapping+0x70>
    2c22:	03 c0       	rjmp	.+6      	; 0x2c2a <process_tapping+0x72>
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	01 c0       	rjmp	.+2      	; 0x2c2a <process_tapping+0x72>
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	b8 2f       	mov	r27, r24
    2c2c:	b1 70       	andi	r27, 0x01	; 1
    2c2e:	cb 2e       	mov	r12, r27
    2c30:	80 fd       	sbrc	r24, 0
    2c32:	6c c1       	rjmp	.+728    	; 0x2f0c <process_tapping+0x354>
    2c34:	d0 90 88 01 	lds	r13, 0x0188
    2c38:	dd 20       	and	r13, r13
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <process_tapping+0x86>
    2c3c:	f5 c0       	rjmp	.+490    	; 0x2e28 <process_tapping+0x270>
    2c3e:	f0 91 8b 01 	lds	r31, 0x018B
        if (WITHIN_TAPPING_TERM(event)) {
    2c42:	e2 16       	cp	r14, r18
    2c44:	f3 06       	cpc	r15, r19
    2c46:	38 f0       	brcs	.+14     	; 0x2c56 <process_tapping+0x9e>
    2c48:	c7 01       	movw	r24, r14
    2c4a:	82 1b       	sub	r24, r18
    2c4c:	93 0b       	sbc	r25, r19
    2c4e:	88 3c       	cpi	r24, 0xC8	; 200
    2c50:	91 05       	cpc	r25, r1
    2c52:	48 f0       	brcs	.+18     	; 0x2c66 <process_tapping+0xae>
    2c54:	9b c0       	rjmp	.+310    	; 0x2d8c <process_tapping+0x1d4>
    2c56:	20 95       	com	r18
    2c58:	30 95       	com	r19
    2c5a:	2e 0d       	add	r18, r14
    2c5c:	3f 1d       	adc	r19, r15
    2c5e:	28 3c       	cpi	r18, 0xC8	; 200
    2c60:	31 05       	cpc	r19, r1
    2c62:	08 f0       	brcs	.+2      	; 0x2c66 <process_tapping+0xae>
    2c64:	93 c0       	rjmp	.+294    	; 0x2d8c <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    2c66:	8f 2f       	mov	r24, r31
    2c68:	80 7f       	andi	r24, 0xF0	; 240
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <process_tapping+0xb6>
    2c6c:	52 c0       	rjmp	.+164    	; 0x2d12 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2c6e:	e5 13       	cpse	r30, r21
    2c70:	14 c0       	rjmp	.+40     	; 0x2c9a <process_tapping+0xe2>
    2c72:	74 13       	cpse	r23, r20
    2c74:	12 c0       	rjmp	.+36     	; 0x2c9a <process_tapping+0xe2>
    2c76:	d6 2e       	mov	r13, r22
    2c78:	61 11       	cpse	r22, r1
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2c7c:	ff 70       	andi	r31, 0x0F	; 15
    2c7e:	f0 61       	ori	r31, 0x10	; 16
    2c80:	f0 93 8b 01 	sts	0x018B, r31
                    debug_tapping_key();
    2c84:	0e 94 66 15 	call	0x2acc	; 0x2acc <debug_tapping_key>
                    process_action(&tapping_key);
    2c88:	86 e8       	ldi	r24, 0x86	; 134
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2c90:	80 91 8b 01 	lds	r24, 0x018B
    2c94:	f8 01       	movw	r30, r16
    2c96:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    2c98:	6c c1       	rjmp	.+728    	; 0x2f72 <process_tapping+0x3ba>
    2c9a:	ef 28       	or	r14, r15
    2c9c:	31 f0       	breq	.+12     	; 0x2caa <process_tapping+0xf2>
    2c9e:	5f 3f       	cpi	r21, 0xFF	; 255
    2ca0:	31 f4       	brne	.+12     	; 0x2cae <process_tapping+0xf6>
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	4f 3f       	cpi	r20, 0xFF	; 255
    2ca6:	19 f4       	brne	.+6      	; 0x2cae <process_tapping+0xf6>
    2ca8:	03 c0       	rjmp	.+6      	; 0x2cb0 <process_tapping+0xf8>
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	01 c0       	rjmp	.+2      	; 0x2cb0 <process_tapping+0xf8>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2cb0:	80 fd       	sbrc	r24, 0
    2cb2:	03 c0       	rjmp	.+6      	; 0x2cba <process_tapping+0x102>
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	86 27       	eor	r24, r22
    2cb8:	01 c0       	rjmp	.+2      	; 0x2cbc <process_tapping+0x104>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2cbc:	f8 2f       	mov	r31, r24
    2cbe:	f1 70       	andi	r31, 0x01	; 1
    2cc0:	ff 2e       	mov	r15, r31
    2cc2:	80 ff       	sbrs	r24, 0
    2cc4:	1c c0       	rjmp	.+56     	; 0x2cfe <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2cc6:	80 91 54 01 	lds	r24, 0x0154
    2cca:	20 91 55 01 	lds	r18, 0x0155
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2cce:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2cd0:	82 17       	cp	r24, r18
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <process_tapping+0x11e>
    2cd4:	28 c1       	rjmp	.+592    	; 0x2f26 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	38 9f       	mul	r19, r24
    2cda:	f0 01       	movw	r30, r0
    2cdc:	39 9f       	mul	r19, r25
    2cde:	f0 0d       	add	r31, r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	ea 5a       	subi	r30, 0xAA	; 170
    2ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	57 13       	cpse	r21, r23
    2cea:	06 c0       	rjmp	.+12     	; 0x2cf8 <process_tapping+0x140>
    2cec:	70 81       	ld	r23, Z
    2cee:	47 13       	cpse	r20, r23
    2cf0:	03 c0       	rjmp	.+6      	; 0x2cf8 <process_tapping+0x140>
    2cf2:	72 81       	ldd	r23, Z+2	; 0x02
    2cf4:	67 13       	cpse	r22, r23
    2cf6:	03 c0       	rjmp	.+6      	; 0x2cfe <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2cf8:	01 96       	adiw	r24, 0x01	; 1
    2cfa:	87 70       	andi	r24, 0x07	; 7
    2cfc:	e9 cf       	rjmp	.-46     	; 0x2cd0 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2cfe:	d6 2e       	mov	r13, r22
    2d00:	66 23       	and	r22, r22
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <process_tapping+0x14e>
    2d04:	36 c1       	rjmp	.+620    	; 0x2f72 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2d06:	80 91 8b 01 	lds	r24, 0x018B
    2d0a:	81 60       	ori	r24, 0x01	; 1
    2d0c:	80 93 8b 01 	sts	0x018B, r24
    2d10:	53 c0       	rjmp	.+166    	; 0x2db8 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d12:	e5 13       	cpse	r30, r21
    2d14:	08 c0       	rjmp	.+16     	; 0x2d26 <process_tapping+0x16e>
    2d16:	74 13       	cpse	r23, r20
    2d18:	06 c0       	rjmp	.+12     	; 0x2d26 <process_tapping+0x16e>
    2d1a:	61 11       	cpse	r22, r1
    2d1c:	04 c0       	rjmp	.+8      	; 0x2d26 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2d1e:	d8 01       	movw	r26, r16
    2d20:	15 96       	adiw	r26, 0x05	; 5
    2d22:	fc 93       	st	X, r31
    2d24:	ae c0       	rjmp	.+348    	; 0x2e82 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2d26:	4d 87       	std	Y+13, r20	; 0x0d
    2d28:	5e 87       	std	Y+14, r21	; 0x0e
    2d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2e:	6a 8b       	std	Y+18, r22	; 0x12
    2d30:	0e 94 01 15 	call	0x2a02	; 0x2a02 <is_tap_key>
    2d34:	6a 89       	ldd	r22, Y+18	; 0x12
    2d36:	88 23       	and	r24, r24
    2d38:	29 f1       	breq	.+74     	; 0x2d84 <process_tapping+0x1cc>
    2d3a:	d6 2e       	mov	r13, r22
    2d3c:	66 23       	and	r22, r22
    2d3e:	11 f1       	breq	.+68     	; 0x2d84 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    2d40:	20 91 8b 01 	lds	r18, 0x018B
    2d44:	82 2f       	mov	r24, r18
    2d46:	82 95       	swap	r24
    2d48:	8f 70       	andi	r24, 0x0F	; 15
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	02 97       	sbiw	r24, 0x02	; 2
    2d4e:	0c f4       	brge	.+2      	; 0x2d52 <process_tapping+0x19a>
    2d50:	60 c0       	rjmp	.+192    	; 0x2e12 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2d52:	80 91 86 01 	lds	r24, 0x0186
    2d56:	90 91 87 01 	lds	r25, 0x0187
    2d5a:	98 87       	std	Y+8, r25	; 0x08
    2d5c:	8f 83       	std	Y+7, r24	; 0x07
    2d5e:	19 86       	std	Y+9, r1	; 0x09
    2d60:	fb 86       	std	Y+11, r15	; 0x0b
    2d62:	ea 86       	std	Y+10, r14	; 0x0a
    2d64:	2c 87       	std	Y+12, r18	; 0x0c
    2d66:	ce 01       	movw	r24, r28
    2d68:	07 96       	adiw	r24, 0x07	; 7
    2d6a:	51 c0       	rjmp	.+162    	; 0x2e0e <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d6c:	e5 17       	cp	r30, r21
    2d6e:	31 f1       	breq	.+76     	; 0x2dbc <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2d70:	4d 87       	std	Y+13, r20	; 0x0d
    2d72:	5e 87       	std	Y+14, r21	; 0x0e
    2d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d78:	6a 8b       	std	Y+18, r22	; 0x12
    2d7a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <is_tap_key>
    2d7e:	6a 89       	ldd	r22, Y+18	; 0x12
    2d80:	81 11       	cpse	r24, r1
    2d82:	2e c0       	rjmp	.+92     	; 0x2de0 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2d84:	c8 01       	movw	r24, r16
    2d86:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>
    2d8a:	a4 c0       	rjmp	.+328    	; 0x2ed4 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2d8c:	8f 2f       	mov	r24, r31
    2d8e:	80 7f       	andi	r24, 0xF0	; 240
    2d90:	69 f7       	brne	.-38     	; 0x2d6c <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2d92:	7e 2d       	mov	r23, r14
    2d94:	f9 8a       	std	Y+17, r15	; 0x11
    2d96:	e8 8a       	std	Y+16, r14	; 0x10
    2d98:	89 89       	ldd	r24, Y+17	; 0x11
    2d9a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <debug_event>
                process_action(&tapping_key);
    2d9e:	86 e8       	ldi	r24, 0x86	; 134
    2da0:	91 e0       	ldi	r25, 0x01	; 1
    2da2:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>
                tapping_key = (keyrecord_t){};
    2da6:	e6 e8       	ldi	r30, 0x86	; 134
    2da8:	f1 e0       	ldi	r31, 0x01	; 1
    2daa:	86 e0       	ldi	r24, 0x06	; 6
    2dac:	df 01       	movw	r26, r30
    2dae:	1d 92       	st	X+, r1
    2db0:	8a 95       	dec	r24
    2db2:	e9 f7       	brne	.-6      	; 0x2dae <process_tapping+0x1f6>
                debug_tapping_key();
    2db4:	0e 94 66 15 	call	0x2acc	; 0x2acc <debug_tapping_key>
                return false;
    2db8:	d1 2c       	mov	r13, r1
    2dba:	db c0       	rjmp	.+438    	; 0x2f72 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2dbc:	74 13       	cpse	r23, r20
    2dbe:	d8 cf       	rjmp	.-80     	; 0x2d70 <process_tapping+0x1b8>
    2dc0:	61 11       	cpse	r22, r1
    2dc2:	d6 cf       	rjmp	.-84     	; 0x2d70 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2dc4:	d8 01       	movw	r26, r16
    2dc6:	15 96       	adiw	r26, 0x05	; 5
    2dc8:	fc 93       	st	X, r31
                    process_action(keyp);
    2dca:	c8 01       	movw	r24, r16
    2dcc:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>
                    tapping_key = (keyrecord_t){};
    2dd0:	e6 e8       	ldi	r30, 0x86	; 134
    2dd2:	f1 e0       	ldi	r31, 0x01	; 1
    2dd4:	86 e0       	ldi	r24, 0x06	; 6
    2dd6:	df 01       	movw	r26, r30
    2dd8:	1d 92       	st	X+, r1
    2dda:	8a 95       	dec	r24
    2ddc:	e9 f7       	brne	.-6      	; 0x2dd8 <process_tapping+0x220>
                    return true;
    2dde:	c9 c0       	rjmp	.+402    	; 0x2f72 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2de0:	d6 2e       	mov	r13, r22
    2de2:	66 23       	and	r22, r22
    2de4:	79 f2       	breq	.-98     	; 0x2d84 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    2de6:	20 91 8b 01 	lds	r18, 0x018B
    2dea:	82 2f       	mov	r24, r18
    2dec:	82 95       	swap	r24
    2dee:	8f 70       	andi	r24, 0x0F	; 15
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	02 97       	sbiw	r24, 0x02	; 2
    2df4:	74 f0       	brlt	.+28     	; 0x2e12 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2df6:	80 91 86 01 	lds	r24, 0x0186
    2dfa:	90 91 87 01 	lds	r25, 0x0187
    2dfe:	9a 83       	std	Y+2, r25	; 0x02
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	1b 82       	std	Y+3, r1	; 0x03
    2e04:	fd 82       	std	Y+5, r15	; 0x05
    2e06:	ec 82       	std	Y+4, r14	; 0x04
    2e08:	2e 83       	std	Y+6, r18	; 0x06
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    2e12:	86 e0       	ldi	r24, 0x06	; 6
    2e14:	f8 01       	movw	r30, r16
    2e16:	a6 e8       	ldi	r26, 0x86	; 134
    2e18:	b1 e0       	ldi	r27, 0x01	; 1
    2e1a:	01 90       	ld	r0, Z+
    2e1c:	0d 92       	st	X+, r0
    2e1e:	8a 95       	dec	r24
    2e20:	e1 f7       	brne	.-8      	; 0x2e1a <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    2e22:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <waiting_buffer_scan_tap>
    2e26:	6f c0       	rjmp	.+222    	; 0x2f06 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2e28:	e2 16       	cp	r14, r18
    2e2a:	f3 06       	cpc	r15, r19
    2e2c:	28 f0       	brcs	.+10     	; 0x2e38 <process_tapping+0x280>
    2e2e:	c7 01       	movw	r24, r14
    2e30:	82 1b       	sub	r24, r18
    2e32:	93 0b       	sbc	r25, r19
    2e34:	9c 01       	movw	r18, r24
    2e36:	04 c0       	rjmp	.+8      	; 0x2e40 <process_tapping+0x288>
    2e38:	20 95       	com	r18
    2e3a:	30 95       	com	r19
    2e3c:	2e 0d       	add	r18, r14
    2e3e:	3f 1d       	adc	r19, r15
    2e40:	28 3c       	cpi	r18, 0xC8	; 200
    2e42:	31 05       	cpc	r19, r1
    2e44:	08 f0       	brcs	.+2      	; 0x2e48 <process_tapping+0x290>
    2e46:	52 c0       	rjmp	.+164    	; 0x2eec <process_tapping+0x334>
            if (event.pressed) {
    2e48:	d6 2e       	mov	r13, r22
    2e4a:	66 23       	and	r22, r22
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <process_tapping+0x298>
    2e4e:	9a cf       	rjmp	.-204    	; 0x2d84 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    2e50:	e5 13       	cpse	r30, r21
    2e52:	2c c0       	rjmp	.+88     	; 0x2eac <process_tapping+0x2f4>
    2e54:	74 13       	cpse	r23, r20
    2e56:	2a c0       	rjmp	.+84     	; 0x2eac <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2e58:	80 91 8b 01 	lds	r24, 0x018B
    2e5c:	80 fd       	sbrc	r24, 0
    2e5e:	1d c0       	rjmp	.+58     	; 0x2e9a <process_tapping+0x2e2>
    2e60:	98 2f       	mov	r25, r24
    2e62:	92 95       	swap	r25
    2e64:	9f 70       	andi	r25, 0x0F	; 15
    2e66:	c9 f0       	breq	.+50     	; 0x2e9a <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2e68:	d8 01       	movw	r26, r16
    2e6a:	15 96       	adiw	r26, 0x05	; 5
    2e6c:	8c 93       	st	X, r24
    2e6e:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2e70:	9f 30       	cpi	r25, 0x0F	; 15
    2e72:	39 f0       	breq	.+14     	; 0x2e82 <process_tapping+0x2ca>
    2e74:	9f 5f       	subi	r25, 0xFF	; 255
    2e76:	92 95       	swap	r25
    2e78:	90 7f       	andi	r25, 0xF0	; 240
    2e7a:	8f 70       	andi	r24, 0x0F	; 15
    2e7c:	89 2b       	or	r24, r25
    2e7e:	15 96       	adiw	r26, 0x05	; 5
    2e80:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2e82:	c8 01       	movw	r24, r16
    2e84:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>
                        tapping_key = *keyp;
    2e88:	86 e0       	ldi	r24, 0x06	; 6
    2e8a:	f8 01       	movw	r30, r16
    2e8c:	a6 e8       	ldi	r26, 0x86	; 134
    2e8e:	b1 e0       	ldi	r27, 0x01	; 1
    2e90:	01 90       	ld	r0, Z+
    2e92:	0d 92       	st	X+, r0
    2e94:	8a 95       	dec	r24
    2e96:	e1 f7       	brne	.-8      	; 0x2e90 <process_tapping+0x2d8>
    2e98:	36 c0       	rjmp	.+108    	; 0x2f06 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2e9a:	86 e0       	ldi	r24, 0x06	; 6
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	a6 e8       	ldi	r26, 0x86	; 134
    2ea0:	b1 e0       	ldi	r27, 0x01	; 1
    2ea2:	01 90       	ld	r0, Z+
    2ea4:	0d 92       	st	X+, r0
    2ea6:	8a 95       	dec	r24
    2ea8:	e1 f7       	brne	.-8      	; 0x2ea2 <process_tapping+0x2ea>
                        return true;
    2eaa:	63 c0       	rjmp	.+198    	; 0x2f72 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    2eac:	4d 87       	std	Y+13, r20	; 0x0d
    2eae:	5e 87       	std	Y+14, r21	; 0x0e
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <is_tap_key>
    2eb8:	88 23       	and	r24, r24
    2eba:	79 f0       	breq	.+30     	; 0x2eda <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    2ebc:	86 e0       	ldi	r24, 0x06	; 6
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	a6 e8       	ldi	r26, 0x86	; 134
    2ec2:	b1 e0       	ldi	r27, 0x01	; 1
    2ec4:	01 90       	ld	r0, Z+
    2ec6:	0d 92       	st	X+, r0
    2ec8:	8a 95       	dec	r24
    2eca:	e1 f7       	brne	.-8      	; 0x2ec4 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    2ecc:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2ed0:	0e 94 66 15 	call	0x2acc	; 0x2acc <debug_tapping_key>
                    return true;
    2ed4:	dd 24       	eor	r13, r13
    2ed6:	d3 94       	inc	r13
    2ed8:	4c c0       	rjmp	.+152    	; 0x2f72 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2eda:	80 91 8b 01 	lds	r24, 0x018B
    2ede:	81 60       	ori	r24, 0x01	; 1
    2ee0:	80 93 8b 01 	sts	0x018B, r24
                    process_action(keyp);
    2ee4:	c8 01       	movw	r24, r16
    2ee6:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>
                    return true;
    2eea:	43 c0       	rjmp	.+134    	; 0x2f72 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2eec:	7e 2d       	mov	r23, r14
    2eee:	f9 8a       	std	Y+17, r15	; 0x11
    2ef0:	e8 8a       	std	Y+16, r14	; 0x10
    2ef2:	89 89       	ldd	r24, Y+17	; 0x11
    2ef4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <debug_event>
            tapping_key = (keyrecord_t){};
    2ef8:	e6 e8       	ldi	r30, 0x86	; 134
    2efa:	f1 e0       	ldi	r31, 0x01	; 1
    2efc:	86 e0       	ldi	r24, 0x06	; 6
    2efe:	df 01       	movw	r26, r30
    2f00:	1d 92       	st	X+, r1
    2f02:	8a 95       	dec	r24
    2f04:	e9 f7       	brne	.-6      	; 0x2f00 <process_tapping+0x348>
            debug_tapping_key();
    2f06:	0e 94 66 15 	call	0x2acc	; 0x2acc <debug_tapping_key>
            return false;
    2f0a:	33 c0       	rjmp	.+102    	; 0x2f72 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2f0c:	66 23       	and	r22, r22
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <process_tapping+0x35a>
    2f10:	39 cf       	rjmp	.-398    	; 0x2d84 <process_tapping+0x1cc>
    2f12:	4d 87       	std	Y+13, r20	; 0x0d
    2f14:	5e 87       	std	Y+14, r21	; 0x0e
    2f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <is_tap_key>
    2f1e:	88 23       	and	r24, r24
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <process_tapping+0x36c>
    2f22:	30 cf       	rjmp	.-416    	; 0x2d84 <process_tapping+0x1cc>
    2f24:	cb cf       	rjmp	.-106    	; 0x2ebc <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2f26:	4d 87       	std	Y+13, r20	; 0x0d
    2f28:	5e 87       	std	Y+14, r21	; 0x0e
    2f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2e:	0e 94 19 1a 	call	0x3432	; 0x3432 <layer_switch_get_action>
                    switch (action.kind.id) {
    2f32:	29 2f       	mov	r18, r25
    2f34:	22 95       	swap	r18
    2f36:	2f 70       	andi	r18, 0x0F	; 15
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	22 30       	cpi	r18, 0x02	; 2
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	2c f4       	brge	.+10     	; 0x2f4a <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2f40:	9f 70       	andi	r25, 0x0F	; 15
    2f42:	41 f0       	breq	.+16     	; 0x2f54 <process_tapping+0x39c>
    2f44:	81 11       	cpse	r24, r1
    2f46:	06 c0       	rjmp	.+12     	; 0x2f54 <process_tapping+0x39c>
    2f48:	0c c0       	rjmp	.+24     	; 0x2f62 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    2f4a:	24 30       	cpi	r18, 0x04	; 4
    2f4c:	31 05       	cpc	r19, r1
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2f50:	9f 70       	andi	r25, 0x0F	; 15
    2f52:	49 f4       	brne	.+18     	; 0x2f66 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    2f54:	80 5e       	subi	r24, 0xE0	; 224
    2f56:	88 30       	cpi	r24, 0x08	; 8
    2f58:	20 f0       	brcs	.+8      	; 0x2f62 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    2f5a:	c8 01       	movw	r24, r16
    2f5c:	0e 94 de 11 	call	0x23bc	; 0x23bc <process_action>
                    return true;
    2f60:	cf 2c       	mov	r12, r15
    2f62:	dc 2c       	mov	r13, r12
    2f64:	06 c0       	rjmp	.+12     	; 0x2f72 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2f66:	d8 01       	movw	r26, r16
    2f68:	15 96       	adiw	r26, 0x05	; 5
    2f6a:	9c 91       	ld	r25, X
    2f6c:	90 7f       	andi	r25, 0xF0	; 240
    2f6e:	91 f7       	brne	.-28     	; 0x2f54 <process_tapping+0x39c>
    2f70:	f8 cf       	rjmp	.-16     	; 0x2f62 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2f72:	8d 2d       	mov	r24, r13
    2f74:	62 96       	adiw	r28, 0x12	; 18
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	df 91       	pop	r29
    2f82:	cf 91       	pop	r28
    2f84:	1f 91       	pop	r17
    2f86:	0f 91       	pop	r16
    2f88:	ff 90       	pop	r15
    2f8a:	ef 90       	pop	r14
    2f8c:	df 90       	pop	r13
    2f8e:	cf 90       	pop	r12
    2f90:	08 95       	ret

00002f92 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	2c 97       	sbiw	r28, 0x0c	; 12
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	4f 83       	std	Y+7, r20	; 0x07
    2faa:	58 87       	std	Y+8, r21	; 0x08
    2fac:	69 87       	std	Y+9, r22	; 0x09
    2fae:	7a 87       	std	Y+10, r23	; 0x0a
    2fb0:	8b 87       	std	Y+11, r24	; 0x0b
    2fb2:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	07 96       	adiw	r24, 0x07	; 7
    2fb8:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <process_tapping>
    2fbc:	88 23       	and	r24, r24
    2fbe:	c1 f0       	breq	.+48     	; 0x2ff0 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    2fc0:	2f 81       	ldd	r18, Y+7	; 0x07
    2fc2:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fc8:	89 2b       	or	r24, r25
    2fca:	31 f0       	breq	.+12     	; 0x2fd8 <action_tapping_process+0x46>
    2fcc:	3f 3f       	cpi	r19, 0xFF	; 255
    2fce:	11 f0       	breq	.+4      	; 0x2fd4 <action_tapping_process+0x42>
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	03 c0       	rjmp	.+6      	; 0x2fda <action_tapping_process+0x48>
    2fd4:	2f 3f       	cpi	r18, 0xFF	; 255
    2fd6:	e1 f7       	brne	.-8      	; 0x2fd0 <action_tapping_process+0x3e>
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	81 11       	cpse	r24, r1
    2fdc:	47 c0       	rjmp	.+142    	; 0x306c <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    2fde:	4f 81       	ldd	r20, Y+7	; 0x07
    2fe0:	58 85       	ldd	r21, Y+8	; 0x08
    2fe2:	69 85       	ldd	r22, Y+9	; 0x09
    2fe4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fe6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fe8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fea:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <debug_record>
    2fee:	3e c0       	rjmp	.+124    	; 0x306c <action_tapping_process+0xda>
    2ff0:	86 e0       	ldi	r24, 0x06	; 6
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	37 96       	adiw	r30, 0x07	; 7
    2ff6:	de 01       	movw	r26, r28
    2ff8:	11 96       	adiw	r26, 0x01	; 1
    2ffa:	01 90       	ld	r0, Z+
    2ffc:	0d 92       	st	X+, r0
    2ffe:	8a 95       	dec	r24
    3000:	e1 f7       	brne	.-8      	; 0x2ffa <action_tapping_process+0x68>
    3002:	ff 81       	ldd	r31, Y+7	; 0x07
    3004:	e8 85       	ldd	r30, Y+8	; 0x08
    3006:	4a 85       	ldd	r20, Y+10	; 0x0a
    3008:	5b 85       	ldd	r21, Y+11	; 0x0b
    300a:	41 15       	cp	r20, r1
    300c:	51 05       	cpc	r21, r1
    300e:	31 f0       	breq	.+12     	; 0x301c <action_tapping_process+0x8a>
    3010:	ef 3f       	cpi	r30, 0xFF	; 255
    3012:	31 f4       	brne	.+12     	; 0x3020 <action_tapping_process+0x8e>
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	ff 3f       	cpi	r31, 0xFF	; 255
    3018:	19 f4       	brne	.+6      	; 0x3020 <action_tapping_process+0x8e>
    301a:	03 c0       	rjmp	.+6      	; 0x3022 <action_tapping_process+0x90>
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <action_tapping_process+0x90>
    3020:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3022:	80 fd       	sbrc	r24, 0
    3024:	23 c0       	rjmp	.+70     	; 0x306c <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3026:	20 91 55 01 	lds	r18, 0x0155
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	c9 01       	movw	r24, r18
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	87 70       	andi	r24, 0x07	; 7
    3032:	99 27       	eor	r25, r25
    3034:	60 91 54 01 	lds	r22, 0x0154
    3038:	70 e0       	ldi	r23, 0x00	; 0
    303a:	86 17       	cp	r24, r22
    303c:	97 07       	cpc	r25, r23
    303e:	f1 f1       	breq	.+124    	; 0x30bc <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3040:	f9 83       	std	Y+1, r31	; 0x01
    3042:	ea 83       	std	Y+2, r30	; 0x02
    3044:	5d 83       	std	Y+5, r21	; 0x05
    3046:	4c 83       	std	Y+4, r20	; 0x04
    3048:	96 e0       	ldi	r25, 0x06	; 6
    304a:	92 9f       	mul	r25, r18
    304c:	d0 01       	movw	r26, r0
    304e:	93 9f       	mul	r25, r19
    3050:	b0 0d       	add	r27, r0
    3052:	11 24       	eor	r1, r1
    3054:	aa 5a       	subi	r26, 0xAA	; 170
    3056:	be 4f       	sbci	r27, 0xFE	; 254
    3058:	fe 01       	movw	r30, r28
    305a:	31 96       	adiw	r30, 0x01	; 1
    305c:	01 90       	ld	r0, Z+
    305e:	0d 92       	st	X+, r0
    3060:	9a 95       	dec	r25
    3062:	e1 f7       	brne	.-8      	; 0x305c <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3064:	80 93 55 01 	sts	0x0155, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3068:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    306c:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    306e:	80 91 54 01 	lds	r24, 0x0154
    3072:	90 91 55 01 	lds	r25, 0x0155
    3076:	89 17       	cp	r24, r25
    3078:	79 f1       	breq	.+94     	; 0x30d8 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    307a:	18 9f       	mul	r17, r24
    307c:	c0 01       	movw	r24, r0
    307e:	11 24       	eor	r1, r1
    3080:	8a 5a       	subi	r24, 0xAA	; 170
    3082:	9e 4f       	sbci	r25, 0xFE	; 254
    3084:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <process_tapping>
    3088:	88 23       	and	r24, r24
    308a:	31 f1       	breq	.+76     	; 0x30d8 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    308c:	e0 91 54 01 	lds	r30, 0x0154
    3090:	1e 9f       	mul	r17, r30
    3092:	f0 01       	movw	r30, r0
    3094:	11 24       	eor	r1, r1
    3096:	ea 5a       	subi	r30, 0xAA	; 170
    3098:	fe 4f       	sbci	r31, 0xFE	; 254
    309a:	40 81       	ld	r20, Z
    309c:	51 81       	ldd	r21, Z+1	; 0x01
    309e:	62 81       	ldd	r22, Z+2	; 0x02
    30a0:	73 81       	ldd	r23, Z+3	; 0x03
    30a2:	84 81       	ldd	r24, Z+4	; 0x04
    30a4:	95 81       	ldd	r25, Z+5	; 0x05
    30a6:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    30aa:	80 91 54 01 	lds	r24, 0x0154
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	01 96       	adiw	r24, 0x01	; 1
    30b2:	87 70       	andi	r24, 0x07	; 7
    30b4:	99 27       	eor	r25, r25
    30b6:	80 93 54 01 	sts	0x0154, r24
    30ba:	d9 cf       	rjmp	.-78     	; 0x306e <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    30bc:	0e 94 fd 14 	call	0x29fa	; 0x29fa <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    30c0:	10 92 55 01 	sts	0x0155, r1
    waiting_buffer_tail = 0;
    30c4:	10 92 54 01 	sts	0x0154, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    30c8:	e6 e8       	ldi	r30, 0x86	; 134
    30ca:	f1 e0       	ldi	r31, 0x01	; 1
    30cc:	86 e0       	ldi	r24, 0x06	; 6
    30ce:	df 01       	movw	r26, r30
    30d0:	1d 92       	st	X+, r1
    30d2:	8a 95       	dec	r24
    30d4:	e9 f7       	brne	.-6      	; 0x30d0 <action_tapping_process+0x13e>
    30d6:	ca cf       	rjmp	.-108    	; 0x306c <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    30d8:	2c 96       	adiw	r28, 0x0c	; 12
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	1f 91       	pop	r17
    30ea:	08 95       	ret

000030ec <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    30ec:	df 92       	push	r13
    30ee:	ef 92       	push	r14
    30f0:	ff 92       	push	r15
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	cf 93       	push	r28
    30f8:	df 93       	push	r29
    30fa:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	09 f4       	brne	.+2      	; 0x3102 <action_macro_play+0x16>
    3100:	8a c0       	rjmp	.+276    	; 0x3216 <action_macro_play+0x12a>
    3102:	e1 2c       	mov	r14, r1
    3104:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3106:	dd 24       	eor	r13, r13
    3108:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    310a:	ef 01       	movw	r28, r30
    310c:	21 96       	adiw	r28, 0x01	; 1
    310e:	84 91       	lpm	r24, Z
    3110:	85 37       	cpi	r24, 0x75	; 117
    3112:	09 f4       	brne	.+2      	; 0x3116 <action_macro_play+0x2a>
    3114:	61 c0       	rjmp	.+194    	; 0x31d8 <action_macro_play+0xec>
    3116:	58 f4       	brcc	.+22     	; 0x312e <action_macro_play+0x42>
    3118:	84 37       	cpi	r24, 0x74	; 116
    311a:	08 f0       	brcs	.+2      	; 0x311e <action_macro_play+0x32>
    311c:	4e c0       	rjmp	.+156    	; 0x31ba <action_macro_play+0xce>
    311e:	84 30       	cpi	r24, 0x04	; 4
    3120:	08 f0       	brcs	.+2      	; 0x3124 <action_macro_play+0x38>
    3122:	6a c0       	rjmp	.+212    	; 0x31f8 <action_macro_play+0x10c>
    3124:	81 30       	cpi	r24, 0x01	; 1
    3126:	d1 f0       	breq	.+52     	; 0x315c <action_macro_play+0x70>
    3128:	82 30       	cpi	r24, 0x02	; 2
    312a:	71 f1       	breq	.+92     	; 0x3188 <action_macro_play+0x9c>
    312c:	74 c0       	rjmp	.+232    	; 0x3216 <action_macro_play+0x12a>
    312e:	88 37       	cpi	r24, 0x78	; 120
    3130:	09 f4       	brne	.+2      	; 0x3134 <action_macro_play+0x48>
    3132:	5d c0       	rjmp	.+186    	; 0x31ee <action_macro_play+0x102>
    3134:	50 f4       	brcc	.+20     	; 0x314a <action_macro_play+0x5e>
    3136:	86 37       	cpi	r24, 0x76	; 118
    3138:	09 f4       	brne	.+2      	; 0x313c <action_macro_play+0x50>
    313a:	55 c0       	rjmp	.+170    	; 0x31e6 <action_macro_play+0xfa>
    313c:	87 37       	cpi	r24, 0x77	; 119
    313e:	09 f0       	breq	.+2      	; 0x3142 <action_macro_play+0x56>
    3140:	6a c0       	rjmp	.+212    	; 0x3216 <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3142:	8e 2d       	mov	r24, r14
    3144:	0e 94 ad 1a 	call	0x355a	; 0x355a <set_mods>
    3148:	54 c0       	rjmp	.+168    	; 0x31f2 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    314a:	9c e7       	ldi	r25, 0x7C	; 124
    314c:	98 0f       	add	r25, r24
    314e:	90 37       	cpi	r25, 0x70	; 112
    3150:	08 f0       	brcs	.+2      	; 0x3154 <action_macro_play+0x68>
    3152:	61 c0       	rjmp	.+194    	; 0x3216 <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3154:	8f 77       	andi	r24, 0x7F	; 127
    3156:	0e 94 81 11 	call	0x2302	; 0x2302 <unregister_code>
                break;
    315a:	50 c0       	rjmp	.+160    	; 0x31fc <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    315c:	8f 01       	movw	r16, r30
    315e:	0e 5f       	subi	r16, 0xFE	; 254
    3160:	1f 4f       	sbci	r17, 0xFF	; 255
    3162:	fe 01       	movw	r30, r28
    3164:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3166:	90 e2       	ldi	r25, 0x20	; 32
    3168:	98 0f       	add	r25, r24
    316a:	98 30       	cpi	r25, 0x08	; 8
    316c:	50 f4       	brcc	.+20     	; 0x3182 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    316e:	87 70       	andi	r24, 0x07	; 7
    3170:	fd 2d       	mov	r31, r13
    3172:	01 c0       	rjmp	.+2      	; 0x3176 <action_macro_play+0x8a>
    3174:	ff 0f       	add	r31, r31
    3176:	8a 95       	dec	r24
    3178:	ea f7       	brpl	.-6      	; 0x3174 <action_macro_play+0x88>
    317a:	8f 2f       	mov	r24, r31
    317c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <add_weak_mods>
    3180:	15 c0       	rjmp	.+42     	; 0x31ac <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3182:	0e 94 ae 10 	call	0x215c	; 0x215c <register_code>
    3186:	14 c0       	rjmp	.+40     	; 0x31b0 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3188:	8f 01       	movw	r16, r30
    318a:	0e 5f       	subi	r16, 0xFE	; 254
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	fe 01       	movw	r30, r28
    3190:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3192:	90 e2       	ldi	r25, 0x20	; 32
    3194:	98 0f       	add	r25, r24
    3196:	98 30       	cpi	r25, 0x08	; 8
    3198:	68 f4       	brcc	.+26     	; 0x31b4 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    319a:	87 70       	andi	r24, 0x07	; 7
    319c:	fd 2d       	mov	r31, r13
    319e:	01 c0       	rjmp	.+2      	; 0x31a2 <action_macro_play+0xb6>
    31a0:	ff 0f       	add	r31, r31
    31a2:	8a 95       	dec	r24
    31a4:	ea f7       	brpl	.-6      	; 0x31a0 <action_macro_play+0xb4>
    31a6:	8f 2f       	mov	r24, r31
    31a8:	0e 94 b9 1a 	call	0x3572	; 0x3572 <del_weak_mods>
                    send_keyboard_report();
    31ac:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    31b0:	e8 01       	movw	r28, r16
    31b2:	24 c0       	rjmp	.+72     	; 0x31fc <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    31b4:	0e 94 81 11 	call	0x2302	; 0x2302 <unregister_code>
    31b8:	fb cf       	rjmp	.-10     	; 0x31b0 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    31ba:	9f 01       	movw	r18, r30
    31bc:	2e 5f       	subi	r18, 0xFE	; 254
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
    31c0:	fe 01       	movw	r30, r28
    31c2:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    31c4:	cc 23       	and	r28, r28
    31c6:	69 f0       	breq	.+26     	; 0x31e2 <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    31c8:	8f e9       	ldi	r24, 0x9F	; 159
    31ca:	9f e0       	ldi	r25, 0x0F	; 15
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <action_macro_play+0xe0>
    31d0:	00 c0       	rjmp	.+0      	; 0x31d2 <action_macro_play+0xe6>
    31d2:	00 00       	nop
    31d4:	c1 50       	subi	r28, 0x01	; 1
    31d6:	f6 cf       	rjmp	.-20     	; 0x31c4 <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    31d8:	9f 01       	movw	r18, r30
    31da:	2e 5f       	subi	r18, 0xFE	; 254
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	fe 01       	movw	r30, r28
    31e0:	f4 90       	lpm	r15, Z
    31e2:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    31e4:	0b c0       	rjmp	.+22     	; 0x31fc <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    31e6:	0e 94 9d 1a 	call	0x353a	; 0x353a <get_mods>
    31ea:	e8 2e       	mov	r14, r24
                break;
    31ec:	07 c0       	rjmp	.+14     	; 0x31fc <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    31ee:	0e 94 b0 1a 	call	0x3560	; 0x3560 <clear_mods>
                send_keyboard_report();
    31f2:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <send_keyboard_report>
                break;
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    31f8:	0e 94 ae 10 	call	0x215c	; 0x215c <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    31fc:	9f 2d       	mov	r25, r15
    31fe:	99 23       	and	r25, r25
    3200:	41 f0       	breq	.+16     	; 0x3212 <action_macro_play+0x126>
    3202:	ef e9       	ldi	r30, 0x9F	; 159
    3204:	ff e0       	ldi	r31, 0x0F	; 15
    3206:	31 97       	sbiw	r30, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <action_macro_play+0x11a>
    320a:	00 c0       	rjmp	.+0      	; 0x320c <action_macro_play+0x120>
    320c:	00 00       	nop
    320e:	91 50       	subi	r25, 0x01	; 1
    3210:	f6 cf       	rjmp	.-20     	; 0x31fe <action_macro_play+0x112>
    3212:	fe 01       	movw	r30, r28
    3214:	7a cf       	rjmp	.-268    	; 0x310a <action_macro_play+0x1e>
    }
}
    3216:	df 91       	pop	r29
    3218:	cf 91       	pop	r28
    321a:	1f 91       	pop	r17
    321c:	0f 91       	pop	r16
    321e:	ff 90       	pop	r15
    3220:	ef 90       	pop	r14
    3222:	df 90       	pop	r13
    3224:	08 95       	ret

00003226 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3226:	60 93 8c 01 	sts	0x018C, r22
    322a:	70 93 8d 01 	sts	0x018D, r23
    322e:	80 93 8e 01 	sts	0x018E, r24
    3232:	90 93 8f 01 	sts	0x018F, r25
    hook_layer_change(layer_state);
    3236:	86 2f       	mov	r24, r22
    3238:	0e 94 33 1b 	call	0x3666	; 0x3666 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    323c:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <clear_keyboard_but_mods>

00003240 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3240:	08 95       	ret

00003242 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3242:	60 93 90 01 	sts	0x0190, r22
    3246:	70 93 91 01 	sts	0x0191, r23
    324a:	80 93 92 01 	sts	0x0192, r24
    324e:	90 93 93 01 	sts	0x0193, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3252:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <clear_keyboard_but_mods>

00003256 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3256:	0f 93       	push	r16
    3258:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    325a:	00 91 90 01 	lds	r16, 0x0190
    325e:	10 91 91 01 	lds	r17, 0x0191
    3262:	20 91 92 01 	lds	r18, 0x0192
    3266:	30 91 93 01 	lds	r19, 0x0193
    326a:	06 2b       	or	r16, r22
    326c:	17 2b       	or	r17, r23
    326e:	28 2b       	or	r18, r24
    3270:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3272:	00 93 90 01 	sts	0x0190, r16
    3276:	10 93 91 01 	sts	0x0191, r17
    327a:	20 93 92 01 	sts	0x0192, r18
    327e:	30 93 93 01 	sts	0x0193, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3286:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <clear_keyboard_but_mods>

0000328a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    328a:	0f 93       	push	r16
    328c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    328e:	00 91 90 01 	lds	r16, 0x0190
    3292:	10 91 91 01 	lds	r17, 0x0191
    3296:	20 91 92 01 	lds	r18, 0x0192
    329a:	30 91 93 01 	lds	r19, 0x0193
    329e:	06 23       	and	r16, r22
    32a0:	17 23       	and	r17, r23
    32a2:	28 23       	and	r18, r24
    32a4:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    32a6:	00 93 90 01 	sts	0x0190, r16
    32aa:	10 93 91 01 	sts	0x0191, r17
    32ae:	20 93 92 01 	sts	0x0192, r18
    32b2:	30 93 93 01 	sts	0x0193, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    32b6:	1f 91       	pop	r17
    32b8:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    32ba:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <clear_keyboard_but_mods>

000032be <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    32c2:	00 91 90 01 	lds	r16, 0x0190
    32c6:	10 91 91 01 	lds	r17, 0x0191
    32ca:	20 91 92 01 	lds	r18, 0x0192
    32ce:	30 91 93 01 	lds	r19, 0x0193
    32d2:	06 27       	eor	r16, r22
    32d4:	17 27       	eor	r17, r23
    32d6:	28 27       	eor	r18, r24
    32d8:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    32da:	00 93 90 01 	sts	0x0190, r16
    32de:	10 93 91 01 	sts	0x0191, r17
    32e2:	20 93 92 01 	sts	0x0192, r18
    32e6:	30 93 93 01 	sts	0x0193, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    32ee:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <clear_keyboard_but_mods>

000032f2 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	cb 01       	movw	r24, r22
    32f8:	0c 94 13 19 	jmp	0x3226	; 0x3226 <layer_state_set>

000032fc <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    32fc:	41 e0       	ldi	r20, 0x01	; 1
    32fe:	50 e0       	ldi	r21, 0x00	; 0
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	70 e0       	ldi	r23, 0x00	; 0
    3304:	04 c0       	rjmp	.+8      	; 0x330e <layer_move+0x12>
    3306:	44 0f       	add	r20, r20
    3308:	55 1f       	adc	r21, r21
    330a:	66 1f       	adc	r22, r22
    330c:	77 1f       	adc	r23, r23
    330e:	8a 95       	dec	r24
    3310:	d2 f7       	brpl	.-12     	; 0x3306 <layer_move+0xa>
    3312:	cb 01       	movw	r24, r22
    3314:	ba 01       	movw	r22, r20
    3316:	0c 94 13 19 	jmp	0x3226	; 0x3226 <layer_state_set>

0000331a <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    331a:	41 e0       	ldi	r20, 0x01	; 1
    331c:	50 e0       	ldi	r21, 0x00	; 0
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	70 e0       	ldi	r23, 0x00	; 0
    3322:	04 c0       	rjmp	.+8      	; 0x332c <layer_on+0x12>
    3324:	44 0f       	add	r20, r20
    3326:	55 1f       	adc	r21, r21
    3328:	66 1f       	adc	r22, r22
    332a:	77 1f       	adc	r23, r23
    332c:	8a 95       	dec	r24
    332e:	d2 f7       	brpl	.-12     	; 0x3324 <layer_on+0xa>
    3330:	80 91 8c 01 	lds	r24, 0x018C
    3334:	90 91 8d 01 	lds	r25, 0x018D
    3338:	a0 91 8e 01 	lds	r26, 0x018E
    333c:	b0 91 8f 01 	lds	r27, 0x018F
    3340:	48 2b       	or	r20, r24
    3342:	59 2b       	or	r21, r25
    3344:	6a 2b       	or	r22, r26
    3346:	7b 2b       	or	r23, r27
    3348:	cb 01       	movw	r24, r22
    334a:	ba 01       	movw	r22, r20
    334c:	0c 94 13 19 	jmp	0x3226	; 0x3226 <layer_state_set>

00003350 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3350:	41 e0       	ldi	r20, 0x01	; 1
    3352:	50 e0       	ldi	r21, 0x00	; 0
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	04 c0       	rjmp	.+8      	; 0x3362 <layer_off+0x12>
    335a:	44 0f       	add	r20, r20
    335c:	55 1f       	adc	r21, r21
    335e:	66 1f       	adc	r22, r22
    3360:	77 1f       	adc	r23, r23
    3362:	8a 95       	dec	r24
    3364:	d2 f7       	brpl	.-12     	; 0x335a <layer_off+0xa>
    3366:	40 95       	com	r20
    3368:	50 95       	com	r21
    336a:	60 95       	com	r22
    336c:	70 95       	com	r23
    336e:	80 91 8c 01 	lds	r24, 0x018C
    3372:	90 91 8d 01 	lds	r25, 0x018D
    3376:	a0 91 8e 01 	lds	r26, 0x018E
    337a:	b0 91 8f 01 	lds	r27, 0x018F
    337e:	48 23       	and	r20, r24
    3380:	59 23       	and	r21, r25
    3382:	6a 23       	and	r22, r26
    3384:	7b 23       	and	r23, r27
    3386:	cb 01       	movw	r24, r22
    3388:	ba 01       	movw	r22, r20
    338a:	0c 94 13 19 	jmp	0x3226	; 0x3226 <layer_state_set>

0000338e <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    338e:	41 e0       	ldi	r20, 0x01	; 1
    3390:	50 e0       	ldi	r21, 0x00	; 0
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	70 e0       	ldi	r23, 0x00	; 0
    3396:	04 c0       	rjmp	.+8      	; 0x33a0 <layer_invert+0x12>
    3398:	44 0f       	add	r20, r20
    339a:	55 1f       	adc	r21, r21
    339c:	66 1f       	adc	r22, r22
    339e:	77 1f       	adc	r23, r23
    33a0:	8a 95       	dec	r24
    33a2:	d2 f7       	brpl	.-12     	; 0x3398 <layer_invert+0xa>
    33a4:	80 91 8c 01 	lds	r24, 0x018C
    33a8:	90 91 8d 01 	lds	r25, 0x018D
    33ac:	a0 91 8e 01 	lds	r26, 0x018E
    33b0:	b0 91 8f 01 	lds	r27, 0x018F
    33b4:	48 27       	eor	r20, r24
    33b6:	59 27       	eor	r21, r25
    33b8:	6a 27       	eor	r22, r26
    33ba:	7b 27       	eor	r23, r27
    33bc:	cb 01       	movw	r24, r22
    33be:	ba 01       	movw	r22, r20
    33c0:	0c 94 13 19 	jmp	0x3226	; 0x3226 <layer_state_set>

000033c4 <layer_or>:
}

void layer_or(uint32_t state)
{
    33c4:	0f 93       	push	r16
    33c6:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    33c8:	00 91 8c 01 	lds	r16, 0x018C
    33cc:	10 91 8d 01 	lds	r17, 0x018D
    33d0:	20 91 8e 01 	lds	r18, 0x018E
    33d4:	30 91 8f 01 	lds	r19, 0x018F
    33d8:	60 2b       	or	r22, r16
    33da:	71 2b       	or	r23, r17
    33dc:	82 2b       	or	r24, r18
    33de:	93 2b       	or	r25, r19
}
    33e0:	1f 91       	pop	r17
    33e2:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    33e4:	0c 94 13 19 	jmp	0x3226	; 0x3226 <layer_state_set>

000033e8 <layer_and>:
}
void layer_and(uint32_t state)
{
    33e8:	0f 93       	push	r16
    33ea:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    33ec:	00 91 8c 01 	lds	r16, 0x018C
    33f0:	10 91 8d 01 	lds	r17, 0x018D
    33f4:	20 91 8e 01 	lds	r18, 0x018E
    33f8:	30 91 8f 01 	lds	r19, 0x018F
    33fc:	60 23       	and	r22, r16
    33fe:	71 23       	and	r23, r17
    3400:	82 23       	and	r24, r18
    3402:	93 23       	and	r25, r19
}
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3408:	0c 94 13 19 	jmp	0x3226	; 0x3226 <layer_state_set>

0000340c <layer_xor>:
}
void layer_xor(uint32_t state)
{
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3410:	00 91 8c 01 	lds	r16, 0x018C
    3414:	10 91 8d 01 	lds	r17, 0x018D
    3418:	20 91 8e 01 	lds	r18, 0x018E
    341c:	30 91 8f 01 	lds	r19, 0x018F
    3420:	60 27       	eor	r22, r16
    3422:	71 27       	eor	r23, r17
    3424:	82 27       	eor	r24, r18
    3426:	93 27       	eor	r25, r19
}
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    342c:	0c 94 13 19 	jmp	0x3226	; 0x3226 <layer_state_set>

00003430 <layer_debug>:
}

void layer_debug(void)
{
    3430:	08 95       	ret

00003432 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3432:	cf 92       	push	r12
    3434:	df 92       	push	r13
    3436:	ef 92       	push	r14
    3438:	ff 92       	push	r15
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    343e:	cf 93       	push	r28
    3440:	df 93       	push	r29
    3442:	ec 01       	movw	r28, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3444:	c0 90 90 01 	lds	r12, 0x0190
    3448:	d0 90 91 01 	lds	r13, 0x0191
    344c:	e0 90 92 01 	lds	r14, 0x0192
    3450:	f0 90 93 01 	lds	r15, 0x0193
    3454:	80 91 8c 01 	lds	r24, 0x018C
    3458:	90 91 8d 01 	lds	r25, 0x018D
    345c:	a0 91 8e 01 	lds	r26, 0x018E
    3460:	b0 91 8f 01 	lds	r27, 0x018F
    3464:	c8 2a       	or	r12, r24
    3466:	d9 2a       	or	r13, r25
    3468:	ea 2a       	or	r14, r26
    346a:	fb 2a       	or	r15, r27
    346c:	0f e1       	ldi	r16, 0x1F	; 31
    346e:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3470:	b7 01       	movw	r22, r14
    3472:	a6 01       	movw	r20, r12
    3474:	00 2e       	mov	r0, r16
    3476:	04 c0       	rjmp	.+8      	; 0x3480 <layer_switch_get_action+0x4e>
    3478:	76 95       	lsr	r23
    347a:	67 95       	ror	r22
    347c:	57 95       	ror	r21
    347e:	47 95       	ror	r20
    3480:	0a 94       	dec	r0
    3482:	d2 f7       	brpl	.-12     	; 0x3478 <layer_switch_get_action+0x46>
    3484:	40 ff       	sbrs	r20, 0
    3486:	07 c0       	rjmp	.+14     	; 0x3496 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3488:	be 01       	movw	r22, r28
    348a:	80 2f       	mov	r24, r16
    348c:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3490:	81 30       	cpi	r24, 0x01	; 1
    3492:	91 05       	cpc	r25, r1
    3494:	39 f4       	brne	.+14     	; 0x34a4 <layer_switch_get_action+0x72>
    3496:	01 50       	subi	r16, 0x01	; 1
    3498:	11 09       	sbc	r17, r1
    349a:	50 f7       	brcc	.-44     	; 0x3470 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    349c:	be 01       	movw	r22, r28
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	ff 90       	pop	r15
    34ae:	ef 90       	pop	r14
    34b0:	df 90       	pop	r13
    34b2:	cf 90       	pop	r12
    34b4:	08 95       	ret

000034b6 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    34b6:	40 91 0c 01 	lds	r20, 0x010C
    34ba:	50 91 0d 01 	lds	r21, 0x010D
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    34c2:	9f ef       	ldi	r25, 0xFF	; 255
    34c4:	fa 01       	movw	r30, r20
    34c6:	e2 0f       	add	r30, r18
    34c8:	f3 1f       	adc	r31, r19
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    34ca:	62 81       	ldd	r22, Z+2	; 0x02
    34cc:	68 17       	cp	r22, r24
    34ce:	99 f0       	breq	.+38     	; 0x34f6 <add_key+0x40>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    34d0:	9f 3f       	cpi	r25, 0xFF	; 255
    34d2:	19 f4       	brne	.+6      	; 0x34da <add_key+0x24>
    34d4:	61 11       	cpse	r22, r1
    34d6:	01 c0       	rjmp	.+2      	; 0x34da <add_key+0x24>
    34d8:	92 2f       	mov	r25, r18
    34da:	2f 5f       	subi	r18, 0xFF	; 255
    34dc:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    34de:	26 30       	cpi	r18, 0x06	; 6
    34e0:	31 05       	cpc	r19, r1
    34e2:	81 f7       	brne	.-32     	; 0x34c4 <add_key+0xe>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    34e4:	9f 3f       	cpi	r25, 0xFF	; 255
    34e6:	39 f0       	breq	.+14     	; 0x34f6 <add_key+0x40>
            keyboard_report->keys[empty] = code;
    34e8:	fa 01       	movw	r30, r20
    34ea:	e9 0f       	add	r30, r25
    34ec:	f1 1d       	adc	r31, r1
    34ee:	97 fd       	sbrc	r25, 7
    34f0:	fa 95       	dec	r31
    34f2:	82 83       	std	Z+2, r24	; 0x02
    34f4:	08 95       	ret
    34f6:	08 95       	ret

000034f8 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    34f8:	40 91 0c 01 	lds	r20, 0x010C
    34fc:	50 91 0d 01 	lds	r21, 0x010D
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	fa 01       	movw	r30, r20
    3506:	e2 0f       	add	r30, r18
    3508:	f3 1f       	adc	r31, r19
    350a:	92 81       	ldd	r25, Z+2	; 0x02
    350c:	98 13       	cpse	r25, r24
    350e:	01 c0       	rjmp	.+2      	; 0x3512 <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    3510:	12 82       	std	Z+2, r1	; 0x02
    3512:	2f 5f       	subi	r18, 0xFF	; 255
    3514:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3516:	26 30       	cpi	r18, 0x06	; 6
    3518:	31 05       	cpc	r19, r1
    351a:	a1 f7       	brne	.-24     	; 0x3504 <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    351c:	08 95       	ret

0000351e <clear_keys>:

void clear_keys(void)
{
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3522:	e0 91 0c 01 	lds	r30, 0x010C
    3526:	f0 91 0d 01 	lds	r31, 0x010D
    352a:	e8 0f       	add	r30, r24
    352c:	f9 1f       	adc	r31, r25
    352e:	10 82       	st	Z, r1
    3530:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3532:	88 30       	cpi	r24, 0x08	; 8
    3534:	91 05       	cpc	r25, r1
    3536:	a9 f7       	brne	.-22     	; 0x3522 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3538:	08 95       	ret

0000353a <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    353a:	80 91 9e 01 	lds	r24, 0x019E
    353e:	08 95       	ret

00003540 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3540:	90 91 9e 01 	lds	r25, 0x019E
    3544:	98 2b       	or	r25, r24
    3546:	90 93 9e 01 	sts	0x019E, r25
    354a:	08 95       	ret

0000354c <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    354c:	80 95       	com	r24
    354e:	90 91 9e 01 	lds	r25, 0x019E
    3552:	98 23       	and	r25, r24
    3554:	90 93 9e 01 	sts	0x019E, r25
    3558:	08 95       	ret

0000355a <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    355a:	80 93 9e 01 	sts	0x019E, r24
    355e:	08 95       	ret

00003560 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3560:	10 92 9e 01 	sts	0x019E, r1
    3564:	08 95       	ret

00003566 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3566:	90 91 9d 01 	lds	r25, 0x019D
    356a:	98 2b       	or	r25, r24
    356c:	90 93 9d 01 	sts	0x019D, r25
    3570:	08 95       	ret

00003572 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3572:	80 95       	com	r24
    3574:	90 91 9d 01 	lds	r25, 0x019D
    3578:	98 23       	and	r25, r24
    357a:	90 93 9d 01 	sts	0x019D, r25
    357e:	08 95       	ret

00003580 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3580:	10 92 9d 01 	sts	0x019D, r1
    3584:	08 95       	ret

00003586 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3586:	80 93 94 01 	sts	0x0194, r24
    358a:	08 95       	ret

0000358c <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    358c:	10 92 94 01 	sts	0x0194, r1
    3590:	08 95       	ret

00003592 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3592:	40 91 0c 01 	lds	r20, 0x010C
    3596:	50 91 0d 01 	lds	r21, 0x010D
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	fa 01       	movw	r30, r20
    35a2:	e2 0f       	add	r30, r18
    35a4:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	91 11       	cpse	r25, r1
            cnt++;
    35aa:	8f 5f       	subi	r24, 0xFF	; 255
    35ac:	2f 5f       	subi	r18, 0xFF	; 255
    35ae:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    35b0:	27 30       	cpi	r18, 0x07	; 7
    35b2:	31 05       	cpc	r19, r1
    35b4:	a9 f7       	brne	.-22     	; 0x35a0 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    35b6:	08 95       	ret

000035b8 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    35b8:	e0 91 0c 01 	lds	r30, 0x010C
    35bc:	f0 91 0d 01 	lds	r31, 0x010D
    35c0:	80 91 9e 01 	lds	r24, 0x019E
    35c4:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    35c6:	e0 91 0c 01 	lds	r30, 0x010C
    35ca:	f0 91 0d 01 	lds	r31, 0x010D
    35ce:	80 81       	ld	r24, Z
    35d0:	90 91 9d 01 	lds	r25, 0x019D
    35d4:	89 2b       	or	r24, r25
    35d6:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    35d8:	90 91 94 01 	lds	r25, 0x0194
    35dc:	99 23       	and	r25, r25
    35de:	61 f0       	breq	.+24     	; 0x35f8 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    35e0:	e0 91 0c 01 	lds	r30, 0x010C
    35e4:	f0 91 0d 01 	lds	r31, 0x010D
    35e8:	80 81       	ld	r24, Z
    35ea:	89 2b       	or	r24, r25
    35ec:	80 83       	st	Z, r24
        if (has_anykey()) {
    35ee:	0e 94 c9 1a 	call	0x3592	; 0x3592 <has_anykey>
    35f2:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    35f4:	10 92 94 01 	sts	0x0194, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    35f8:	80 91 0c 01 	lds	r24, 0x010C
    35fc:	90 91 0d 01 	lds	r25, 0x010D
    3600:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <host_keyboard_send>

00003604 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3604:	90 93 33 01 	sts	0x0133, r25
    3608:	80 93 32 01 	sts	0x0132, r24
    360c:	08 95       	ret

0000360e <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    360e:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3610:	98 2f       	mov	r25, r24
    3612:	9c 7c       	andi	r25, 0xCC	; 204
    3614:	96 95       	lsr	r25
    3616:	96 95       	lsr	r25
    3618:	83 73       	andi	r24, 0x33	; 51
    361a:	44 e0       	ldi	r20, 0x04	; 4
    361c:	84 9f       	mul	r24, r20
    361e:	90 01       	movw	r18, r0
    3620:	11 24       	eor	r1, r1
    3622:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3624:	89 2f       	mov	r24, r25
    3626:	8a 7a       	andi	r24, 0xAA	; 170
    3628:	86 95       	lsr	r24
    362a:	95 75       	andi	r25, 0x55	; 85
    362c:	99 0f       	add	r25, r25
    return bits;
}
    362e:	89 2b       	or	r24, r25
    3630:	08 95       	ret

00003632 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3632:	1f 93       	push	r17
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	1f 92       	push	r1
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    363e:	99 83       	std	Y+1, r25	; 0x01
    3640:	0e 94 07 1b 	call	0x360e	; 0x360e <bitrev>
    3644:	18 2f       	mov	r17, r24
    3646:	99 81       	ldd	r25, Y+1	; 0x01
    3648:	89 2f       	mov	r24, r25
    364a:	0e 94 07 1b 	call	0x360e	; 0x360e <bitrev>
    364e:	21 2f       	mov	r18, r17
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	32 2f       	mov	r19, r18
    3654:	22 27       	eor	r18, r18
    return bits;
}
    3656:	a9 01       	movw	r20, r18
    3658:	48 2b       	or	r20, r24
    365a:	ca 01       	movw	r24, r20
    365c:	0f 90       	pop	r0
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	1f 91       	pop	r17
    3664:	08 95       	ret

00003666 <hook_layer_change>:
 * ------------------------------------------------- */

/* Called on layer state change event. */
/* Default behaviour: do nothing. */
__attribute__((weak))
void hook_layer_change(uint8_t layer_state) {
    3666:	08 95       	ret

00003668 <hook_keyboard_loop>:
}

/* Called periodically from the matrix scan loop (very often!) */
/* Default behaviour: do nothing. */
__attribute__((weak))
void hook_keyboard_loop(void) {}
    3668:	08 95       	ret

0000366a <hook_matrix_change>:

/* Called on matrix state change event (every keypress => often!) */
/* Default behaviour: do nothing. */
__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    366a:	cf 93       	push	r28
    366c:	df 93       	push	r29
    366e:	00 d0       	rcall	.+0      	; 0x3670 <hook_matrix_change+0x6>
    3670:	00 d0       	rcall	.+0      	; 0x3672 <hook_matrix_change+0x8>
    3672:	1f 92       	push	r1
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
	(void)event;
}
    3678:	0f 90       	pop	r0
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	0f 90       	pop	r0
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	08 95       	ret

00003688 <hook_keyboard_leds_change>:

/* Called on indicator LED update event (when reported from host). */
/* Default behaviour: calls led_set (for compatibility). */
__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3688:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <keyboard_set_leds>

0000368c <hook_bootmagic>:
}

/* Called once, on checking the bootmagic combos. */
/* Default behaviour: do nothing. */
__attribute__((weak))
void hook_bootmagic(void) {
    368c:	08 95       	ret

0000368e <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    368e:	80 91 b4 01 	lds	r24, 0x01B4
    3692:	84 30       	cpi	r24, 0x04	; 4
    3694:	09 f1       	breq	.+66     	; 0x36d8 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3696:	10 92 a0 01 	sts	0x01A0, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    369a:	20 e4       	ldi	r18, 0x40	; 64
    369c:	88 e1       	ldi	r24, 0x18	; 24
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	a8 95       	wdr
    36a6:	80 93 60 00 	sts	0x0060, r24
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    36b0:	83 b7       	in	r24, 0x33	; 51
    36b2:	81 7f       	andi	r24, 0xF1	; 241
    36b4:	84 60       	ori	r24, 0x04	; 4
    36b6:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    36b8:	83 b7       	in	r24, 0x33	; 51
    36ba:	81 60       	ori	r24, 0x01	; 1
    36bc:	83 bf       	out	0x33, r24	; 51
    sei();
    36be:	78 94       	sei
    sleep_cpu();
    36c0:	88 95       	sleep
    sleep_disable();
    36c2:	83 b7       	in	r24, 0x33	; 51
    36c4:	8e 7f       	andi	r24, 0xFE	; 254
    36c6:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    36c8:	88 e1       	ldi	r24, 0x18	; 24
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	80 93 60 00 	sts	0x0060, r24
    36d2:	10 92 60 00 	sts	0x0060, r1
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	08 95       	ret

000036da <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    36da:	08 95       	ret

000036dc <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    36dc:	08 95       	ret

000036de <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    36de:	cf 93       	push	r28
    matrix_power_up();
    36e0:	0e 94 6d 1b 	call	0x36da	; 0x36da <matrix_power_up>
    matrix_scan();
    36e4:	0e 94 90 06 	call	0xd20	; 0xd20 <matrix_scan>
    matrix_power_down();
    36e8:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    36ec:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    36ee:	8c 2f       	mov	r24, r28
    36f0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <matrix_get_row>
    36f4:	81 11       	cpse	r24, r1
    36f6:	05 c0       	rjmp	.+10     	; 0x3702 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    36f8:	cf 5f       	subi	r28, 0xFF	; 255
    36fa:	c4 30       	cpi	r28, 0x04	; 4
    36fc:	c1 f7       	brne	.-16     	; 0x36ee <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3704:	cf 91       	pop	r28
    3706:	08 95       	ret

00003708 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3708:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <clear_keyboard>

0000370c <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    370c:	1f 92       	push	r1
    370e:	0f 92       	push	r0
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	0f 92       	push	r0
    3714:	11 24       	eor	r1, r1
    3716:	8f 93       	push	r24
    3718:	9f 93       	push	r25
    371a:	af 93       	push	r26
    371c:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    371e:	80 91 a0 01 	lds	r24, 0x01A0
    3722:	81 11       	cpse	r24, r1
    3724:	13 c0       	rjmp	.+38     	; 0x374c <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3726:	80 91 a1 01 	lds	r24, 0x01A1
    372a:	90 91 a2 01 	lds	r25, 0x01A2
    372e:	a0 91 a3 01 	lds	r26, 0x01A3
    3732:	b0 91 a4 01 	lds	r27, 0x01A4
    3736:	41 96       	adiw	r24, 0x11	; 17
    3738:	a1 1d       	adc	r26, r1
    373a:	b1 1d       	adc	r27, r1
    373c:	80 93 a1 01 	sts	0x01A1, r24
    3740:	90 93 a2 01 	sts	0x01A2, r25
    3744:	a0 93 a3 01 	sts	0x01A3, r26
    3748:	b0 93 a4 01 	sts	0x01A4, r27
            break;
        default:
            ;
    }
}
    374c:	bf 91       	pop	r27
    374e:	af 91       	pop	r26
    3750:	9f 91       	pop	r25
    3752:	8f 91       	pop	r24
    3754:	0f 90       	pop	r0
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	0f 90       	pop	r0
    375a:	1f 90       	pop	r1
    375c:	18 95       	reti

0000375e <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    375e:	82 e0       	ldi	r24, 0x02	; 2
    3760:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3762:	93 e0       	ldi	r25, 0x03	; 3
    3764:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3766:	9a ef       	ldi	r25, 0xFA	; 250
    3768:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    376a:	80 93 6e 00 	sts	0x006E, r24
    376e:	08 95       	ret

00003770 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3770:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3772:	f8 94       	cli
    t = timer_count;
    3774:	80 91 a1 01 	lds	r24, 0x01A1
    3778:	90 91 a2 01 	lds	r25, 0x01A2
    377c:	a0 91 a3 01 	lds	r26, 0x01A3
    3780:	b0 91 a4 01 	lds	r27, 0x01A4
    SREG = sreg;
    3784:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3786:	08 95       	ret

00003788 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3788:	2f b7       	in	r18, 0x3f	; 63
    cli();
    378a:	f8 94       	cli
    t = timer_count;
    378c:	60 91 a1 01 	lds	r22, 0x01A1
    3790:	70 91 a2 01 	lds	r23, 0x01A2
    3794:	80 91 a3 01 	lds	r24, 0x01A3
    3798:	90 91 a4 01 	lds	r25, 0x01A4
    SREG = sreg;
    379c:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    379e:	08 95       	ret

000037a0 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    37a0:	cf 92       	push	r12
    37a2:	df 92       	push	r13
    37a4:	ef 92       	push	r14
    37a6:	ff 92       	push	r15
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    37ac:	2f b7       	in	r18, 0x3f	; 63
    cli();
    37ae:	f8 94       	cli
    t = timer_count;
    37b0:	40 91 a1 01 	lds	r20, 0x01A1
    37b4:	50 91 a2 01 	lds	r21, 0x01A2
    37b8:	60 91 a3 01 	lds	r22, 0x01A3
    37bc:	70 91 a4 01 	lds	r23, 0x01A4
    SREG = sreg;
    37c0:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    37c2:	6a 01       	movw	r12, r20
    37c4:	7b 01       	movw	r14, r22
    37c6:	ee 24       	eor	r14, r14
    37c8:	ff 24       	eor	r15, r15
    37ca:	8c 01       	movw	r16, r24
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	c0 16       	cp	r12, r16
    37d2:	d1 06       	cpc	r13, r17
    37d4:	e2 06       	cpc	r14, r18
    37d6:	f3 06       	cpc	r15, r19
    37d8:	10 f4       	brcc	.+4      	; 0x37de <timer_elapsed+0x3e>
    37da:	41 50       	subi	r20, 0x01	; 1
    37dc:	51 09       	sbc	r21, r1
    37de:	48 1b       	sub	r20, r24
    37e0:	59 0b       	sbc	r21, r25
}
    37e2:	ca 01       	movw	r24, r20
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	08 95       	ret

000037f2 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    37f2:	1f 92       	push	r1
    37f4:	0f 92       	push	r0
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	0f 92       	push	r0
    37fa:	11 24       	eor	r1, r1
    37fc:	8f 93       	push	r24
    37fe:	9f 93       	push	r25
    3800:	af 93       	push	r26
    3802:	bf 93       	push	r27
    timer_count++;
    3804:	80 91 a1 01 	lds	r24, 0x01A1
    3808:	90 91 a2 01 	lds	r25, 0x01A2
    380c:	a0 91 a3 01 	lds	r26, 0x01A3
    3810:	b0 91 a4 01 	lds	r27, 0x01A4
    3814:	01 96       	adiw	r24, 0x01	; 1
    3816:	a1 1d       	adc	r26, r1
    3818:	b1 1d       	adc	r27, r1
    381a:	80 93 a1 01 	sts	0x01A1, r24
    381e:	90 93 a2 01 	sts	0x01A2, r25
    3822:	a0 93 a3 01 	sts	0x01A3, r26
    3826:	b0 93 a4 01 	sts	0x01A4, r27
}
    382a:	bf 91       	pop	r27
    382c:	af 91       	pop	r26
    382e:	9f 91       	pop	r25
    3830:	8f 91       	pop	r24
    3832:	0f 90       	pop	r0
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	0f 90       	pop	r0
    3838:	1f 90       	pop	r1
    383a:	18 95       	reti

0000383c <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    383c:	0e 94 35 0c 	call	0x186a	; 0x186a <USB_Disable>
    cli();
    3840:	f8 94       	cli
    3842:	2f ef       	ldi	r18, 0xFF	; 255
    3844:	87 ea       	ldi	r24, 0xA7	; 167
    3846:	91 e6       	ldi	r25, 0x61	; 97
    3848:	21 50       	subi	r18, 0x01	; 1
    384a:	80 40       	sbci	r24, 0x00	; 0
    384c:	90 40       	sbci	r25, 0x00	; 0
    384e:	e1 f7       	brne	.-8      	; 0x3848 <bootloader_jump+0xc>
    3850:	00 c0       	rjmp	.+0      	; 0x3852 <bootloader_jump+0x16>
    3852:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3854:	87 e0       	ldi	r24, 0x07	; 7
    3856:	90 eb       	ldi	r25, 0xB0	; 176
    3858:	dc 01       	movw	r26, r24
    385a:	80 93 be 01 	sts	0x01BE, r24
    385e:	90 93 bf 01 	sts	0x01BF, r25
    3862:	a0 93 c0 01 	sts	0x01C0, r26
    3866:	b0 93 c1 01 	sts	0x01C1, r27
    wdt_enable(WDTO_250MS);
    386a:	2c e0       	ldi	r18, 0x0C	; 12
    386c:	88 e1       	ldi	r24, 0x18	; 24
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	a8 95       	wdr
    3876:	80 93 60 00 	sts	0x0060, r24
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	20 93 60 00 	sts	0x0060, r18
    3880:	ff cf       	rjmp	.-2      	; 0x3880 <bootloader_jump+0x44>

00003882 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3882:	8d 3b       	cpi	r24, 0xBD	; 189
    3884:	60 f4       	brcc	.+24     	; 0x389e <keycode_to_action+0x1c>
    3886:	88 3a       	cpi	r24, 0xA8	; 168
    3888:	80 f5       	brcc	.+96     	; 0x38ea <keycode_to_action+0x68>
    388a:	85 3a       	cpi	r24, 0xA5	; 165
    388c:	28 f5       	brcc	.+74     	; 0x38d8 <keycode_to_action+0x56>
    388e:	84 30       	cpi	r24, 0x04	; 4
    3890:	08 f5       	brcc	.+66     	; 0x38d4 <keycode_to_action+0x52>
    3892:	81 30       	cpi	r24, 0x01	; 1
    3894:	09 f0       	breq	.+2      	; 0x3898 <keycode_to_action+0x16>
    3896:	6b c0       	rjmp	.+214    	; 0x396e <keycode_to_action+0xec>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    389e:	88 3e       	cpi	r24, 0xE8	; 232
    38a0:	98 f4       	brcc	.+38     	; 0x38c8 <keycode_to_action+0x46>
    38a2:	80 3e       	cpi	r24, 0xE0	; 224
    38a4:	b8 f4       	brcc	.+46     	; 0x38d4 <keycode_to_action+0x52>
    38a6:	8f 3b       	cpi	r24, 0xBF	; 191
    38a8:	09 f0       	breq	.+2      	; 0x38ac <keycode_to_action+0x2a>
    38aa:	61 c0       	rjmp	.+194    	; 0x396e <keycode_to_action+0xec>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    38ac:	0e 94 fd 14 	call	0x29fa	; 0x29fa <clear_keyboard>
    38b0:	2f ef       	ldi	r18, 0xFF	; 255
    38b2:	80 e7       	ldi	r24, 0x70	; 112
    38b4:	92 e0       	ldi	r25, 0x02	; 2
    38b6:	21 50       	subi	r18, 0x01	; 1
    38b8:	80 40       	sbci	r24, 0x00	; 0
    38ba:	90 40       	sbci	r25, 0x00	; 0
    38bc:	e1 f7       	brne	.-8      	; 0x38b6 <keycode_to_action+0x34>
    38be:	00 c0       	rjmp	.+0      	; 0x38c0 <keycode_to_action+0x3e>
    38c0:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    38c2:	0e 94 1e 1c 	call	0x383c	; 0x383c <bootloader_jump>
    38c6:	53 c0       	rjmp	.+166    	; 0x396e <keycode_to_action+0xec>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    38c8:	80 3f       	cpi	r24, 0xF0	; 240
    38ca:	08 f4       	brcc	.+2      	; 0x38ce <keycode_to_action+0x4c>
    38cc:	50 c0       	rjmp	.+160    	; 0x396e <keycode_to_action+0xec>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	90 65       	ori	r25, 0x50	; 80
            break;
    38d2:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    38d4:	90 e0       	ldi	r25, 0x00	; 0
            break;
    38d6:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    38d8:	85 3a       	cpi	r24, 0xA5	; 165
    38da:	09 f4       	brne	.+2      	; 0x38de <keycode_to_action+0x5c>
    38dc:	4b c0       	rjmp	.+150    	; 0x3974 <keycode_to_action+0xf2>
    38de:	86 3a       	cpi	r24, 0xA6	; 166
    38e0:	09 f0       	breq	.+2      	; 0x38e4 <keycode_to_action+0x62>
    38e2:	4b c0       	rjmp	.+150    	; 0x397a <keycode_to_action+0xf8>
    38e4:	82 e8       	ldi	r24, 0x82	; 130
    38e6:	90 e4       	ldi	r25, 0x40	; 64
    38e8:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    38ea:	88 3a       	cpi	r24, 0xA8	; 168
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <keycode_to_action+0x6e>
    38ee:	48 c0       	rjmp	.+144    	; 0x3980 <keycode_to_action+0xfe>
    38f0:	89 3a       	cpi	r24, 0xA9	; 169
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <keycode_to_action+0x74>
    38f4:	48 c0       	rjmp	.+144    	; 0x3986 <keycode_to_action+0x104>
    38f6:	8a 3a       	cpi	r24, 0xAA	; 170
    38f8:	09 f4       	brne	.+2      	; 0x38fc <keycode_to_action+0x7a>
    38fa:	48 c0       	rjmp	.+144    	; 0x398c <keycode_to_action+0x10a>
    38fc:	8b 3a       	cpi	r24, 0xAB	; 171
    38fe:	09 f4       	brne	.+2      	; 0x3902 <keycode_to_action+0x80>
    3900:	48 c0       	rjmp	.+144    	; 0x3992 <keycode_to_action+0x110>
    3902:	8c 3a       	cpi	r24, 0xAC	; 172
    3904:	09 f4       	brne	.+2      	; 0x3908 <keycode_to_action+0x86>
    3906:	48 c0       	rjmp	.+144    	; 0x3998 <keycode_to_action+0x116>
    3908:	8d 3a       	cpi	r24, 0xAD	; 173
    390a:	09 f4       	brne	.+2      	; 0x390e <keycode_to_action+0x8c>
    390c:	48 c0       	rjmp	.+144    	; 0x399e <keycode_to_action+0x11c>
    390e:	8e 3a       	cpi	r24, 0xAE	; 174
    3910:	09 f4       	brne	.+2      	; 0x3914 <keycode_to_action+0x92>
    3912:	48 c0       	rjmp	.+144    	; 0x39a4 <keycode_to_action+0x122>
    3914:	8f 3a       	cpi	r24, 0xAF	; 175
    3916:	09 f4       	brne	.+2      	; 0x391a <keycode_to_action+0x98>
    3918:	48 c0       	rjmp	.+144    	; 0x39aa <keycode_to_action+0x128>
    391a:	81 3b       	cpi	r24, 0xB1	; 177
    391c:	09 f4       	brne	.+2      	; 0x3920 <keycode_to_action+0x9e>
    391e:	48 c0       	rjmp	.+144    	; 0x39b0 <keycode_to_action+0x12e>
    3920:	80 3b       	cpi	r24, 0xB0	; 176
    3922:	09 f4       	brne	.+2      	; 0x3926 <keycode_to_action+0xa4>
    3924:	48 c0       	rjmp	.+144    	; 0x39b6 <keycode_to_action+0x134>
    3926:	82 3b       	cpi	r24, 0xB2	; 178
    3928:	09 f4       	brne	.+2      	; 0x392c <keycode_to_action+0xaa>
    392a:	48 c0       	rjmp	.+144    	; 0x39bc <keycode_to_action+0x13a>
    392c:	83 3b       	cpi	r24, 0xB3	; 179
    392e:	09 f4       	brne	.+2      	; 0x3932 <keycode_to_action+0xb0>
    3930:	48 c0       	rjmp	.+144    	; 0x39c2 <keycode_to_action+0x140>
    3932:	84 3b       	cpi	r24, 0xB4	; 180
    3934:	09 f4       	brne	.+2      	; 0x3938 <keycode_to_action+0xb6>
    3936:	48 c0       	rjmp	.+144    	; 0x39c8 <keycode_to_action+0x146>
    3938:	85 3b       	cpi	r24, 0xB5	; 181
    393a:	09 f4       	brne	.+2      	; 0x393e <keycode_to_action+0xbc>
    393c:	48 c0       	rjmp	.+144    	; 0x39ce <keycode_to_action+0x14c>
    393e:	86 3b       	cpi	r24, 0xB6	; 182
    3940:	09 f4       	brne	.+2      	; 0x3944 <keycode_to_action+0xc2>
    3942:	48 c0       	rjmp	.+144    	; 0x39d4 <keycode_to_action+0x152>
    3944:	87 3b       	cpi	r24, 0xB7	; 183
    3946:	09 f4       	brne	.+2      	; 0x394a <keycode_to_action+0xc8>
    3948:	48 c0       	rjmp	.+144    	; 0x39da <keycode_to_action+0x158>
    394a:	88 3b       	cpi	r24, 0xB8	; 184
    394c:	09 f4       	brne	.+2      	; 0x3950 <keycode_to_action+0xce>
    394e:	48 c0       	rjmp	.+144    	; 0x39e0 <keycode_to_action+0x15e>
    3950:	89 3b       	cpi	r24, 0xB9	; 185
    3952:	09 f4       	brne	.+2      	; 0x3956 <keycode_to_action+0xd4>
    3954:	48 c0       	rjmp	.+144    	; 0x39e6 <keycode_to_action+0x164>
    3956:	8a 3b       	cpi	r24, 0xBA	; 186
    3958:	09 f4       	brne	.+2      	; 0x395c <keycode_to_action+0xda>
    395a:	48 c0       	rjmp	.+144    	; 0x39ec <keycode_to_action+0x16a>
    395c:	8b 3b       	cpi	r24, 0xBB	; 187
    395e:	09 f4       	brne	.+2      	; 0x3962 <keycode_to_action+0xe0>
    3960:	48 c0       	rjmp	.+144    	; 0x39f2 <keycode_to_action+0x170>
    3962:	8c 3b       	cpi	r24, 0xBC	; 188
    3964:	09 f0       	breq	.+2      	; 0x3968 <keycode_to_action+0xe6>
    3966:	48 c0       	rjmp	.+144    	; 0x39f8 <keycode_to_action+0x176>
    3968:	8a e2       	ldi	r24, 0x2A	; 42
    396a:	96 e4       	ldi	r25, 0x46	; 70
    396c:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            action.code = ACTION_NO;
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3974:	81 e8       	ldi	r24, 0x81	; 129
    3976:	90 e4       	ldi	r25, 0x40	; 64
    3978:	08 95       	ret
    397a:	83 e8       	ldi	r24, 0x83	; 131
    397c:	90 e4       	ldi	r25, 0x40	; 64
    397e:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3980:	82 ee       	ldi	r24, 0xE2	; 226
    3982:	94 e4       	ldi	r25, 0x44	; 68
    3984:	08 95       	ret
    3986:	89 ee       	ldi	r24, 0xE9	; 233
    3988:	94 e4       	ldi	r25, 0x44	; 68
    398a:	08 95       	ret
    398c:	8a ee       	ldi	r24, 0xEA	; 234
    398e:	94 e4       	ldi	r25, 0x44	; 68
    3990:	08 95       	ret
    3992:	85 eb       	ldi	r24, 0xB5	; 181
    3994:	94 e4       	ldi	r25, 0x44	; 68
    3996:	08 95       	ret
    3998:	86 eb       	ldi	r24, 0xB6	; 182
    399a:	94 e4       	ldi	r25, 0x44	; 68
    399c:	08 95       	ret
    399e:	83 eb       	ldi	r24, 0xB3	; 179
    39a0:	94 e4       	ldi	r25, 0x44	; 68
    39a2:	08 95       	ret
    39a4:	84 eb       	ldi	r24, 0xB4	; 180
    39a6:	94 e4       	ldi	r25, 0x44	; 68
    39a8:	08 95       	ret
    39aa:	87 eb       	ldi	r24, 0xB7	; 183
    39ac:	94 e4       	ldi	r25, 0x44	; 68
    39ae:	08 95       	ret
    39b0:	8c ec       	ldi	r24, 0xCC	; 204
    39b2:	94 e4       	ldi	r25, 0x44	; 68
    39b4:	08 95       	ret
    39b6:	8d ec       	ldi	r24, 0xCD	; 205
    39b8:	94 e4       	ldi	r25, 0x44	; 68
    39ba:	08 95       	ret
    39bc:	83 e8       	ldi	r24, 0x83	; 131
    39be:	95 e4       	ldi	r25, 0x45	; 69
    39c0:	08 95       	ret
    39c2:	8a e8       	ldi	r24, 0x8A	; 138
    39c4:	95 e4       	ldi	r25, 0x45	; 69
    39c6:	08 95       	ret
    39c8:	82 e9       	ldi	r24, 0x92	; 146
    39ca:	95 e4       	ldi	r25, 0x45	; 69
    39cc:	08 95       	ret
    39ce:	84 e9       	ldi	r24, 0x94	; 148
    39d0:	95 e4       	ldi	r25, 0x45	; 69
    39d2:	08 95       	ret
    39d4:	81 e2       	ldi	r24, 0x21	; 33
    39d6:	96 e4       	ldi	r25, 0x46	; 70
    39d8:	08 95       	ret
    39da:	83 e2       	ldi	r24, 0x23	; 35
    39dc:	96 e4       	ldi	r25, 0x46	; 70
    39de:	08 95       	ret
    39e0:	84 e2       	ldi	r24, 0x24	; 36
    39e2:	96 e4       	ldi	r25, 0x46	; 70
    39e4:	08 95       	ret
    39e6:	85 e2       	ldi	r24, 0x25	; 37
    39e8:	96 e4       	ldi	r25, 0x46	; 70
    39ea:	08 95       	ret
    39ec:	86 e2       	ldi	r24, 0x26	; 38
    39ee:	96 e4       	ldi	r25, 0x46	; 70
    39f0:	08 95       	ret
    39f2:	87 e2       	ldi	r24, 0x27	; 39
    39f4:	96 e4       	ldi	r25, 0x46	; 70
    39f6:	08 95       	ret
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    39fc:	08 95       	ret

000039fe <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    39fe:	0e 94 38 06 	call	0xc70	; 0xc70 <keymap_key_to_keycode>
    switch (keycode) {
    3a02:	80 3e       	cpi	r24, 0xE0	; 224
    3a04:	a8 f4       	brcc	.+42     	; 0x3a30 <action_for_key+0x32>
    3a06:	80 3c       	cpi	r24, 0xC0	; 192
    3a08:	00 f5       	brcc	.+64     	; 0x3a4a <action_for_key+0x4c>
    3a0a:	81 33       	cpi	r24, 0x31	; 49
    3a0c:	09 f4       	brne	.+2      	; 0x3a10 <action_for_key+0x12>
    3a0e:	5c c0       	rjmp	.+184    	; 0x3ac8 <action_for_key+0xca>
    3a10:	38 f4       	brcc	.+14     	; 0x3a20 <action_for_key+0x22>
    3a12:	89 32       	cpi	r24, 0x29	; 41
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <action_for_key+0x1a>
    3a16:	52 c0       	rjmp	.+164    	; 0x3abc <action_for_key+0xbe>
    3a18:	8a 32       	cpi	r24, 0x2A	; 42
    3a1a:	09 f4       	brne	.+2      	; 0x3a1e <action_for_key+0x20>
    3a1c:	5b c0       	rjmp	.+182    	; 0x3ad4 <action_for_key+0xd6>
    3a1e:	5f c0       	rjmp	.+190    	; 0x3ade <action_for_key+0xe0>
    3a20:	89 33       	cpi	r24, 0x39	; 57
    3a22:	b1 f0       	breq	.+44     	; 0x3a50 <action_for_key+0x52>
    3a24:	82 38       	cpi	r24, 0x82	; 130
    3a26:	a1 f0       	breq	.+40     	; 0x3a50 <action_for_key+0x52>
    3a28:	85 33       	cpi	r24, 0x35	; 53
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <action_for_key+0x30>
    3a2c:	41 c0       	rjmp	.+130    	; 0x3ab0 <action_for_key+0xb2>
    3a2e:	57 c0       	rjmp	.+174    	; 0x3ade <action_for_key+0xe0>
    3a30:	83 3e       	cpi	r24, 0xE3	; 227
    3a32:	41 f1       	breq	.+80     	; 0x3a84 <action_for_key+0x86>
    3a34:	28 f4       	brcc	.+10     	; 0x3a40 <action_for_key+0x42>
    3a36:	80 3e       	cpi	r24, 0xE0	; 224
    3a38:	99 f0       	breq	.+38     	; 0x3a60 <action_for_key+0x62>
    3a3a:	82 3e       	cpi	r24, 0xE2	; 226
    3a3c:	b9 f0       	breq	.+46     	; 0x3a6c <action_for_key+0x6e>
    3a3e:	4f c0       	rjmp	.+158    	; 0x3ade <action_for_key+0xe0>
    3a40:	86 3e       	cpi	r24, 0xE6	; 230
    3a42:	31 f1       	breq	.+76     	; 0x3a90 <action_for_key+0x92>
    3a44:	87 3e       	cpi	r24, 0xE7	; 231
    3a46:	71 f1       	breq	.+92     	; 0x3aa4 <action_for_key+0xa6>
    3a48:	4a c0       	rjmp	.+148    	; 0x3ade <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3a4a:	0e 94 47 06 	call	0xc8e	; 0xc8e <keymap_fn_to_action>
    3a4e:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3a50:	90 91 bd 01 	lds	r25, 0x01BD
    3a54:	90 fd       	sbrc	r25, 0
    3a56:	02 c0       	rjmp	.+4      	; 0x3a5c <action_for_key+0x5e>
    3a58:	91 ff       	sbrs	r25, 1
    3a5a:	41 c0       	rjmp	.+130    	; 0x3ade <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3a5c:	80 ee       	ldi	r24, 0xE0	; 224
    3a5e:	3f c0       	rjmp	.+126    	; 0x3ade <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3a60:	80 91 bd 01 	lds	r24, 0x01BD
    3a64:	80 ff       	sbrs	r24, 0
    3a66:	fa cf       	rjmp	.-12     	; 0x3a5c <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3a68:	89 e3       	ldi	r24, 0x39	; 57
    3a6a:	39 c0       	rjmp	.+114    	; 0x3ade <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3a6c:	80 91 bd 01 	lds	r24, 0x01BD
    3a70:	82 ff       	sbrs	r24, 2
    3a72:	0c c0       	rjmp	.+24     	; 0x3a8c <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3a74:	80 91 bd 01 	lds	r24, 0x01BD
    3a78:	84 ff       	sbrs	r24, 4
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	2f c0       	rjmp	.+94     	; 0x3ade <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3a80:	83 ee       	ldi	r24, 0xE3	; 227
    3a82:	2d c0       	rjmp	.+90     	; 0x3ade <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3a84:	80 91 bd 01 	lds	r24, 0x01BD
    3a88:	82 ff       	sbrs	r24, 2
    3a8a:	f4 cf       	rjmp	.-24     	; 0x3a74 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3a8c:	82 ee       	ldi	r24, 0xE2	; 226
    3a8e:	27 c0       	rjmp	.+78     	; 0x3ade <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3a90:	80 91 bd 01 	lds	r24, 0x01BD
    3a94:	83 ff       	sbrs	r24, 3
    3a96:	0a c0       	rjmp	.+20     	; 0x3aac <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3a98:	80 91 bd 01 	lds	r24, 0x01BD
    3a9c:	84 fd       	sbrc	r24, 4
    3a9e:	ee cf       	rjmp	.-36     	; 0x3a7c <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3aa0:	87 ee       	ldi	r24, 0xE7	; 231
    3aa2:	1d c0       	rjmp	.+58     	; 0x3ade <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3aa4:	80 91 bd 01 	lds	r24, 0x01BD
    3aa8:	83 ff       	sbrs	r24, 3
    3aaa:	f6 cf       	rjmp	.-20     	; 0x3a98 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3aac:	86 ee       	ldi	r24, 0xE6	; 230
    3aae:	17 c0       	rjmp	.+46     	; 0x3ade <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3ab0:	80 91 bd 01 	lds	r24, 0x01BD
    3ab4:	85 ff       	sbrs	r24, 5
    3ab6:	06 c0       	rjmp	.+12     	; 0x3ac4 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3ab8:	89 e2       	ldi	r24, 0x29	; 41
    3aba:	11 c0       	rjmp	.+34     	; 0x3ade <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3abc:	80 91 bd 01 	lds	r24, 0x01BD
    3ac0:	85 ff       	sbrs	r24, 5
    3ac2:	fa cf       	rjmp	.-12     	; 0x3ab8 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3ac4:	85 e3       	ldi	r24, 0x35	; 53
    3ac6:	0b c0       	rjmp	.+22     	; 0x3ade <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3ac8:	80 91 bd 01 	lds	r24, 0x01BD
    3acc:	86 ff       	sbrs	r24, 6
    3ace:	06 c0       	rjmp	.+12     	; 0x3adc <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3ad0:	8a e2       	ldi	r24, 0x2A	; 42
    3ad2:	05 c0       	rjmp	.+10     	; 0x3ade <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3ad4:	80 91 bd 01 	lds	r24, 0x01BD
    3ad8:	86 ff       	sbrs	r24, 6
    3ada:	fa cf       	rjmp	.-12     	; 0x3ad0 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3adc:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3ade:	0e 94 41 1c 	call	0x3882	; 0x3882 <keycode_to_action>
    }
}
    3ae2:	08 95       	ret

00003ae4 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	08 95       	ret

00003aea <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3aea:	08 95       	ret

00003aec <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3aec:	df 92       	push	r13
    3aee:	ef 92       	push	r14
    3af0:	ff 92       	push	r15
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	8c 01       	movw	r16, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3afc:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    3afe:	8d 2d       	mov	r24, r13
    3b00:	0e 94 3e 07 	call	0xe7c	; 0xe7c <matrix_get_row>
    3b04:	c0 e0       	ldi	r28, 0x00	; 0
    3b06:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3b08:	e8 2e       	mov	r14, r24
    3b0a:	f1 2c       	mov	r15, r1
    3b0c:	97 01       	movw	r18, r14
    3b0e:	0c 2e       	mov	r0, r28
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <scan_key+0x2a>
    3b12:	35 95       	asr	r19
    3b14:	27 95       	ror	r18
    3b16:	0a 94       	dec	r0
    3b18:	e2 f7       	brpl	.-8      	; 0x3b12 <scan_key+0x26>
    3b1a:	20 ff       	sbrs	r18, 0
    3b1c:	16 c0       	rjmp	.+44     	; 0x3b4a <scan_key+0x5e>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3b1e:	6c 2f       	mov	r22, r28
    3b20:	7d 2d       	mov	r23, r13
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <action_for_key>
    3b28:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3b2a:	80 17       	cp	r24, r16
    3b2c:	91 07       	cpc	r25, r17
    3b2e:	59 f0       	breq	.+22     	; 0x3b46 <scan_key+0x5a>
    3b30:	83 2f       	mov	r24, r19
    3b32:	80 7e       	andi	r24, 0xE0	; 224
    3b34:	93 2f       	mov	r25, r19
    3b36:	90 7c       	andi	r25, 0xC0	; 192
    3b38:	11 f0       	breq	.+4      	; 0x3b3e <scan_key+0x52>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3b3a:	80 3a       	cpi	r24, 0xA0	; 160
    3b3c:	31 f4       	brne	.+12     	; 0x3b4a <scan_key+0x5e>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3b40:	20 17       	cp	r18, r16
    3b42:	31 07       	cpc	r19, r17
    3b44:	11 f4       	brne	.+4      	; 0x3b4a <scan_key+0x5e>
                     action.key.code == code)) {
                    return true;
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	09 c0       	rjmp	.+18     	; 0x3b5c <scan_key+0x70>
    3b4a:	21 96       	adiw	r28, 0x01	; 1

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3b4c:	c7 30       	cpi	r28, 0x07	; 7
    3b4e:	d1 05       	cpc	r29, r1
    3b50:	e9 f6       	brne	.-70     	; 0x3b0c <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3b52:	d3 94       	inc	r13
    3b54:	84 e0       	ldi	r24, 0x04	; 4
    3b56:	d8 12       	cpse	r13, r24
    3b58:	d2 cf       	rjmp	.-92     	; 0x3afe <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
}
    3b5c:	df 91       	pop	r29
    3b5e:	cf 91       	pop	r28
    3b60:	1f 91       	pop	r17
    3b62:	0f 91       	pop	r16
    3b64:	ff 90       	pop	r15
    3b66:	ef 90       	pop	r14
    3b68:	df 90       	pop	r13
    3b6a:	08 95       	ret

00003b6c <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3b72:	8c e2       	ldi	r24, 0x2C	; 44
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	0e 94 76 1d 	call	0x3aec	; 0x3aec <scan_key>
    3b7a:	88 23       	and	r24, r24
    3b7c:	29 f0       	breq	.+10     	; 0x3b88 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3b7e:	ce 01       	movw	r24, r28
}
    3b80:	df 91       	pop	r29
    3b82:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3b84:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <scan_key>
}
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	08 95       	ret

00003b90 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3b90:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3b92:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <eeconfig_is_enabled>
    3b96:	81 11       	cpse	r24, r1
    3b98:	02 c0       	rjmp	.+4      	; 0x3b9e <bootmagic+0xe>
        eeconfig_init();
    3b9a:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3b9e:	84 e1       	ldi	r24, 0x14	; 20
    3ba0:	93 e0       	ldi	r25, 0x03	; 3
    3ba2:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3ba6:	c5 e6       	ldi	r28, 0x65	; 101
    3ba8:	c1 50       	subi	r28, 0x01	; 1
    3baa:	49 f0       	breq	.+18     	; 0x3bbe <bootmagic+0x2e>
    3bac:	0e 94 90 06 	call	0xd20	; 0xd20 <matrix_scan>
    3bb0:	8f e3       	ldi	r24, 0x3F	; 63
    3bb2:	9c e9       	ldi	r25, 0x9C	; 156
    3bb4:	01 97       	sbiw	r24, 0x01	; 1
    3bb6:	f1 f7       	brne	.-4      	; 0x3bb4 <bootmagic+0x24>
    3bb8:	00 c0       	rjmp	.+0      	; 0x3bba <bootmagic+0x2a>
    3bba:	00 00       	nop
    3bbc:	f5 cf       	rjmp	.-22     	; 0x3ba8 <bootmagic+0x18>
    print("done.\n");
    3bbe:	8d e0       	ldi	r24, 0x0D	; 13
    3bc0:	93 e0       	ldi	r25, 0x03	; 3
    3bc2:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3bc6:	89 e2       	ldi	r24, 0x29	; 41
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3bce:	81 11       	cpse	r24, r1
    3bd0:	22 c1       	rjmp	.+580    	; 0x3e16 <bootmagic+0x286>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3bd2:	8a e2       	ldi	r24, 0x2A	; 42
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3bda:	81 11       	cpse	r24, r1
        eeconfig_init();
    3bdc:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3be0:	85 e0       	ldi	r24, 0x05	; 5
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3be8:	81 11       	cpse	r24, r1
        bootloader_jump();
    3bea:	0e 94 1e 1c 	call	0x383c	; 0x383c <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3bee:	0e 94 46 1b 	call	0x368c	; 0x368c <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3bf2:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <eeconfig_read_debug>
    3bf6:	80 93 9f 01 	sts	0x019F, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3bfa:	87 e0       	ldi	r24, 0x07	; 7
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3c02:	88 23       	and	r24, r24
    3c04:	b1 f1       	breq	.+108    	; 0x3c72 <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3c06:	8b e1       	ldi	r24, 0x1B	; 27
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3c0e:	88 23       	and	r24, r24
    3c10:	51 f0       	breq	.+20     	; 0x3c26 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3c12:	90 91 9f 01 	lds	r25, 0x019F
    3c16:	91 fb       	bst	r25, 1
    3c18:	88 27       	eor	r24, r24
    3c1a:	80 f9       	bld	r24, 0
    3c1c:	21 e0       	ldi	r18, 0x01	; 1
    3c1e:	82 27       	eor	r24, r18
    3c20:	80 fb       	bst	r24, 0
    3c22:	91 f9       	bld	r25, 1
    3c24:	24 c0       	rjmp	.+72     	; 0x3c6e <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3c26:	8e e0       	ldi	r24, 0x0E	; 14
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3c2e:	88 23       	and	r24, r24
    3c30:	51 f0       	breq	.+20     	; 0x3c46 <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    3c32:	90 91 9f 01 	lds	r25, 0x019F
    3c36:	92 fb       	bst	r25, 2
    3c38:	88 27       	eor	r24, r24
    3c3a:	80 f9       	bld	r24, 0
    3c3c:	21 e0       	ldi	r18, 0x01	; 1
    3c3e:	82 27       	eor	r24, r18
    3c40:	80 fb       	bst	r24, 0
    3c42:	92 f9       	bld	r25, 2
    3c44:	14 c0       	rjmp	.+40     	; 0x3c6e <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3c46:	80 e1       	ldi	r24, 0x10	; 16
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3c4e:	90 91 9f 01 	lds	r25, 0x019F
    3c52:	88 23       	and	r24, r24
    3c54:	41 f0       	breq	.+16     	; 0x3c66 <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    3c56:	93 fb       	bst	r25, 3
    3c58:	88 27       	eor	r24, r24
    3c5a:	80 f9       	bld	r24, 0
    3c5c:	21 e0       	ldi	r18, 0x01	; 1
    3c5e:	82 27       	eor	r24, r18
    3c60:	80 fb       	bst	r24, 0
    3c62:	93 f9       	bld	r25, 3
    3c64:	04 c0       	rjmp	.+8      	; 0x3c6e <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    3c66:	89 2f       	mov	r24, r25
    3c68:	80 95       	com	r24
    3c6a:	80 fb       	bst	r24, 0
    3c6c:	90 f9       	bld	r25, 0
    3c6e:	90 93 9f 01 	sts	0x019F, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3c72:	80 91 9f 01 	lds	r24, 0x019F
    3c76:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3c7a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <eeconfig_read_keymap>
    3c7e:	80 93 bd 01 	sts	0x01BD, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3c82:	80 ee       	ldi	r24, 0xE0	; 224
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3c8a:	88 23       	and	r24, r24
    3c8c:	41 f0       	breq	.+16     	; 0x3c9e <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3c8e:	80 91 bd 01 	lds	r24, 0x01BD
    3c92:	98 2f       	mov	r25, r24
    3c94:	90 95       	com	r25
    3c96:	90 fb       	bst	r25, 0
    3c98:	80 f9       	bld	r24, 0
    3c9a:	80 93 bd 01 	sts	0x01BD, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3c9e:	89 e3       	ldi	r24, 0x39	; 57
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3ca6:	88 23       	and	r24, r24
    3ca8:	59 f0       	breq	.+22     	; 0x3cc0 <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3caa:	90 91 bd 01 	lds	r25, 0x01BD
    3cae:	91 fb       	bst	r25, 1
    3cb0:	88 27       	eor	r24, r24
    3cb2:	80 f9       	bld	r24, 0
    3cb4:	21 e0       	ldi	r18, 0x01	; 1
    3cb6:	82 27       	eor	r24, r18
    3cb8:	80 fb       	bst	r24, 0
    3cba:	91 f9       	bld	r25, 1
    3cbc:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3cc0:	82 ee       	ldi	r24, 0xE2	; 226
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3cc8:	88 23       	and	r24, r24
    3cca:	59 f0       	breq	.+22     	; 0x3ce2 <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3ccc:	90 91 bd 01 	lds	r25, 0x01BD
    3cd0:	92 fb       	bst	r25, 2
    3cd2:	88 27       	eor	r24, r24
    3cd4:	80 f9       	bld	r24, 0
    3cd6:	21 e0       	ldi	r18, 0x01	; 1
    3cd8:	82 27       	eor	r24, r18
    3cda:	80 fb       	bst	r24, 0
    3cdc:	92 f9       	bld	r25, 2
    3cde:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3ce2:	86 ee       	ldi	r24, 0xE6	; 230
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3cea:	88 23       	and	r24, r24
    3cec:	59 f0       	breq	.+22     	; 0x3d04 <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3cee:	90 91 bd 01 	lds	r25, 0x01BD
    3cf2:	93 fb       	bst	r25, 3
    3cf4:	88 27       	eor	r24, r24
    3cf6:	80 f9       	bld	r24, 0
    3cf8:	21 e0       	ldi	r18, 0x01	; 1
    3cfa:	82 27       	eor	r24, r18
    3cfc:	80 fb       	bst	r24, 0
    3cfe:	93 f9       	bld	r25, 3
    3d00:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3d04:	83 ee       	ldi	r24, 0xE3	; 227
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3d0c:	88 23       	and	r24, r24
    3d0e:	59 f0       	breq	.+22     	; 0x3d26 <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    3d10:	90 91 bd 01 	lds	r25, 0x01BD
    3d14:	94 fb       	bst	r25, 4
    3d16:	88 27       	eor	r24, r24
    3d18:	80 f9       	bld	r24, 0
    3d1a:	21 e0       	ldi	r18, 0x01	; 1
    3d1c:	82 27       	eor	r24, r18
    3d1e:	80 fb       	bst	r24, 0
    3d20:	94 f9       	bld	r25, 4
    3d22:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3d26:	85 e3       	ldi	r24, 0x35	; 53
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3d2e:	88 23       	and	r24, r24
    3d30:	59 f0       	breq	.+22     	; 0x3d48 <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3d32:	90 91 bd 01 	lds	r25, 0x01BD
    3d36:	95 fb       	bst	r25, 5
    3d38:	88 27       	eor	r24, r24
    3d3a:	80 f9       	bld	r24, 0
    3d3c:	21 e0       	ldi	r18, 0x01	; 1
    3d3e:	82 27       	eor	r24, r18
    3d40:	80 fb       	bst	r24, 0
    3d42:	95 f9       	bld	r25, 5
    3d44:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3d48:	81 e3       	ldi	r24, 0x31	; 49
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3d50:	88 23       	and	r24, r24
    3d52:	59 f0       	breq	.+22     	; 0x3d6a <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3d54:	90 91 bd 01 	lds	r25, 0x01BD
    3d58:	96 fb       	bst	r25, 6
    3d5a:	88 27       	eor	r24, r24
    3d5c:	80 f9       	bld	r24, 0
    3d5e:	21 e0       	ldi	r18, 0x01	; 1
    3d60:	82 27       	eor	r24, r18
    3d62:	80 fb       	bst	r24, 0
    3d64:	96 f9       	bld	r25, 6
    3d66:	90 93 bd 01 	sts	0x01BD, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    3d6a:	81 e1       	ldi	r24, 0x11	; 17
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3d72:	88 23       	and	r24, r24
    3d74:	59 f0       	breq	.+22     	; 0x3d8c <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    3d76:	90 91 bd 01 	lds	r25, 0x01BD
    3d7a:	97 fb       	bst	r25, 7
    3d7c:	88 27       	eor	r24, r24
    3d7e:	80 f9       	bld	r24, 0
    3d80:	21 e0       	ldi	r18, 0x01	; 1
    3d82:	82 27       	eor	r24, r18
    3d84:	80 fb       	bst	r24, 0
    3d86:	97 f9       	bld	r25, 7
    3d88:	90 93 bd 01 	sts	0x01BD, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    3d8c:	80 91 bd 01 	lds	r24, 0x01BD
    3d90:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3d94:	87 e2       	ldi	r24, 0x27	; 39
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3d9c:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3d9e:	8e e1       	ldi	r24, 0x1E	; 30
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3da6:	81 11       	cpse	r24, r1
    3da8:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    3daa:	8f e1       	ldi	r24, 0x1F	; 31
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3db2:	81 11       	cpse	r24, r1
    3db4:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    3db6:	80 e2       	ldi	r24, 0x20	; 32
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3dbe:	81 11       	cpse	r24, r1
    3dc0:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    3dc2:	81 e2       	ldi	r24, 0x21	; 33
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3dca:	81 11       	cpse	r24, r1
    3dcc:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3dce:	82 e2       	ldi	r24, 0x22	; 34
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3dd6:	81 11       	cpse	r24, r1
    3dd8:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    3dda:	83 e2       	ldi	r24, 0x23	; 35
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3de2:	81 11       	cpse	r24, r1
    3de4:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    3de6:	84 e2       	ldi	r24, 0x24	; 36
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <bootmagic_scan_key>
    3dee:	88 23       	and	r24, r24
    3df0:	11 f0       	breq	.+4      	; 0x3df6 <bootmagic+0x266>
    3df2:	c0 68       	ori	r28, 0x80	; 128
    3df4:	02 c0       	rjmp	.+4      	; 0x3dfa <bootmagic+0x26a>
    if (default_layer) {
    3df6:	cc 23       	and	r28, r28
    3df8:	29 f0       	breq	.+10     	; 0x3e04 <bootmagic+0x274>
        eeconfig_write_default_layer(default_layer);
    3dfa:	8c 2f       	mov	r24, r28
    3dfc:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    3e00:	6c 2f       	mov	r22, r28
    3e02:	03 c0       	rjmp	.+6      	; 0x3e0a <bootmagic+0x27a>
    } else {
        default_layer = eeconfig_read_default_layer();
    3e04:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    3e08:	68 2f       	mov	r22, r24
    3e0a:	70 e0       	ldi	r23, 0x00	; 0
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3e10:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    3e12:	0c 94 21 19 	jmp	0x3242	; 0x3242 <default_layer_set>
    }
}
    3e16:	cf 91       	pop	r28
    3e18:	08 95       	ret

00003e1a <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    3e1a:	6d ee       	ldi	r22, 0xED	; 237
    3e1c:	7e ef       	ldi	r23, 0xFE	; 254
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	0e 94 68 28 	call	0x50d0	; 0x50d0 <__eewr_word_usb1287>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	82 e0       	ldi	r24, 0x02	; 2
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__eewr_byte_usb1287>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    3e30:	60 e0       	ldi	r22, 0x00	; 0
    3e32:	83 e0       	ldi	r24, 0x03	; 3
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__eewr_byte_usb1287>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	84 e0       	ldi	r24, 0x04	; 4
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__eewr_byte_usb1287>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	85 e0       	ldi	r24, 0x05	; 5
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__eewr_byte_usb1287>

00003e4e <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__eerd_word_usb1287>
    3e56:	21 e0       	ldi	r18, 0x01	; 1
    3e58:	8d 3e       	cpi	r24, 0xED	; 237
    3e5a:	9e 4f       	sbci	r25, 0xFE	; 254
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <eeconfig_is_enabled+0x12>
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
}
    3e60:	82 2f       	mov	r24, r18
    3e62:	08 95       	ret

00003e64 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    3e64:	82 e0       	ldi	r24, 0x02	; 2
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <__eerd_byte_usb1287>

00003e6c <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    3e6c:	68 2f       	mov	r22, r24
    3e6e:	82 e0       	ldi	r24, 0x02	; 2
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__eewr_byte_usb1287>

00003e76 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    3e76:	83 e0       	ldi	r24, 0x03	; 3
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <__eerd_byte_usb1287>

00003e7e <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    3e7e:	68 2f       	mov	r22, r24
    3e80:	83 e0       	ldi	r24, 0x03	; 3
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__eewr_byte_usb1287>

00003e88 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    3e88:	84 e0       	ldi	r24, 0x04	; 4
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <__eerd_byte_usb1287>

00003e90 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    3e90:	68 2f       	mov	r22, r24
    3e92:	84 e0       	ldi	r24, 0x04	; 4
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	0c 94 5a 28 	jmp	0x50b4	; 0x50b4 <__eewr_byte_usb1287>

00003e9a <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3e9a:	80 91 a7 01 	lds	r24, 0x01A7
    3e9e:	80 ff       	sbrs	r24, 0
    3ea0:	0b c0       	rjmp	.+22     	; 0x3eb8 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    3ea2:	60 91 11 01 	lds	r22, 0x0111
    3ea6:	85 e0       	ldi	r24, 0x05	; 5
    3ea8:	68 9f       	mul	r22, r24
    3eaa:	b0 01       	movw	r22, r0
    3eac:	11 24       	eor	r1, r1
    3eae:	75 95       	asr	r23
    3eb0:	67 95       	ror	r22
    3eb2:	75 95       	asr	r23
    3eb4:	67 95       	ror	r22
    3eb6:	2a c0       	rjmp	.+84     	; 0x3f0c <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    3eb8:	81 ff       	sbrs	r24, 1
    3eba:	09 c0       	rjmp	.+18     	; 0x3ece <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    3ebc:	60 91 11 01 	lds	r22, 0x0111
    3ec0:	85 e0       	ldi	r24, 0x05	; 5
    3ec2:	68 9f       	mul	r22, r24
    3ec4:	b0 01       	movw	r22, r0
    3ec6:	11 24       	eor	r1, r1
    3ec8:	75 95       	asr	r23
    3eca:	67 95       	ror	r22
    3ecc:	1f c0       	rjmp	.+62     	; 0x3f0c <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    3ece:	82 ff       	sbrs	r24, 2
    3ed0:	07 c0       	rjmp	.+14     	; 0x3ee0 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    3ed2:	60 91 11 01 	lds	r22, 0x0111
    3ed6:	85 e0       	ldi	r24, 0x05	; 5
    3ed8:	68 9f       	mul	r22, r24
    3eda:	b0 01       	movw	r22, r0
    3edc:	11 24       	eor	r1, r1
    3ede:	16 c0       	rjmp	.+44     	; 0x3f0c <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    3ee0:	40 91 a8 01 	lds	r20, 0x01A8
    3ee4:	44 23       	and	r20, r20
    3ee6:	c9 f0       	breq	.+50     	; 0x3f1a <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    3ee8:	60 91 10 01 	lds	r22, 0x0110
    3eec:	46 17       	cp	r20, r22
    3eee:	88 f7       	brcc	.-30     	; 0x3ed2 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    3ef0:	20 91 11 01 	lds	r18, 0x0111
    3ef4:	85 e0       	ldi	r24, 0x05	; 5
    3ef6:	28 9f       	mul	r18, r24
    3ef8:	90 01       	movw	r18, r0
    3efa:	11 24       	eor	r1, r1
    3efc:	42 9f       	mul	r20, r18
    3efe:	c0 01       	movw	r24, r0
    3f00:	43 9f       	mul	r20, r19
    3f02:	90 0d       	add	r25, r0
    3f04:	11 24       	eor	r1, r1
    3f06:	70 e0       	ldi	r23, 0x00	; 0
    3f08:	0e 94 1e 28 	call	0x503c	; 0x503c <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3f0c:	60 38       	cpi	r22, 0x80	; 128
    3f0e:	71 05       	cpc	r23, r1
    3f10:	40 f4       	brcc	.+16     	; 0x3f22 <move_unit+0x88>
    3f12:	61 15       	cp	r22, r1
    3f14:	71 05       	cpc	r23, r1
    3f16:	39 f0       	breq	.+14     	; 0x3f26 <move_unit+0x8c>
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    3f1a:	65 e0       	ldi	r22, 0x05	; 5
    3f1c:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3f1e:	86 2f       	mov	r24, r22
    3f20:	08 95       	ret
    3f22:	8f e7       	ldi	r24, 0x7F	; 127
    3f24:	08 95       	ret
    3f26:	81 e0       	ldi	r24, 0x01	; 1
}
    3f28:	08 95       	ret

00003f2a <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3f2a:	80 91 a7 01 	lds	r24, 0x01A7
    3f2e:	80 ff       	sbrs	r24, 0
    3f30:	08 c0       	rjmp	.+16     	; 0x3f42 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    3f32:	60 91 0f 01 	lds	r22, 0x010F
    3f36:	70 e0       	ldi	r23, 0x00	; 0
    3f38:	75 95       	asr	r23
    3f3a:	67 95       	ror	r22
    3f3c:	75 95       	asr	r23
    3f3e:	67 95       	ror	r22
    3f40:	21 c0       	rjmp	.+66     	; 0x3f84 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    3f42:	81 ff       	sbrs	r24, 1
    3f44:	06 c0       	rjmp	.+12     	; 0x3f52 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    3f46:	60 91 0f 01 	lds	r22, 0x010F
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
    3f4c:	75 95       	asr	r23
    3f4e:	67 95       	ror	r22
    3f50:	19 c0       	rjmp	.+50     	; 0x3f84 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    3f52:	82 ff       	sbrs	r24, 2
    3f54:	04 c0       	rjmp	.+8      	; 0x3f5e <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    3f56:	60 91 0f 01 	lds	r22, 0x010F
    3f5a:	70 e0       	ldi	r23, 0x00	; 0
    3f5c:	10 c0       	rjmp	.+32     	; 0x3f7e <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    3f5e:	80 91 a8 01 	lds	r24, 0x01A8
    3f62:	88 23       	and	r24, r24
    3f64:	c1 f0       	breq	.+48     	; 0x3f96 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    3f66:	60 91 0e 01 	lds	r22, 0x010E
    3f6a:	86 17       	cp	r24, r22
    3f6c:	a0 f7       	brcc	.-24     	; 0x3f56 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    3f6e:	90 91 0f 01 	lds	r25, 0x010F
    3f72:	98 9f       	mul	r25, r24
    3f74:	c0 01       	movw	r24, r0
    3f76:	11 24       	eor	r1, r1
    3f78:	70 e0       	ldi	r23, 0x00	; 0
    3f7a:	0e 94 1e 28 	call	0x503c	; 0x503c <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3f7e:	60 38       	cpi	r22, 0x80	; 128
    3f80:	71 05       	cpc	r23, r1
    3f82:	28 f4       	brcc	.+10     	; 0x3f8e <wheel_unit+0x64>
    3f84:	61 15       	cp	r22, r1
    3f86:	71 05       	cpc	r23, r1
    3f88:	21 f0       	breq	.+8      	; 0x3f92 <wheel_unit+0x68>
    3f8a:	86 2f       	mov	r24, r22
    3f8c:	08 95       	ret
    3f8e:	8f e7       	ldi	r24, 0x7F	; 127
    3f90:	08 95       	ret
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    3f96:	61 e0       	ldi	r22, 0x01	; 1
    3f98:	70 e0       	ldi	r23, 0x00	; 0
    3f9a:	f4 cf       	rjmp	.-24     	; 0x3f84 <wheel_unit+0x5a>

00003f9c <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    3f9c:	80 3f       	cpi	r24, 0xF0	; 240
    3f9e:	21 f4       	brne	.+8      	; 0x3fa8 <mousekey_on+0xc>
    3fa0:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <move_unit>
    3fa4:	81 95       	neg	r24
    3fa6:	04 c0       	rjmp	.+8      	; 0x3fb0 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    3fa8:	81 3f       	cpi	r24, 0xF1	; 241
    3faa:	29 f4       	brne	.+10     	; 0x3fb6 <mousekey_on+0x1a>
    3fac:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <move_unit>
    3fb0:	80 93 ab 01 	sts	0x01AB, r24
    3fb4:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    3fb6:	82 3f       	cpi	r24, 0xF2	; 242
    3fb8:	21 f4       	brne	.+8      	; 0x3fc2 <mousekey_on+0x26>
    3fba:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <move_unit>
    3fbe:	81 95       	neg	r24
    3fc0:	04 c0       	rjmp	.+8      	; 0x3fca <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    3fc2:	83 3f       	cpi	r24, 0xF3	; 243
    3fc4:	29 f4       	brne	.+10     	; 0x3fd0 <mousekey_on+0x34>
    3fc6:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <move_unit>
    3fca:	80 93 aa 01 	sts	0x01AA, r24
    3fce:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    3fd0:	89 3f       	cpi	r24, 0xF9	; 249
    3fd2:	19 f4       	brne	.+6      	; 0x3fda <mousekey_on+0x3e>
    3fd4:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <wheel_unit>
    3fd8:	05 c0       	rjmp	.+10     	; 0x3fe4 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    3fda:	8a 3f       	cpi	r24, 0xFA	; 250
    3fdc:	31 f4       	brne	.+12     	; 0x3fea <mousekey_on+0x4e>
    3fde:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <wheel_unit>
    3fe2:	81 95       	neg	r24
    3fe4:	80 93 ac 01 	sts	0x01AC, r24
    3fe8:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    3fea:	8b 3f       	cpi	r24, 0xFB	; 251
    3fec:	21 f4       	brne	.+8      	; 0x3ff6 <mousekey_on+0x5a>
    3fee:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <wheel_unit>
    3ff2:	81 95       	neg	r24
    3ff4:	04 c0       	rjmp	.+8      	; 0x3ffe <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    3ff6:	8c 3f       	cpi	r24, 0xFC	; 252
    3ff8:	29 f4       	brne	.+10     	; 0x4004 <mousekey_on+0x68>
    3ffa:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <wheel_unit>
    3ffe:	80 93 ad 01 	sts	0x01AD, r24
    4002:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4004:	84 3f       	cpi	r24, 0xF4	; 244
    4006:	21 f4       	brne	.+8      	; 0x4010 <mousekey_on+0x74>
    4008:	80 91 a9 01 	lds	r24, 0x01A9
    400c:	81 60       	ori	r24, 0x01	; 1
    400e:	17 c0       	rjmp	.+46     	; 0x403e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4010:	85 3f       	cpi	r24, 0xF5	; 245
    4012:	21 f4       	brne	.+8      	; 0x401c <mousekey_on+0x80>
    4014:	80 91 a9 01 	lds	r24, 0x01A9
    4018:	82 60       	ori	r24, 0x02	; 2
    401a:	11 c0       	rjmp	.+34     	; 0x403e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    401c:	86 3f       	cpi	r24, 0xF6	; 246
    401e:	21 f4       	brne	.+8      	; 0x4028 <mousekey_on+0x8c>
    4020:	80 91 a9 01 	lds	r24, 0x01A9
    4024:	84 60       	ori	r24, 0x04	; 4
    4026:	0b c0       	rjmp	.+22     	; 0x403e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4028:	87 3f       	cpi	r24, 0xF7	; 247
    402a:	21 f4       	brne	.+8      	; 0x4034 <mousekey_on+0x98>
    402c:	80 91 a9 01 	lds	r24, 0x01A9
    4030:	88 60       	ori	r24, 0x08	; 8
    4032:	05 c0       	rjmp	.+10     	; 0x403e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4034:	88 3f       	cpi	r24, 0xF8	; 248
    4036:	31 f4       	brne	.+12     	; 0x4044 <mousekey_on+0xa8>
    4038:	80 91 a9 01 	lds	r24, 0x01A9
    403c:	80 61       	ori	r24, 0x10	; 16
    403e:	80 93 a9 01 	sts	0x01A9, r24
    4042:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4044:	8d 3f       	cpi	r24, 0xFD	; 253
    4046:	21 f4       	brne	.+8      	; 0x4050 <mousekey_on+0xb4>
    4048:	80 91 a7 01 	lds	r24, 0x01A7
    404c:	81 60       	ori	r24, 0x01	; 1
    404e:	0b c0       	rjmp	.+22     	; 0x4066 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4050:	8e 3f       	cpi	r24, 0xFE	; 254
    4052:	21 f4       	brne	.+8      	; 0x405c <mousekey_on+0xc0>
    4054:	80 91 a7 01 	lds	r24, 0x01A7
    4058:	82 60       	ori	r24, 0x02	; 2
    405a:	05 c0       	rjmp	.+10     	; 0x4066 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    405c:	8f 3f       	cpi	r24, 0xFF	; 255
    405e:	29 f4       	brne	.+10     	; 0x406a <mousekey_on+0xce>
    4060:	80 91 a7 01 	lds	r24, 0x01A7
    4064:	84 60       	ori	r24, 0x04	; 4
    4066:	80 93 a7 01 	sts	0x01A7, r24
    406a:	08 95       	ret

0000406c <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    406c:	80 3f       	cpi	r24, 0xF0	; 240
    406e:	39 f4       	brne	.+14     	; 0x407e <mousekey_off+0x12>
    4070:	80 91 ab 01 	lds	r24, 0x01AB
    4074:	87 ff       	sbrs	r24, 7
    4076:	6c c0       	rjmp	.+216    	; 0x4150 <mousekey_off+0xe4>
    4078:	10 92 ab 01 	sts	0x01AB, r1
    407c:	69 c0       	rjmp	.+210    	; 0x4150 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    407e:	81 3f       	cpi	r24, 0xF1	; 241
    4080:	29 f4       	brne	.+10     	; 0x408c <mousekey_off+0x20>
    4082:	80 91 ab 01 	lds	r24, 0x01AB
    4086:	18 16       	cp	r1, r24
    4088:	bc f3       	brlt	.-18     	; 0x4078 <mousekey_off+0xc>
    408a:	62 c0       	rjmp	.+196    	; 0x4150 <mousekey_off+0xe4>
    408c:	90 91 aa 01 	lds	r25, 0x01AA
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4090:	82 3f       	cpi	r24, 0xF2	; 242
    4092:	29 f4       	brne	.+10     	; 0x409e <mousekey_off+0x32>
    4094:	97 ff       	sbrs	r25, 7
    4096:	5c c0       	rjmp	.+184    	; 0x4150 <mousekey_off+0xe4>
    4098:	10 92 aa 01 	sts	0x01AA, r1
    409c:	59 c0       	rjmp	.+178    	; 0x4150 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    409e:	83 3f       	cpi	r24, 0xF3	; 243
    40a0:	19 f4       	brne	.+6      	; 0x40a8 <mousekey_off+0x3c>
    40a2:	19 16       	cp	r1, r25
    40a4:	cc f3       	brlt	.-14     	; 0x4098 <mousekey_off+0x2c>
    40a6:	54 c0       	rjmp	.+168    	; 0x4150 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    40a8:	89 3f       	cpi	r24, 0xF9	; 249
    40aa:	41 f4       	brne	.+16     	; 0x40bc <mousekey_off+0x50>
    40ac:	80 91 ac 01 	lds	r24, 0x01AC
    40b0:	18 16       	cp	r1, r24
    40b2:	0c f0       	brlt	.+2      	; 0x40b6 <mousekey_off+0x4a>
    40b4:	4d c0       	rjmp	.+154    	; 0x4150 <mousekey_off+0xe4>
    40b6:	10 92 ac 01 	sts	0x01AC, r1
    40ba:	4a c0       	rjmp	.+148    	; 0x4150 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    40bc:	8a 3f       	cpi	r24, 0xFA	; 250
    40be:	29 f4       	brne	.+10     	; 0x40ca <mousekey_off+0x5e>
    40c0:	80 91 ac 01 	lds	r24, 0x01AC
    40c4:	87 ff       	sbrs	r24, 7
    40c6:	44 c0       	rjmp	.+136    	; 0x4150 <mousekey_off+0xe4>
    40c8:	f6 cf       	rjmp	.-20     	; 0x40b6 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    40ca:	8b 3f       	cpi	r24, 0xFB	; 251
    40cc:	39 f4       	brne	.+14     	; 0x40dc <mousekey_off+0x70>
    40ce:	80 91 ad 01 	lds	r24, 0x01AD
    40d2:	87 ff       	sbrs	r24, 7
    40d4:	3d c0       	rjmp	.+122    	; 0x4150 <mousekey_off+0xe4>
    40d6:	10 92 ad 01 	sts	0x01AD, r1
    40da:	3a c0       	rjmp	.+116    	; 0x4150 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    40dc:	8c 3f       	cpi	r24, 0xFC	; 252
    40de:	29 f4       	brne	.+10     	; 0x40ea <mousekey_off+0x7e>
    40e0:	80 91 ad 01 	lds	r24, 0x01AD
    40e4:	18 16       	cp	r1, r24
    40e6:	bc f3       	brlt	.-18     	; 0x40d6 <mousekey_off+0x6a>
    40e8:	33 c0       	rjmp	.+102    	; 0x4150 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    40ea:	84 3f       	cpi	r24, 0xF4	; 244
    40ec:	21 f4       	brne	.+8      	; 0x40f6 <mousekey_off+0x8a>
    40ee:	80 91 a9 01 	lds	r24, 0x01A9
    40f2:	8e 7f       	andi	r24, 0xFE	; 254
    40f4:	17 c0       	rjmp	.+46     	; 0x4124 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    40f6:	85 3f       	cpi	r24, 0xF5	; 245
    40f8:	21 f4       	brne	.+8      	; 0x4102 <mousekey_off+0x96>
    40fa:	80 91 a9 01 	lds	r24, 0x01A9
    40fe:	8d 7f       	andi	r24, 0xFD	; 253
    4100:	11 c0       	rjmp	.+34     	; 0x4124 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4102:	86 3f       	cpi	r24, 0xF6	; 246
    4104:	21 f4       	brne	.+8      	; 0x410e <mousekey_off+0xa2>
    4106:	80 91 a9 01 	lds	r24, 0x01A9
    410a:	8b 7f       	andi	r24, 0xFB	; 251
    410c:	0b c0       	rjmp	.+22     	; 0x4124 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    410e:	87 3f       	cpi	r24, 0xF7	; 247
    4110:	21 f4       	brne	.+8      	; 0x411a <mousekey_off+0xae>
    4112:	80 91 a9 01 	lds	r24, 0x01A9
    4116:	87 7f       	andi	r24, 0xF7	; 247
    4118:	05 c0       	rjmp	.+10     	; 0x4124 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    411a:	88 3f       	cpi	r24, 0xF8	; 248
    411c:	31 f4       	brne	.+12     	; 0x412a <mousekey_off+0xbe>
    411e:	80 91 a9 01 	lds	r24, 0x01A9
    4122:	8f 7e       	andi	r24, 0xEF	; 239
    4124:	80 93 a9 01 	sts	0x01A9, r24
    4128:	13 c0       	rjmp	.+38     	; 0x4150 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    412a:	8d 3f       	cpi	r24, 0xFD	; 253
    412c:	21 f4       	brne	.+8      	; 0x4136 <mousekey_off+0xca>
    412e:	80 91 a7 01 	lds	r24, 0x01A7
    4132:	8e 7f       	andi	r24, 0xFE	; 254
    4134:	0b c0       	rjmp	.+22     	; 0x414c <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4136:	8e 3f       	cpi	r24, 0xFE	; 254
    4138:	21 f4       	brne	.+8      	; 0x4142 <mousekey_off+0xd6>
    413a:	80 91 a7 01 	lds	r24, 0x01A7
    413e:	8d 7f       	andi	r24, 0xFD	; 253
    4140:	05 c0       	rjmp	.+10     	; 0x414c <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4142:	8f 3f       	cpi	r24, 0xFF	; 255
    4144:	29 f4       	brne	.+10     	; 0x4150 <mousekey_off+0xe4>
    4146:	80 91 a7 01 	lds	r24, 0x01A7
    414a:	8b 7f       	andi	r24, 0xFB	; 251
    414c:	80 93 a7 01 	sts	0x01A7, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4150:	80 91 aa 01 	lds	r24, 0x01AA
    4154:	81 11       	cpse	r24, r1
    4156:	0e c0       	rjmp	.+28     	; 0x4174 <mousekey_off+0x108>
    4158:	80 91 ab 01 	lds	r24, 0x01AB
    415c:	81 11       	cpse	r24, r1
    415e:	0a c0       	rjmp	.+20     	; 0x4174 <mousekey_off+0x108>
    4160:	80 91 ac 01 	lds	r24, 0x01AC
    4164:	81 11       	cpse	r24, r1
    4166:	06 c0       	rjmp	.+12     	; 0x4174 <mousekey_off+0x108>
    4168:	80 91 ad 01 	lds	r24, 0x01AD
    416c:	81 11       	cpse	r24, r1
    416e:	02 c0       	rjmp	.+4      	; 0x4174 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4170:	10 92 a8 01 	sts	0x01A8, r1
    4174:	08 95       	ret

00004176 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4176:	80 91 9f 01 	lds	r24, 0x019F
    417a:	83 ff       	sbrs	r24, 3
    417c:	7e c0       	rjmp	.+252    	; 0x427a <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    417e:	80 e5       	ldi	r24, 0x50	; 80
    4180:	93 e0       	ldi	r25, 0x03	; 3
    4182:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    phex(mouse_report.buttons); print("|");
    4186:	80 91 a9 01 	lds	r24, 0x01A9
    418a:	1f 92       	push	r1
    418c:	8f 93       	push	r24
    418e:	8b e4       	ldi	r24, 0x4B	; 75
    4190:	93 e0       	ldi	r25, 0x03	; 3
    4192:	9f 93       	push	r25
    4194:	8f 93       	push	r24
    4196:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    419a:	89 e4       	ldi	r24, 0x49	; 73
    419c:	93 e0       	ldi	r25, 0x03	; 3
    419e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print_decs(mouse_report.x); print(" ");
    41a2:	20 91 aa 01 	lds	r18, 0x01AA
    41a6:	82 2f       	mov	r24, r18
    41a8:	99 27       	eor	r25, r25
    41aa:	87 fd       	sbrc	r24, 7
    41ac:	90 95       	com	r25
    41ae:	9f 93       	push	r25
    41b0:	2f 93       	push	r18
    41b2:	86 e4       	ldi	r24, 0x46	; 70
    41b4:	93 e0       	ldi	r25, 0x03	; 3
    41b6:	9f 93       	push	r25
    41b8:	8f 93       	push	r24
    41ba:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    41be:	84 e4       	ldi	r24, 0x44	; 68
    41c0:	93 e0       	ldi	r25, 0x03	; 3
    41c2:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print_decs(mouse_report.y); print(" ");
    41c6:	20 91 ab 01 	lds	r18, 0x01AB
    41ca:	82 2f       	mov	r24, r18
    41cc:	99 27       	eor	r25, r25
    41ce:	87 fd       	sbrc	r24, 7
    41d0:	90 95       	com	r25
    41d2:	9f 93       	push	r25
    41d4:	2f 93       	push	r18
    41d6:	81 e4       	ldi	r24, 0x41	; 65
    41d8:	93 e0       	ldi	r25, 0x03	; 3
    41da:	9f 93       	push	r25
    41dc:	8f 93       	push	r24
    41de:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    41e2:	8f e3       	ldi	r24, 0x3F	; 63
    41e4:	93 e0       	ldi	r25, 0x03	; 3
    41e6:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print_decs(mouse_report.v); print(" ");
    41ea:	20 91 ac 01 	lds	r18, 0x01AC
    41ee:	82 2f       	mov	r24, r18
    41f0:	99 27       	eor	r25, r25
    41f2:	87 fd       	sbrc	r24, 7
    41f4:	90 95       	com	r25
    41f6:	9f 93       	push	r25
    41f8:	2f 93       	push	r18
    41fa:	8c e3       	ldi	r24, 0x3C	; 60
    41fc:	93 e0       	ldi	r25, 0x03	; 3
    41fe:	9f 93       	push	r25
    4200:	8f 93       	push	r24
    4202:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4206:	8a e3       	ldi	r24, 0x3A	; 58
    4208:	93 e0       	ldi	r25, 0x03	; 3
    420a:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print_decs(mouse_report.h); print("](");
    420e:	20 91 ad 01 	lds	r18, 0x01AD
    4212:	82 2f       	mov	r24, r18
    4214:	99 27       	eor	r25, r25
    4216:	87 fd       	sbrc	r24, 7
    4218:	90 95       	com	r25
    421a:	9f 93       	push	r25
    421c:	2f 93       	push	r18
    421e:	87 e3       	ldi	r24, 0x37	; 55
    4220:	93 e0       	ldi	r25, 0x03	; 3
    4222:	9f 93       	push	r25
    4224:	8f 93       	push	r24
    4226:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    422a:	84 e3       	ldi	r24, 0x34	; 52
    422c:	93 e0       	ldi	r25, 0x03	; 3
    422e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print_dec(mousekey_repeat); print("/");
    4232:	80 91 a8 01 	lds	r24, 0x01A8
    4236:	1f 92       	push	r1
    4238:	8f 93       	push	r24
    423a:	81 e3       	ldi	r24, 0x31	; 49
    423c:	93 e0       	ldi	r25, 0x03	; 3
    423e:	9f 93       	push	r25
    4240:	8f 93       	push	r24
    4242:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4246:	8f e2       	ldi	r24, 0x2F	; 47
    4248:	93 e0       	ldi	r25, 0x03	; 3
    424a:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print_dec(mousekey_accel); print(")\n");
    424e:	80 91 a7 01 	lds	r24, 0x01A7
    4252:	1f 92       	push	r1
    4254:	8f 93       	push	r24
    4256:	8c e2       	ldi	r24, 0x2C	; 44
    4258:	93 e0       	ldi	r25, 0x03	; 3
    425a:	9f 93       	push	r25
    425c:	8f 93       	push	r24
    425e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4262:	89 e2       	ldi	r24, 0x29	; 41
    4264:	93 e0       	ldi	r25, 0x03	; 3
    4266:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    426a:	8d b7       	in	r24, 0x3d	; 61
    426c:	9e b7       	in	r25, 0x3e	; 62
    426e:	4c 96       	adiw	r24, 0x1c	; 28
    4270:	0f b6       	in	r0, 0x3f	; 63
    4272:	f8 94       	cli
    4274:	9e bf       	out	0x3e, r25	; 62
    4276:	0f be       	out	0x3f, r0	; 63
    4278:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    427a:	89 ea       	ldi	r24, 0xA9	; 169
    427c:	91 e0       	ldi	r25, 0x01	; 1
    427e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <host_mouse_send>
    last_timer = timer_read();
    4282:	0e 94 b8 1b 	call	0x3770	; 0x3770 <timer_read>
    4286:	90 93 a6 01 	sts	0x01A6, r25
    428a:	80 93 a5 01 	sts	0x01A5, r24
    428e:	08 95       	ret

00004290 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4296:	80 91 a5 01 	lds	r24, 0x01A5
    429a:	90 91 a6 01 	lds	r25, 0x01A6
    429e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <timer_elapsed>
    42a2:	40 91 a8 01 	lds	r20, 0x01A8
    42a6:	44 23       	and	r20, r20
    42a8:	21 f0       	breq	.+8      	; 0x42b2 <mousekey_task+0x22>
    42aa:	20 91 12 01 	lds	r18, 0x0112
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	06 c0       	rjmp	.+12     	; 0x42be <mousekey_task+0x2e>
    42b2:	20 91 13 01 	lds	r18, 0x0113
    42b6:	5a e0       	ldi	r21, 0x0A	; 10
    42b8:	25 9f       	mul	r18, r21
    42ba:	90 01       	movw	r18, r0
    42bc:	11 24       	eor	r1, r1
    42be:	82 17       	cp	r24, r18
    42c0:	93 07       	cpc	r25, r19
    42c2:	08 f4       	brcc	.+2      	; 0x42c6 <mousekey_task+0x36>
    42c4:	82 c0       	rjmp	.+260    	; 0x43ca <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    42c6:	80 91 aa 01 	lds	r24, 0x01AA
    42ca:	10 91 ab 01 	lds	r17, 0x01AB
    42ce:	d0 91 ac 01 	lds	r29, 0x01AC
    42d2:	c0 91 ad 01 	lds	r28, 0x01AD
    42d6:	81 11       	cpse	r24, r1
    42d8:	07 c0       	rjmp	.+14     	; 0x42e8 <mousekey_task+0x58>
    42da:	11 11       	cpse	r17, r1
    42dc:	05 c0       	rjmp	.+10     	; 0x42e8 <mousekey_task+0x58>
    42de:	d1 11       	cpse	r29, r1
    42e0:	03 c0       	rjmp	.+6      	; 0x42e8 <mousekey_task+0x58>
    42e2:	cc 23       	and	r28, r28
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <mousekey_task+0x58>
    42e6:	71 c0       	rjmp	.+226    	; 0x43ca <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    42e8:	4f 3f       	cpi	r20, 0xFF	; 255
    42ea:	19 f0       	breq	.+6      	; 0x42f2 <mousekey_task+0x62>
        mousekey_repeat++;
    42ec:	4f 5f       	subi	r20, 0xFF	; 255
    42ee:	40 93 a8 01 	sts	0x01A8, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    42f2:	18 16       	cp	r1, r24
    42f4:	24 f4       	brge	.+8      	; 0x42fe <mousekey_task+0x6e>
    42f6:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <move_unit>
    42fa:	80 93 aa 01 	sts	0x01AA, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    42fe:	80 91 aa 01 	lds	r24, 0x01AA
    4302:	87 ff       	sbrs	r24, 7
    4304:	05 c0       	rjmp	.+10     	; 0x4310 <mousekey_task+0x80>
    4306:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <move_unit>
    430a:	81 95       	neg	r24
    430c:	80 93 aa 01 	sts	0x01AA, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4310:	11 16       	cp	r1, r17
    4312:	24 f4       	brge	.+8      	; 0x431c <mousekey_task+0x8c>
    4314:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <move_unit>
    4318:	80 93 ab 01 	sts	0x01AB, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    431c:	80 91 ab 01 	lds	r24, 0x01AB
    4320:	87 ff       	sbrs	r24, 7
    4322:	05 c0       	rjmp	.+10     	; 0x432e <mousekey_task+0x9e>
    4324:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <move_unit>
    4328:	81 95       	neg	r24
    432a:	80 93 ab 01 	sts	0x01AB, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    432e:	60 91 aa 01 	lds	r22, 0x01AA
    4332:	66 23       	and	r22, r22
    4334:	39 f1       	breq	.+78     	; 0x4384 <mousekey_task+0xf4>
    4336:	10 91 ab 01 	lds	r17, 0x01AB
    433a:	11 23       	and	r17, r17
    433c:	19 f1       	breq	.+70     	; 0x4384 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    433e:	77 27       	eor	r23, r23
    4340:	67 fd       	sbrc	r22, 7
    4342:	70 95       	com	r23
    4344:	87 2f       	mov	r24, r23
    4346:	97 2f       	mov	r25, r23
    4348:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__floatsisf>
    434c:	23 e3       	ldi	r18, 0x33	; 51
    434e:	33 e3       	ldi	r19, 0x33	; 51
    4350:	43 e3       	ldi	r20, 0x33	; 51
    4352:	5f e3       	ldi	r21, 0x3F	; 63
    4354:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <__mulsf3>
    4358:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__fixsfsi>
    435c:	60 93 aa 01 	sts	0x01AA, r22
        mouse_report.y *= 0.7;
    4360:	61 2f       	mov	r22, r17
    4362:	77 27       	eor	r23, r23
    4364:	67 fd       	sbrc	r22, 7
    4366:	70 95       	com	r23
    4368:	87 2f       	mov	r24, r23
    436a:	97 2f       	mov	r25, r23
    436c:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__floatsisf>
    4370:	23 e3       	ldi	r18, 0x33	; 51
    4372:	33 e3       	ldi	r19, 0x33	; 51
    4374:	43 e3       	ldi	r20, 0x33	; 51
    4376:	5f e3       	ldi	r21, 0x3F	; 63
    4378:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <__mulsf3>
    437c:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__fixsfsi>
    4380:	60 93 ab 01 	sts	0x01AB, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4384:	1d 16       	cp	r1, r29
    4386:	24 f4       	brge	.+8      	; 0x4390 <mousekey_task+0x100>
    4388:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <wheel_unit>
    438c:	80 93 ac 01 	sts	0x01AC, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4390:	80 91 ac 01 	lds	r24, 0x01AC
    4394:	87 ff       	sbrs	r24, 7
    4396:	05 c0       	rjmp	.+10     	; 0x43a2 <mousekey_task+0x112>
    4398:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <wheel_unit>
    439c:	81 95       	neg	r24
    439e:	80 93 ac 01 	sts	0x01AC, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    43a2:	1c 16       	cp	r1, r28
    43a4:	24 f4       	brge	.+8      	; 0x43ae <mousekey_task+0x11e>
    43a6:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <wheel_unit>
    43aa:	80 93 ad 01 	sts	0x01AD, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    43ae:	80 91 ad 01 	lds	r24, 0x01AD
    43b2:	87 ff       	sbrs	r24, 7
    43b4:	05 c0       	rjmp	.+10     	; 0x43c0 <mousekey_task+0x130>
    43b6:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <wheel_unit>
    43ba:	81 95       	neg	r24
    43bc:	80 93 ad 01 	sts	0x01AD, r24

    mousekey_send();
}
    43c0:	df 91       	pop	r29
    43c2:	cf 91       	pop	r28
    43c4:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    43c6:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <mousekey_send>
}
    43ca:	df 91       	pop	r29
    43cc:	cf 91       	pop	r28
    43ce:	1f 91       	pop	r17
    43d0:	08 95       	ret

000043d2 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    43d2:	e9 ea       	ldi	r30, 0xA9	; 169
    43d4:	f1 e0       	ldi	r31, 0x01	; 1
    43d6:	85 e0       	ldi	r24, 0x05	; 5
    43d8:	df 01       	movw	r26, r30
    43da:	1d 92       	st	X+, r1
    43dc:	8a 95       	dec	r24
    43de:	e9 f7       	brne	.-6      	; 0x43da <mousekey_clear+0x8>
    mousekey_repeat = 0;
    43e0:	10 92 a8 01 	sts	0x01A8, r1
    mousekey_accel = 0;
    43e4:	10 92 a7 01 	sts	0x01A7, r1
    43e8:	08 95       	ret

000043ea <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    43ea:	83 e7       	ldi	r24, 0x73	; 115
    43ec:	95 e0       	ldi	r25, 0x05	; 5
    43ee:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    43f2:	1f 92       	push	r1
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	8f 93       	push	r24
    43f8:	1f 92       	push	r1
    43fa:	85 e0       	ldi	r24, 0x05	; 5
    43fc:	8f 93       	push	r24
    43fe:	85 e2       	ldi	r24, 0x25	; 37
    4400:	95 e0       	ldi	r25, 0x05	; 5
    4402:	9f 93       	push	r25
    4404:	8f 93       	push	r24
    4406:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	08 95       	ret

00004418 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4418:	83 30       	cpi	r24, 0x03	; 3
    441a:	e9 f1       	breq	.+122    	; 0x4496 <mousekey_param_inc+0x7e>
    441c:	28 f4       	brcc	.+10     	; 0x4428 <mousekey_param_inc+0x10>
    441e:	81 30       	cpi	r24, 0x01	; 1
    4420:	61 f0       	breq	.+24     	; 0x443a <mousekey_param_inc+0x22>
    4422:	82 30       	cpi	r24, 0x02	; 2
    4424:	09 f1       	breq	.+66     	; 0x4468 <mousekey_param_inc+0x50>
    4426:	08 95       	ret
    4428:	85 30       	cpi	r24, 0x05	; 5
    442a:	09 f4       	brne	.+2      	; 0x442e <mousekey_param_inc+0x16>
    442c:	62 c0       	rjmp	.+196    	; 0x44f2 <mousekey_param_inc+0xda>
    442e:	08 f4       	brcc	.+2      	; 0x4432 <mousekey_param_inc+0x1a>
    4430:	49 c0       	rjmp	.+146    	; 0x44c4 <mousekey_param_inc+0xac>
    4432:	86 30       	cpi	r24, 0x06	; 6
    4434:	09 f4       	brne	.+2      	; 0x4438 <mousekey_param_inc+0x20>
    4436:	74 c0       	rjmp	.+232    	; 0x4520 <mousekey_param_inc+0x108>
    4438:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    443a:	20 91 13 01 	lds	r18, 0x0113
    443e:	86 2f       	mov	r24, r22
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	82 0f       	add	r24, r18
    4444:	91 1d       	adc	r25, r1
    4446:	8f 3f       	cpi	r24, 0xFF	; 255
    4448:	91 05       	cpc	r25, r1
    444a:	20 f4       	brcc	.+8      	; 0x4454 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    444c:	62 0f       	add	r22, r18
    444e:	60 93 13 01 	sts	0x0113, r22
    4452:	03 c0       	rjmp	.+6      	; 0x445a <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4454:	8f ef       	ldi	r24, 0xFF	; 255
    4456:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    445a:	80 91 13 01 	lds	r24, 0x0113
    445e:	1f 92       	push	r1
    4460:	8f 93       	push	r24
    4462:	8e e5       	ldi	r24, 0x5E	; 94
    4464:	94 e0       	ldi	r25, 0x04	; 4
    4466:	72 c0       	rjmp	.+228    	; 0x454c <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4468:	20 91 12 01 	lds	r18, 0x0112
    446c:	86 2f       	mov	r24, r22
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	82 0f       	add	r24, r18
    4472:	91 1d       	adc	r25, r1
    4474:	8f 3f       	cpi	r24, 0xFF	; 255
    4476:	91 05       	cpc	r25, r1
    4478:	20 f4       	brcc	.+8      	; 0x4482 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    447a:	62 0f       	add	r22, r18
    447c:	60 93 12 01 	sts	0x0112, r22
    4480:	03 c0       	rjmp	.+6      	; 0x4488 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4482:	8f ef       	ldi	r24, 0xFF	; 255
    4484:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    4488:	80 91 12 01 	lds	r24, 0x0112
    448c:	1f 92       	push	r1
    448e:	8f 93       	push	r24
    4490:	8c e4       	ldi	r24, 0x4C	; 76
    4492:	94 e0       	ldi	r25, 0x04	; 4
    4494:	5b c0       	rjmp	.+182    	; 0x454c <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4496:	20 91 11 01 	lds	r18, 0x0111
    449a:	86 2f       	mov	r24, r22
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	82 0f       	add	r24, r18
    44a0:	91 1d       	adc	r25, r1
    44a2:	8f 3f       	cpi	r24, 0xFF	; 255
    44a4:	91 05       	cpc	r25, r1
    44a6:	20 f4       	brcc	.+8      	; 0x44b0 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    44a8:	62 0f       	add	r22, r18
    44aa:	60 93 11 01 	sts	0x0111, r22
    44ae:	03 c0       	rjmp	.+6      	; 0x44b6 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    44b0:	8f ef       	ldi	r24, 0xFF	; 255
    44b2:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    44b6:	80 91 11 01 	lds	r24, 0x0111
    44ba:	1f 92       	push	r1
    44bc:	8f 93       	push	r24
    44be:	89 e3       	ldi	r24, 0x39	; 57
    44c0:	94 e0       	ldi	r25, 0x04	; 4
    44c2:	44 c0       	rjmp	.+136    	; 0x454c <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    44c4:	20 91 10 01 	lds	r18, 0x0110
    44c8:	86 2f       	mov	r24, r22
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	82 0f       	add	r24, r18
    44ce:	91 1d       	adc	r25, r1
    44d0:	8f 3f       	cpi	r24, 0xFF	; 255
    44d2:	91 05       	cpc	r25, r1
    44d4:	20 f4       	brcc	.+8      	; 0x44de <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    44d6:	62 0f       	add	r22, r18
    44d8:	60 93 10 01 	sts	0x0110, r22
    44dc:	03 c0       	rjmp	.+6      	; 0x44e4 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    44de:	8f ef       	ldi	r24, 0xFF	; 255
    44e0:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    44e4:	80 91 10 01 	lds	r24, 0x0110
    44e8:	1f 92       	push	r1
    44ea:	8f 93       	push	r24
    44ec:	84 e2       	ldi	r24, 0x24	; 36
    44ee:	94 e0       	ldi	r25, 0x04	; 4
    44f0:	2d c0       	rjmp	.+90     	; 0x454c <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    44f2:	20 91 0f 01 	lds	r18, 0x010F
    44f6:	86 2f       	mov	r24, r22
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	82 0f       	add	r24, r18
    44fc:	91 1d       	adc	r25, r1
    44fe:	8f 3f       	cpi	r24, 0xFF	; 255
    4500:	91 05       	cpc	r25, r1
    4502:	20 f4       	brcc	.+8      	; 0x450c <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4504:	62 0f       	add	r22, r18
    4506:	60 93 0f 01 	sts	0x010F, r22
    450a:	03 c0       	rjmp	.+6      	; 0x4512 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    450c:	8f ef       	ldi	r24, 0xFF	; 255
    450e:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4512:	80 91 0f 01 	lds	r24, 0x010F
    4516:	1f 92       	push	r1
    4518:	8f 93       	push	r24
    451a:	8b e0       	ldi	r24, 0x0B	; 11
    451c:	94 e0       	ldi	r25, 0x04	; 4
    451e:	16 c0       	rjmp	.+44     	; 0x454c <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4520:	20 91 0e 01 	lds	r18, 0x010E
    4524:	86 2f       	mov	r24, r22
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	82 0f       	add	r24, r18
    452a:	91 1d       	adc	r25, r1
    452c:	8f 3f       	cpi	r24, 0xFF	; 255
    452e:	91 05       	cpc	r25, r1
    4530:	20 f4       	brcc	.+8      	; 0x453a <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4532:	62 0f       	add	r22, r18
    4534:	60 93 0e 01 	sts	0x010E, r22
    4538:	03 c0       	rjmp	.+6      	; 0x4540 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    453a:	8f ef       	ldi	r24, 0xFF	; 255
    453c:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4540:	80 91 0e 01 	lds	r24, 0x010E
    4544:	1f 92       	push	r1
    4546:	8f 93       	push	r24
    4548:	80 ef       	ldi	r24, 0xF0	; 240
    454a:	93 e0       	ldi	r25, 0x03	; 3
    454c:	9f 93       	push	r25
    454e:	8f 93       	push	r24
    4550:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
            break;
    4554:	0f 90       	pop	r0
    4556:	0f 90       	pop	r0
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	08 95       	ret

0000455e <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    455e:	83 30       	cpi	r24, 0x03	; 3
    4560:	81 f1       	breq	.+96     	; 0x45c2 <mousekey_param_dec+0x64>
    4562:	28 f4       	brcc	.+10     	; 0x456e <mousekey_param_dec+0x10>
    4564:	81 30       	cpi	r24, 0x01	; 1
    4566:	59 f0       	breq	.+22     	; 0x457e <mousekey_param_dec+0x20>
    4568:	82 30       	cpi	r24, 0x02	; 2
    456a:	d1 f0       	breq	.+52     	; 0x45a0 <mousekey_param_dec+0x42>
    456c:	08 95       	ret
    456e:	85 30       	cpi	r24, 0x05	; 5
    4570:	09 f4       	brne	.+2      	; 0x4574 <mousekey_param_dec+0x16>
    4572:	49 c0       	rjmp	.+146    	; 0x4606 <mousekey_param_dec+0xa8>
    4574:	b8 f1       	brcs	.+110    	; 0x45e4 <mousekey_param_dec+0x86>
    4576:	86 30       	cpi	r24, 0x06	; 6
    4578:	09 f4       	brne	.+2      	; 0x457c <mousekey_param_dec+0x1e>
    457a:	56 c0       	rjmp	.+172    	; 0x4628 <mousekey_param_dec+0xca>
    457c:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    457e:	80 91 13 01 	lds	r24, 0x0113
    4582:	68 17       	cp	r22, r24
    4584:	20 f4       	brcc	.+8      	; 0x458e <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4586:	86 1b       	sub	r24, r22
    4588:	80 93 13 01 	sts	0x0113, r24
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    458e:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    4592:	80 91 13 01 	lds	r24, 0x0113
    4596:	1f 92       	push	r1
    4598:	8f 93       	push	r24
    459a:	81 ee       	ldi	r24, 0xE1	; 225
    459c:	93 e0       	ldi	r25, 0x03	; 3
    459e:	54 c0       	rjmp	.+168    	; 0x4648 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    45a0:	80 91 12 01 	lds	r24, 0x0112
    45a4:	68 17       	cp	r22, r24
    45a6:	20 f4       	brcc	.+8      	; 0x45b0 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    45a8:	86 1b       	sub	r24, r22
    45aa:	80 93 12 01 	sts	0x0112, r24
    45ae:	02 c0       	rjmp	.+4      	; 0x45b4 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    45b0:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    45b4:	80 91 12 01 	lds	r24, 0x0112
    45b8:	1f 92       	push	r1
    45ba:	8f 93       	push	r24
    45bc:	8f ec       	ldi	r24, 0xCF	; 207
    45be:	93 e0       	ldi	r25, 0x03	; 3
    45c0:	43 c0       	rjmp	.+134    	; 0x4648 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    45c2:	80 91 11 01 	lds	r24, 0x0111
    45c6:	68 17       	cp	r22, r24
    45c8:	20 f4       	brcc	.+8      	; 0x45d2 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    45ca:	86 1b       	sub	r24, r22
    45cc:	80 93 11 01 	sts	0x0111, r24
    45d0:	02 c0       	rjmp	.+4      	; 0x45d6 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    45d2:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    45d6:	80 91 11 01 	lds	r24, 0x0111
    45da:	1f 92       	push	r1
    45dc:	8f 93       	push	r24
    45de:	8c eb       	ldi	r24, 0xBC	; 188
    45e0:	93 e0       	ldi	r25, 0x03	; 3
    45e2:	32 c0       	rjmp	.+100    	; 0x4648 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    45e4:	80 91 10 01 	lds	r24, 0x0110
    45e8:	68 17       	cp	r22, r24
    45ea:	20 f4       	brcc	.+8      	; 0x45f4 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    45ec:	86 1b       	sub	r24, r22
    45ee:	80 93 10 01 	sts	0x0110, r24
    45f2:	02 c0       	rjmp	.+4      	; 0x45f8 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    45f4:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    45f8:	80 91 10 01 	lds	r24, 0x0110
    45fc:	1f 92       	push	r1
    45fe:	8f 93       	push	r24
    4600:	87 ea       	ldi	r24, 0xA7	; 167
    4602:	93 e0       	ldi	r25, 0x03	; 3
    4604:	21 c0       	rjmp	.+66     	; 0x4648 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4606:	80 91 0f 01 	lds	r24, 0x010F
    460a:	68 17       	cp	r22, r24
    460c:	20 f4       	brcc	.+8      	; 0x4616 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    460e:	86 1b       	sub	r24, r22
    4610:	80 93 0f 01 	sts	0x010F, r24
    4614:	02 c0       	rjmp	.+4      	; 0x461a <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4616:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    461a:	80 91 0f 01 	lds	r24, 0x010F
    461e:	1f 92       	push	r1
    4620:	8f 93       	push	r24
    4622:	8e e8       	ldi	r24, 0x8E	; 142
    4624:	93 e0       	ldi	r25, 0x03	; 3
    4626:	10 c0       	rjmp	.+32     	; 0x4648 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4628:	80 91 0e 01 	lds	r24, 0x010E
    462c:	68 17       	cp	r22, r24
    462e:	20 f4       	brcc	.+8      	; 0x4638 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4630:	86 1b       	sub	r24, r22
    4632:	80 93 0e 01 	sts	0x010E, r24
    4636:	02 c0       	rjmp	.+4      	; 0x463c <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4638:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    463c:	80 91 0e 01 	lds	r24, 0x010E
    4640:	1f 92       	push	r1
    4642:	8f 93       	push	r24
    4644:	83 e7       	ldi	r24, 0x73	; 115
    4646:	93 e0       	ldi	r25, 0x03	; 3
    4648:	9f 93       	push	r25
    464a:	8f 93       	push	r24
    464c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
            break;
    4650:	0f 90       	pop	r0
    4652:	0f 90       	pop	r0
    4654:	0f 90       	pop	r0
    4656:	0f 90       	pop	r0
    4658:	08 95       	ret

0000465a <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    465a:	cf 93       	push	r28
    465c:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    465e:	1f 92       	push	r1
    4660:	8f 93       	push	r24
    4662:	28 e7       	ldi	r18, 0x78	; 120
    4664:	36 e0       	ldi	r19, 0x06	; 6
    4666:	3f 93       	push	r19
    4668:	2f 93       	push	r18
    466a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    default_layer_set(1UL<<layer);
    466e:	61 e0       	ldi	r22, 0x01	; 1
    4670:	70 e0       	ldi	r23, 0x00	; 0
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	04 c0       	rjmp	.+8      	; 0x4680 <switch_default_layer+0x26>
    4678:	66 0f       	add	r22, r22
    467a:	77 1f       	adc	r23, r23
    467c:	88 1f       	adc	r24, r24
    467e:	99 1f       	adc	r25, r25
    4680:	ca 95       	dec	r28
    4682:	d2 f7       	brpl	.-12     	; 0x4678 <switch_default_layer+0x1e>
    4684:	0e 94 21 19 	call	0x3242	; 0x3242 <default_layer_set>
    clear_keyboard();
    4688:	0f 90       	pop	r0
    468a:	0f 90       	pop	r0
    468c:	0f 90       	pop	r0
    468e:	0f 90       	pop	r0
}
    4690:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4692:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <clear_keyboard>

00004696 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4696:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4698:	87 32       	cpi	r24, 0x27	; 39
    469a:	b0 f5       	brcc	.+108    	; 0x4708 <command_common+0x72>
    469c:	8e 31       	cpi	r24, 0x1E	; 30
    469e:	08 f0       	brcs	.+2      	; 0x46a2 <command_common+0xc>
    46a0:	3d c2       	rjmp	.+1146   	; 0x4b1c <command_common+0x486>
    46a2:	8e 30       	cpi	r24, 0x0E	; 14
    46a4:	09 f4       	brne	.+2      	; 0x46a8 <command_common+0x12>
    46a6:	bd c1       	rjmp	.+890    	; 0x4a22 <command_common+0x38c>
    46a8:	00 f5       	brcc	.+64     	; 0x46ea <command_common+0x54>
    46aa:	87 30       	cpi	r24, 0x07	; 7
    46ac:	09 f4       	brne	.+2      	; 0x46b0 <command_common+0x1a>
    46ae:	8d c1       	rjmp	.+794    	; 0x49ca <command_common+0x334>
    46b0:	a8 f4       	brcc	.+42     	; 0x46dc <command_common+0x46>
    46b2:	86 30       	cpi	r24, 0x06	; 6
    46b4:	09 f0       	breq	.+2      	; 0x46b8 <command_common+0x22>
    46b6:	36 c2       	rjmp	.+1132   	; 0x4b24 <command_common+0x48e>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    46b8:	80 91 9f 01 	lds	r24, 0x019F
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    46bc:	81 7f       	andi	r24, 0xF1	; 241
    46be:	8e 7f       	andi	r24, 0xFE	; 254
    46c0:	80 93 9f 01 	sts	0x019F, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    46c4:	8d e7       	ldi	r24, 0x7D	; 125
    46c6:	96 e0       	ldi	r25, 0x06	; 6
    46c8:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    46cc:	85 e7       	ldi	r24, 0x75	; 117
    46ce:	9a e0       	ldi	r25, 0x0A	; 10
    46d0:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            command_state = CONSOLE;
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	80 93 af 01 	sts	0x01AF, r24
    46da:	75 c1       	rjmp	.+746    	; 0x49c6 <command_common+0x330>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    46dc:	88 30       	cpi	r24, 0x08	; 8
    46de:	09 f4       	brne	.+2      	; 0x46e2 <command_common+0x4c>
    46e0:	3f c0       	rjmp	.+126    	; 0x4760 <command_common+0xca>
    46e2:	8b 30       	cpi	r24, 0x0B	; 11
    46e4:	09 f4       	brne	.+2      	; 0x46e8 <command_common+0x52>
    46e6:	6b c1       	rjmp	.+726    	; 0x49be <command_common+0x328>
    46e8:	1d c2       	rjmp	.+1082   	; 0x4b24 <command_common+0x48e>
    46ea:	86 31       	cpi	r24, 0x16	; 22
    46ec:	09 f4       	brne	.+2      	; 0x46f0 <command_common+0x5a>
    46ee:	dd c1       	rjmp	.+954    	; 0x4aaa <command_common+0x414>
    46f0:	20 f4       	brcc	.+8      	; 0x46fa <command_common+0x64>
    46f2:	80 31       	cpi	r24, 0x10	; 16
    46f4:	09 f4       	brne	.+2      	; 0x46f8 <command_common+0x62>
    46f6:	a8 c1       	rjmp	.+848    	; 0x4a48 <command_common+0x3b2>
    46f8:	15 c2       	rjmp	.+1066   	; 0x4b24 <command_common+0x48e>
    46fa:	89 31       	cpi	r24, 0x19	; 25
    46fc:	09 f4       	brne	.+2      	; 0x4700 <command_common+0x6a>
    46fe:	be c1       	rjmp	.+892    	; 0x4a7c <command_common+0x3e6>
    4700:	8b 31       	cpi	r24, 0x1B	; 27
    4702:	09 f4       	brne	.+2      	; 0x4706 <command_common+0x70>
    4704:	7b c1       	rjmp	.+758    	; 0x49fc <command_common+0x366>
    4706:	0e c2       	rjmp	.+1052   	; 0x4b24 <command_common+0x48e>
    4708:	88 33       	cpi	r24, 0x38	; 56
    470a:	09 f4       	brne	.+2      	; 0x470e <command_common+0x78>
    470c:	58 c1       	rjmp	.+688    	; 0x49be <command_common+0x328>
    470e:	50 f4       	brcc	.+20     	; 0x4724 <command_common+0x8e>
    4710:	89 32       	cpi	r24, 0x29	; 41
    4712:	09 f4       	brne	.+2      	; 0x4716 <command_common+0x80>
    4714:	01 c2       	rjmp	.+1026   	; 0x4b18 <command_common+0x482>
    4716:	85 33       	cpi	r24, 0x35	; 53
    4718:	09 f4       	brne	.+2      	; 0x471c <command_common+0x86>
    471a:	fe c1       	rjmp	.+1020   	; 0x4b18 <command_common+0x482>
    471c:	87 32       	cpi	r24, 0x27	; 39
    471e:	09 f0       	breq	.+2      	; 0x4722 <command_common+0x8c>
    4720:	01 c2       	rjmp	.+1026   	; 0x4b24 <command_common+0x48e>
    4722:	fa c1       	rjmp	.+1012   	; 0x4b18 <command_common+0x482>
    4724:	83 34       	cpi	r24, 0x43	; 67
    4726:	09 f4       	brne	.+2      	; 0x472a <command_common+0x94>
    4728:	f7 c1       	rjmp	.+1006   	; 0x4b18 <command_common+0x482>
    472a:	28 f4       	brcc	.+10     	; 0x4736 <command_common+0xa0>
    472c:	8a 33       	cpi	r24, 0x3A	; 58
    472e:	08 f4       	brcc	.+2      	; 0x4732 <command_common+0x9c>
    4730:	f9 c1       	rjmp	.+1010   	; 0x4b24 <command_common+0x48e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4732:	89 53       	subi	r24, 0x39	; 57
    4734:	f4 c1       	rjmp	.+1000   	; 0x4b1e <command_common+0x488>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4736:	88 34       	cpi	r24, 0x48	; 72
    4738:	09 f0       	breq	.+2      	; 0x473c <command_common+0xa6>
    473a:	f4 c1       	rjmp	.+1000   	; 0x4b24 <command_common+0x48e>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    473c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <clear_keyboard>
            print("\n\nbootloader... ");
    4740:	84 e6       	ldi	r24, 0x64	; 100
    4742:	9a e0       	ldi	r25, 0x0A	; 10
    4744:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4748:	9f ef       	ldi	r25, 0xFF	; 255
    474a:	23 ed       	ldi	r18, 0xD3	; 211
    474c:	80 e3       	ldi	r24, 0x30	; 48
    474e:	91 50       	subi	r25, 0x01	; 1
    4750:	20 40       	sbci	r18, 0x00	; 0
    4752:	80 40       	sbci	r24, 0x00	; 0
    4754:	e1 f7       	brne	.-8      	; 0x474e <command_common+0xb8>
    4756:	00 c0       	rjmp	.+0      	; 0x4758 <command_common+0xc2>
    4758:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    475a:	0e 94 1e 1c 	call	0x383c	; 0x383c <bootloader_jump>
    475e:	33 c1       	rjmp	.+614    	; 0x49c6 <command_common+0x330>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4760:	89 e7       	ldi	r24, 0x79	; 121
    4762:	9a e0       	ldi	r25, 0x0A	; 10
    4764:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4768:	84 e7       	ldi	r24, 0x74	; 116
    476a:	98 e0       	ldi	r25, 0x08	; 8
    476c:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4770:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <eeconfig_read_default_layer>
    4774:	1f 92       	push	r1
    4776:	8f 93       	push	r24
    4778:	81 e7       	ldi	r24, 0x71	; 113
    477a:	98 e0       	ldi	r25, 0x08	; 8
    477c:	9f 93       	push	r25
    477e:	8f 93       	push	r24
    4780:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4784:	8f e6       	ldi	r24, 0x6F	; 111
    4786:	98 e0       	ldi	r25, 0x08	; 8
    4788:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    478c:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <eeconfig_read_debug>
    4790:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4792:	8c e5       	ldi	r24, 0x5C	; 92
    4794:	98 e0       	ldi	r25, 0x08	; 8
    4796:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    479a:	1f 92       	push	r1
    479c:	cf 93       	push	r28
    479e:	27 e5       	ldi	r18, 0x57	; 87
    47a0:	38 e0       	ldi	r19, 0x08	; 8
    47a2:	3f 93       	push	r19
    47a4:	2f 93       	push	r18
    47a6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    47aa:	85 e5       	ldi	r24, 0x55	; 85
    47ac:	98 e0       	ldi	r25, 0x08	; 8
    47ae:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    47b2:	8b e4       	ldi	r24, 0x4B	; 75
    47b4:	98 e0       	ldi	r25, 0x08	; 8
    47b6:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    47ba:	8c 2f       	mov	r24, r28
    47bc:	81 70       	andi	r24, 0x01	; 1
    47be:	1f 92       	push	r1
    47c0:	8f 93       	push	r24
    47c2:	28 e4       	ldi	r18, 0x48	; 72
    47c4:	38 e0       	ldi	r19, 0x08	; 8
    47c6:	3f 93       	push	r19
    47c8:	2f 93       	push	r18
    47ca:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    47ce:	86 e4       	ldi	r24, 0x46	; 70
    47d0:	98 e0       	ldi	r25, 0x08	; 8
    47d2:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    47d6:	8c e3       	ldi	r24, 0x3C	; 60
    47d8:	98 e0       	ldi	r25, 0x08	; 8
    47da:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    47de:	c1 fb       	bst	r28, 1
    47e0:	88 27       	eor	r24, r24
    47e2:	80 f9       	bld	r24, 0
    47e4:	1f 92       	push	r1
    47e6:	8f 93       	push	r24
    47e8:	29 e3       	ldi	r18, 0x39	; 57
    47ea:	38 e0       	ldi	r19, 0x08	; 8
    47ec:	3f 93       	push	r19
    47ee:	2f 93       	push	r18
    47f0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    47f4:	87 e3       	ldi	r24, 0x37	; 55
    47f6:	98 e0       	ldi	r25, 0x08	; 8
    47f8:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    47fc:	8b e2       	ldi	r24, 0x2B	; 43
    47fe:	98 e0       	ldi	r25, 0x08	; 8
    4800:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4804:	c2 fb       	bst	r28, 2
    4806:	88 27       	eor	r24, r24
    4808:	80 f9       	bld	r24, 0
    480a:	1f 92       	push	r1
    480c:	8f 93       	push	r24
    480e:	28 e2       	ldi	r18, 0x28	; 40
    4810:	38 e0       	ldi	r19, 0x08	; 8
    4812:	3f 93       	push	r19
    4814:	2f 93       	push	r18
    4816:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    481a:	86 e2       	ldi	r24, 0x26	; 38
    481c:	98 e0       	ldi	r25, 0x08	; 8
    481e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4822:	8d e1       	ldi	r24, 0x1D	; 29
    4824:	98 e0       	ldi	r25, 0x08	; 8
    4826:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    482a:	c3 fb       	bst	r28, 3
    482c:	cc 27       	eor	r28, r28
    482e:	c0 f9       	bld	r28, 0
    4830:	1f 92       	push	r1
    4832:	cf 93       	push	r28
    4834:	8a e1       	ldi	r24, 0x1A	; 26
    4836:	98 e0       	ldi	r25, 0x08	; 8
    4838:	9f 93       	push	r25
    483a:	8f 93       	push	r24
    483c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4840:	88 e1       	ldi	r24, 0x18	; 24
    4842:	98 e0       	ldi	r25, 0x08	; 8
    4844:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4848:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <eeconfig_read_keymap>
    484c:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    484e:	84 e0       	ldi	r24, 0x04	; 4
    4850:	98 e0       	ldi	r25, 0x08	; 8
    4852:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4856:	1f 92       	push	r1
    4858:	cf 93       	push	r28
    485a:	2f ef       	ldi	r18, 0xFF	; 255
    485c:	37 e0       	ldi	r19, 0x07	; 7
    485e:	3f 93       	push	r19
    4860:	2f 93       	push	r18
    4862:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4866:	8d ef       	ldi	r24, 0xFD	; 253
    4868:	97 e0       	ldi	r25, 0x07	; 7
    486a:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    486e:	84 ee       	ldi	r24, 0xE4	; 228
    4870:	97 e0       	ldi	r25, 0x07	; 7
    4872:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4876:	8c 2f       	mov	r24, r28
    4878:	81 70       	andi	r24, 0x01	; 1
    487a:	1f 92       	push	r1
    487c:	8f 93       	push	r24
    487e:	21 ee       	ldi	r18, 0xE1	; 225
    4880:	37 e0       	ldi	r19, 0x07	; 7
    4882:	3f 93       	push	r19
    4884:	2f 93       	push	r18
    4886:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    488a:	8d b7       	in	r24, 0x3d	; 61
    488c:	9e b7       	in	r25, 0x3e	; 62
    488e:	80 96       	adiw	r24, 0x20	; 32
    4890:	0f b6       	in	r0, 0x3f	; 63
    4892:	f8 94       	cli
    4894:	9e bf       	out	0x3e, r25	; 62
    4896:	0f be       	out	0x3f, r0	; 63
    4898:	8d bf       	out	0x3d, r24	; 61
    489a:	8f ed       	ldi	r24, 0xDF	; 223
    489c:	97 e0       	ldi	r25, 0x07	; 7
    489e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    48a2:	88 ec       	ldi	r24, 0xC8	; 200
    48a4:	97 e0       	ldi	r25, 0x07	; 7
    48a6:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    48aa:	c1 fb       	bst	r28, 1
    48ac:	88 27       	eor	r24, r24
    48ae:	80 f9       	bld	r24, 0
    48b0:	1f 92       	push	r1
    48b2:	8f 93       	push	r24
    48b4:	25 ec       	ldi	r18, 0xC5	; 197
    48b6:	37 e0       	ldi	r19, 0x07	; 7
    48b8:	3f 93       	push	r19
    48ba:	2f 93       	push	r18
    48bc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    48c0:	83 ec       	ldi	r24, 0xC3	; 195
    48c2:	97 e0       	ldi	r25, 0x07	; 7
    48c4:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    48c8:	81 eb       	ldi	r24, 0xB1	; 177
    48ca:	97 e0       	ldi	r25, 0x07	; 7
    48cc:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    48d0:	c2 fb       	bst	r28, 2
    48d2:	88 27       	eor	r24, r24
    48d4:	80 f9       	bld	r24, 0
    48d6:	1f 92       	push	r1
    48d8:	8f 93       	push	r24
    48da:	2e ea       	ldi	r18, 0xAE	; 174
    48dc:	37 e0       	ldi	r19, 0x07	; 7
    48de:	3f 93       	push	r19
    48e0:	2f 93       	push	r18
    48e2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    48e6:	8c ea       	ldi	r24, 0xAC	; 172
    48e8:	97 e0       	ldi	r25, 0x07	; 7
    48ea:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    48ee:	8a e9       	ldi	r24, 0x9A	; 154
    48f0:	97 e0       	ldi	r25, 0x07	; 7
    48f2:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    48f6:	c3 fb       	bst	r28, 3
    48f8:	88 27       	eor	r24, r24
    48fa:	80 f9       	bld	r24, 0
    48fc:	1f 92       	push	r1
    48fe:	8f 93       	push	r24
    4900:	27 e9       	ldi	r18, 0x97	; 151
    4902:	37 e0       	ldi	r19, 0x07	; 7
    4904:	3f 93       	push	r19
    4906:	2f 93       	push	r18
    4908:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    490c:	85 e9       	ldi	r24, 0x95	; 149
    490e:	97 e0       	ldi	r25, 0x07	; 7
    4910:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4914:	8b e8       	ldi	r24, 0x8B	; 139
    4916:	97 e0       	ldi	r25, 0x07	; 7
    4918:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    491c:	c4 fb       	bst	r28, 4
    491e:	88 27       	eor	r24, r24
    4920:	80 f9       	bld	r24, 0
    4922:	1f 92       	push	r1
    4924:	8f 93       	push	r24
    4926:	28 e8       	ldi	r18, 0x88	; 136
    4928:	37 e0       	ldi	r19, 0x07	; 7
    492a:	3f 93       	push	r19
    492c:	2f 93       	push	r18
    492e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4932:	86 e8       	ldi	r24, 0x86	; 134
    4934:	97 e0       	ldi	r25, 0x07	; 7
    4936:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    493a:	84 e7       	ldi	r24, 0x74	; 116
    493c:	97 e0       	ldi	r25, 0x07	; 7
    493e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4942:	c5 fb       	bst	r28, 5
    4944:	88 27       	eor	r24, r24
    4946:	80 f9       	bld	r24, 0
    4948:	1f 92       	push	r1
    494a:	8f 93       	push	r24
    494c:	21 e7       	ldi	r18, 0x71	; 113
    494e:	37 e0       	ldi	r19, 0x07	; 7
    4950:	3f 93       	push	r19
    4952:	2f 93       	push	r18
    4954:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4958:	8f e6       	ldi	r24, 0x6F	; 111
    495a:	97 e0       	ldi	r25, 0x07	; 7
    495c:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4960:	83 e5       	ldi	r24, 0x53	; 83
    4962:	97 e0       	ldi	r25, 0x07	; 7
    4964:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4968:	c6 fb       	bst	r28, 6
    496a:	88 27       	eor	r24, r24
    496c:	80 f9       	bld	r24, 0
    496e:	1f 92       	push	r1
    4970:	8f 93       	push	r24
    4972:	20 e5       	ldi	r18, 0x50	; 80
    4974:	37 e0       	ldi	r19, 0x07	; 7
    4976:	3f 93       	push	r19
    4978:	2f 93       	push	r18
    497a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    497e:	8e e4       	ldi	r24, 0x4E	; 78
    4980:	97 e0       	ldi	r25, 0x07	; 7
    4982:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4986:	86 e4       	ldi	r24, 0x46	; 70
    4988:	97 e0       	ldi	r25, 0x07	; 7
    498a:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    498e:	c7 fb       	bst	r28, 7
    4990:	cc 27       	eor	r28, r28
    4992:	c0 f9       	bld	r28, 0
    4994:	1f 92       	push	r1
    4996:	cf 93       	push	r28
    4998:	83 e4       	ldi	r24, 0x43	; 67
    499a:	97 e0       	ldi	r25, 0x07	; 7
    499c:	9f 93       	push	r25
    499e:	8f 93       	push	r24
    49a0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    49a4:	81 e4       	ldi	r24, 0x41	; 65
    49a6:	97 e0       	ldi	r25, 0x07	; 7
    49a8:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    49ac:	8d b7       	in	r24, 0x3d	; 61
    49ae:	9e b7       	in	r25, 0x3e	; 62
    49b0:	4c 96       	adiw	r24, 0x1c	; 28
    49b2:	0f b6       	in	r0, 0x3f	; 63
    49b4:	f8 94       	cli
    49b6:	9e bf       	out	0x3e, r25	; 62
    49b8:	0f be       	out	0x3f, r0	; 63
    49ba:	8d bf       	out	0x3d, r24	; 61
    49bc:	04 c0       	rjmp	.+8      	; 0x49c6 <command_common+0x330>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    49be:	84 ea       	ldi	r24, 0xA4	; 164
    49c0:	96 e0       	ldi	r25, 0x06	; 6
    49c2:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    49c6:	c1 e0       	ldi	r28, 0x01	; 1
    49c8:	b2 c0       	rjmp	.+356    	; 0x4b2e <command_common+0x498>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    49ca:	80 91 9f 01 	lds	r24, 0x019F
    49ce:	c8 2f       	mov	r28, r24
    49d0:	c1 70       	andi	r28, 0x01	; 1
    49d2:	80 ff       	sbrs	r24, 0
    49d4:	09 c0       	rjmp	.+18     	; 0x49e8 <command_common+0x352>
                print("\ndebug: off\n");
    49d6:	87 e5       	ldi	r24, 0x57	; 87
    49d8:	9a e0       	ldi	r25, 0x0A	; 10
    49da:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
                debug_matrix   = false;
    49de:	80 91 9f 01 	lds	r24, 0x019F
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    49e2:	81 7f       	andi	r24, 0xF1	; 241
    49e4:	8e 7f       	andi	r24, 0xFE	; 254
    49e6:	44 c0       	rjmp	.+136    	; 0x4a70 <command_common+0x3da>
            } else {
                print("\ndebug: on\n");
    49e8:	8b e4       	ldi	r24, 0x4B	; 75
    49ea:	9a e0       	ldi	r25, 0x0A	; 10
    49ec:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
                debug_enable   = true;
    49f0:	80 91 9f 01 	lds	r24, 0x019F
    49f4:	81 60       	ori	r24, 0x01	; 1
    49f6:	80 93 9f 01 	sts	0x019F, r24
    49fa:	e5 cf       	rjmp	.-54     	; 0x49c6 <command_common+0x330>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    49fc:	80 91 9f 01 	lds	r24, 0x019F
    4a00:	81 fb       	bst	r24, 1
    4a02:	cc 27       	eor	r28, r28
    4a04:	c0 f9       	bld	r28, 0
    4a06:	91 e0       	ldi	r25, 0x01	; 1
    4a08:	c9 27       	eor	r28, r25
    4a0a:	c0 fb       	bst	r28, 0
    4a0c:	81 f9       	bld	r24, 1
    4a0e:	80 93 9f 01 	sts	0x019F, r24
            if (debug_matrix) {
    4a12:	cc 23       	and	r28, r28
    4a14:	19 f0       	breq	.+6      	; 0x4a1c <command_common+0x386>
                print("\nmatrix: on\n");
    4a16:	8e e3       	ldi	r24, 0x3E	; 62
    4a18:	9a e0       	ldi	r25, 0x0A	; 10
    4a1a:	25 c0       	rjmp	.+74     	; 0x4a66 <command_common+0x3d0>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4a1c:	80 e3       	ldi	r24, 0x30	; 48
    4a1e:	9a e0       	ldi	r25, 0x0A	; 10
    4a20:	d0 cf       	rjmp	.-96     	; 0x49c2 <command_common+0x32c>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4a22:	80 91 9f 01 	lds	r24, 0x019F
    4a26:	82 fb       	bst	r24, 2
    4a28:	cc 27       	eor	r28, r28
    4a2a:	c0 f9       	bld	r28, 0
    4a2c:	91 e0       	ldi	r25, 0x01	; 1
    4a2e:	c9 27       	eor	r28, r25
    4a30:	c0 fb       	bst	r28, 0
    4a32:	82 f9       	bld	r24, 2
    4a34:	80 93 9f 01 	sts	0x019F, r24
            if (debug_keyboard) {
    4a38:	cc 23       	and	r28, r28
    4a3a:	19 f0       	breq	.+6      	; 0x4a42 <command_common+0x3ac>
                print("\nkeyboard: on\n");
    4a3c:	81 e2       	ldi	r24, 0x21	; 33
    4a3e:	9a e0       	ldi	r25, 0x0A	; 10
    4a40:	12 c0       	rjmp	.+36     	; 0x4a66 <command_common+0x3d0>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4a42:	81 e1       	ldi	r24, 0x11	; 17
    4a44:	9a e0       	ldi	r25, 0x0A	; 10
    4a46:	bd cf       	rjmp	.-134    	; 0x49c2 <command_common+0x32c>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4a48:	80 91 9f 01 	lds	r24, 0x019F
    4a4c:	83 fb       	bst	r24, 3
    4a4e:	cc 27       	eor	r28, r28
    4a50:	c0 f9       	bld	r28, 0
    4a52:	91 e0       	ldi	r25, 0x01	; 1
    4a54:	c9 27       	eor	r28, r25
    4a56:	c0 fb       	bst	r28, 0
    4a58:	83 f9       	bld	r24, 3
    4a5a:	80 93 9f 01 	sts	0x019F, r24
            if (debug_mouse) {
    4a5e:	cc 23       	and	r28, r28
    4a60:	51 f0       	breq	.+20     	; 0x4a76 <command_common+0x3e0>
                print("\nmouse: on\n");
    4a62:	85 e0       	ldi	r24, 0x05	; 5
    4a64:	9a e0       	ldi	r25, 0x0A	; 10
    4a66:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
                debug_enable = true;
    4a6a:	80 91 9f 01 	lds	r24, 0x019F
    4a6e:	81 60       	ori	r24, 0x01	; 1
    4a70:	80 93 9f 01 	sts	0x019F, r24
    4a74:	5c c0       	rjmp	.+184    	; 0x4b2e <command_common+0x498>
            } else {
                print("\nmouse: off\n");
    4a76:	88 ef       	ldi	r24, 0xF8	; 248
    4a78:	99 e0       	ldi	r25, 0x09	; 9
    4a7a:	a3 cf       	rjmp	.-186    	; 0x49c2 <command_common+0x32c>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4a7c:	89 ee       	ldi	r24, 0xE9	; 233
    4a7e:	99 e0       	ldi	r25, 0x09	; 9
    4a80:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4a84:	80 ec       	ldi	r24, 0xC0	; 192
    4a86:	99 e0       	ldi	r25, 0x09	; 9
    4a88:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4a8c:	8b e8       	ldi	r24, 0x8B	; 139
    4a8e:	99 e0       	ldi	r25, 0x09	; 9
    4a90:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4a94:	8e e5       	ldi	r24, 0x5E	; 94
    4a96:	99 e0       	ldi	r25, 0x09	; 9
    4a98:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            /* build options */
            print("OPTIONS:"
    4a9c:	8e e1       	ldi	r24, 0x1E	; 30
    4a9e:	99 e0       	ldi	r25, 0x09	; 9
    4aa0:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4aa4:	8f ee       	ldi	r24, 0xEF	; 239
    4aa6:	98 e0       	ldi	r25, 0x08	; 8
    4aa8:	8c cf       	rjmp	.-232    	; 0x49c2 <command_common+0x32c>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4aaa:	81 ee       	ldi	r24, 0xE1	; 225
    4aac:	98 e0       	ldi	r25, 0x08	; 8
    4aae:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            print_val_hex8(host_keyboard_leds());
    4ab2:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <host_keyboard_leds>
    4ab6:	1f 92       	push	r1
    4ab8:	8f 93       	push	r24
    4aba:	87 ec       	ldi	r24, 0xC7	; 199
    4abc:	98 e0       	ldi	r25, 0x08	; 8
    4abe:	9f 93       	push	r25
    4ac0:	8f 93       	push	r24
    4ac2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
            print_val_hex8(keyboard_protocol);
    4ac6:	80 91 0b 01 	lds	r24, 0x010B
    4aca:	1f 92       	push	r1
    4acc:	8f 93       	push	r24
    4ace:	80 eb       	ldi	r24, 0xB0	; 176
    4ad0:	98 e0       	ldi	r25, 0x08	; 8
    4ad2:	9f 93       	push	r25
    4ad4:	8f 93       	push	r24
    4ad6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
            print_val_hex8(keyboard_idle);
    4ada:	80 91 48 01 	lds	r24, 0x0148
    4ade:	1f 92       	push	r1
    4ae0:	8f 93       	push	r24
    4ae2:	8d e9       	ldi	r24, 0x9D	; 157
    4ae4:	98 e0       	ldi	r25, 0x08	; 8
    4ae6:	9f 93       	push	r25
    4ae8:	8f 93       	push	r24
    4aea:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    4aee:	0e 94 c4 1b 	call	0x3788	; 0x3788 <timer_read32>
    4af2:	9f 93       	push	r25
    4af4:	8f 93       	push	r24
    4af6:	7f 93       	push	r23
    4af8:	6f 93       	push	r22
    4afa:	86 e8       	ldi	r24, 0x86	; 134
    4afc:	98 e0       	ldi	r25, 0x08	; 8
    4afe:	9f 93       	push	r25
    4b00:	8f 93       	push	r24
    4b02:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4b06:	8d b7       	in	r24, 0x3d	; 61
    4b08:	9e b7       	in	r25, 0x3e	; 62
    4b0a:	42 96       	adiw	r24, 0x12	; 18
    4b0c:	0f b6       	in	r0, 0x3f	; 63
    4b0e:	f8 94       	cli
    4b10:	9e bf       	out	0x3e, r25	; 62
    4b12:	0f be       	out	0x3f, r0	; 63
    4b14:	8d bf       	out	0x3d, r24	; 61
    4b16:	57 cf       	rjmp	.-338    	; 0x49c6 <command_common+0x330>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4b18:	80 e0       	ldi	r24, 0x00	; 0
    4b1a:	01 c0       	rjmp	.+2      	; 0x4b1e <command_common+0x488>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4b1c:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4b1e:	0e 94 2d 23 	call	0x465a	; 0x465a <switch_default_layer>
    4b22:	51 cf       	rjmp	.-350    	; 0x49c6 <command_common+0x330>
            break;
        default:
            print("?");
    4b24:	84 e8       	ldi	r24, 0x84	; 132
    4b26:	98 e0       	ldi	r25, 0x08	; 8
    4b28:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            return false;
    4b2c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4b2e:	8c 2f       	mov	r24, r28
    4b30:	cf 91       	pop	r28
    4b32:	08 95       	ret

00004b34 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	08 95       	ret

00004b38 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	08 95       	ret

00004b3c <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4b3c:	cf 93       	push	r28
    4b3e:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4b40:	80 91 af 01 	lds	r24, 0x01AF
    4b44:	81 30       	cpi	r24, 0x01	; 1
    4b46:	71 f0       	breq	.+28     	; 0x4b64 <command_proc+0x28>
    4b48:	20 f0       	brcs	.+8      	; 0x4b52 <command_proc+0x16>
    4b4a:	82 30       	cpi	r24, 0x02	; 2
    4b4c:	09 f4       	brne	.+2      	; 0x4b50 <command_proc+0x14>
    4b4e:	48 c0       	rjmp	.+144    	; 0x4be0 <command_proc+0xa4>
    4b50:	3f c1       	rjmp	.+638    	; 0x4dd0 <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4b52:	a0 91 0c 01 	lds	r26, 0x010C
    4b56:	b0 91 0d 01 	lds	r27, 0x010D
    4b5a:	8c 91       	ld	r24, X
    4b5c:	82 32       	cpi	r24, 0x22	; 34
    4b5e:	09 f0       	breq	.+2      	; 0x4b62 <command_proc+0x26>
    4b60:	39 c1       	rjmp	.+626    	; 0x4dd4 <command_proc+0x298>
    4b62:	07 c0       	rjmp	.+14     	; 0x4b72 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4b64:	a0 91 0c 01 	lds	r26, 0x010C
    4b68:	b0 91 0d 01 	lds	r27, 0x010D
    4b6c:	8c 91       	ld	r24, X
    4b6e:	82 32       	cpi	r24, 0x22	; 34
    4b70:	49 f4       	brne	.+18     	; 0x4b84 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4b72:	8c 2f       	mov	r24, r28
    4b74:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <command_extra>
    4b78:	81 11       	cpse	r24, r1
    4b7a:	2f c0       	rjmp	.+94     	; 0x4bda <command_proc+0x9e>
    4b7c:	8c 2f       	mov	r24, r28
    4b7e:	0e 94 4b 23 	call	0x4696	; 0x4696 <command_common>
    4b82:	2c c0       	rjmp	.+88     	; 0x4bdc <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4b84:	8c 2f       	mov	r24, r28
    4b86:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <command_console_extra>
    4b8a:	81 11       	cpse	r24, r1
    4b8c:	26 c0       	rjmp	.+76     	; 0x4bda <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4b8e:	c4 31       	cpi	r28, 0x14	; 20
    4b90:	e1 f0       	breq	.+56     	; 0x4bca <command_proc+0x8e>
    4b92:	70 f4       	brcc	.+28     	; 0x4bb0 <command_proc+0x74>
    4b94:	cb 30       	cpi	r28, 0x0B	; 11
    4b96:	81 f0       	breq	.+32     	; 0x4bb8 <command_proc+0x7c>
    4b98:	c0 31       	cpi	r28, 0x10	; 16
    4b9a:	d1 f4       	brne	.+52     	; 0x4bd0 <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4b9c:	0e 94 f5 21 	call	0x43ea	; 0x43ea <mousekey_console_help>
            print("M> ");
    4ba0:	80 e7       	ldi	r24, 0x70	; 112
    4ba2:	96 e0       	ldi	r25, 0x06	; 6
    4ba4:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
            command_state = MOUSEKEY;
    4ba8:	82 e0       	ldi	r24, 0x02	; 2
    4baa:	80 93 af 01 	sts	0x01AF, r24
    4bae:	15 c0       	rjmp	.+42     	; 0x4bda <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4bb0:	c9 32       	cpi	r28, 0x29	; 41
    4bb2:	59 f0       	breq	.+22     	; 0x4bca <command_proc+0x8e>
    4bb4:	c8 33       	cpi	r28, 0x38	; 56
    4bb6:	61 f4       	brne	.+24     	; 0x4bd0 <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4bb8:	8d e7       	ldi	r24, 0x7D	; 125
    4bba:	96 e0       	ldi	r25, 0x06	; 6
    4bbc:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4bc0:	84 e7       	ldi	r24, 0x74	; 116
    4bc2:	96 e0       	ldi	r25, 0x06	; 6
    4bc4:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4bc8:	08 c0       	rjmp	.+16     	; 0x4bda <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4bca:	10 92 af 01 	sts	0x01AF, r1
    4bce:	04 c1       	rjmp	.+520    	; 0x4dd8 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4bd0:	8e e6       	ldi	r24, 0x6E	; 110
    4bd2:	96 e0       	ldi	r25, 0x06	; 6
    4bd4:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4bd8:	ff c0       	rjmp	.+510    	; 0x4dd8 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	81 70       	andi	r24, 0x01	; 1
    4bde:	fe c0       	rjmp	.+508    	; 0x4ddc <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4be0:	c4 32       	cpi	r28, 0x24	; 36
    4be2:	28 f5       	brcc	.+74     	; 0x4c2e <command_proc+0xf2>
    4be4:	ce 31       	cpi	r28, 0x1E	; 30
    4be6:	08 f0       	brcs	.+2      	; 0x4bea <command_proc+0xae>
    4be8:	c1 c0       	rjmp	.+386    	; 0x4d6c <command_proc+0x230>
    4bea:	cb 30       	cpi	r28, 0x0B	; 11
    4bec:	a1 f1       	breq	.+104    	; 0x4c56 <command_proc+0x11a>
    4bee:	d0 f4       	brcc	.+52     	; 0x4c24 <command_proc+0xe8>
    4bf0:	c7 30       	cpi	r28, 0x07	; 7
    4bf2:	09 f0       	breq	.+2      	; 0x4bf6 <command_proc+0xba>
    4bf4:	d3 c0       	rjmp	.+422    	; 0x4d9c <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4bf6:	8e e1       	ldi	r24, 0x1E	; 30
    4bf8:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4bfc:	82 e3       	ldi	r24, 0x32	; 50
    4bfe:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4c02:	8a e0       	ldi	r24, 0x0A	; 10
    4c04:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4c08:	84 e1       	ldi	r24, 0x14	; 20
    4c0a:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4c0e:	88 e0       	ldi	r24, 0x08	; 8
    4c10:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4c14:	88 e2       	ldi	r24, 0x28	; 40
    4c16:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    4c1a:	84 e1       	ldi	r24, 0x14	; 20
    4c1c:	95 e0       	ldi	r25, 0x05	; 5
    4c1e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4c22:	bf c0       	rjmp	.+382    	; 0x4da2 <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4c24:	c3 31       	cpi	r28, 0x13	; 19
    4c26:	49 f1       	breq	.+82     	; 0x4c7a <command_proc+0x13e>
    4c28:	c4 31       	cpi	r28, 0x14	; 20
    4c2a:	c1 f0       	breq	.+48     	; 0x4c5c <command_proc+0x120>
    4c2c:	b7 c0       	rjmp	.+366    	; 0x4d9c <command_proc+0x260>
    4c2e:	cb 34       	cpi	r28, 0x4B	; 75
    4c30:	09 f4       	brne	.+2      	; 0x4c34 <command_proc+0xf8>
    4c32:	a9 c0       	rjmp	.+338    	; 0x4d86 <command_proc+0x24a>
    4c34:	28 f4       	brcc	.+10     	; 0x4c40 <command_proc+0x104>
    4c36:	c9 32       	cpi	r28, 0x29	; 41
    4c38:	89 f0       	breq	.+34     	; 0x4c5c <command_proc+0x120>
    4c3a:	c8 33       	cpi	r28, 0x38	; 56
    4c3c:	61 f0       	breq	.+24     	; 0x4c56 <command_proc+0x11a>
    4c3e:	ae c0       	rjmp	.+348    	; 0x4d9c <command_proc+0x260>
    4c40:	c1 35       	cpi	r28, 0x51	; 81
    4c42:	09 f4       	brne	.+2      	; 0x4c46 <command_proc+0x10a>
    4c44:	9e c0       	rjmp	.+316    	; 0x4d82 <command_proc+0x246>
    4c46:	c2 35       	cpi	r28, 0x52	; 82
    4c48:	09 f4       	brne	.+2      	; 0x4c4c <command_proc+0x110>
    4c4a:	99 c0       	rjmp	.+306    	; 0x4d7e <command_proc+0x242>
    4c4c:	ce 34       	cpi	r28, 0x4E	; 78
    4c4e:	09 f0       	breq	.+2      	; 0x4c52 <command_proc+0x116>
    4c50:	a5 c0       	rjmp	.+330    	; 0x4d9c <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4c52:	6a e0       	ldi	r22, 0x0A	; 10
    4c54:	9e c0       	rjmp	.+316    	; 0x4d92 <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4c56:	0e 94 f5 21 	call	0x43ea	; 0x43ea <mousekey_console_help>
    4c5a:	a3 c0       	rjmp	.+326    	; 0x4da2 <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4c5c:	80 91 ae 01 	lds	r24, 0x01AE
    4c60:	88 23       	and	r24, r24
    4c62:	19 f0       	breq	.+6      	; 0x4c6a <command_proc+0x12e>
                mousekey_param = 0;
    4c64:	10 92 ae 01 	sts	0x01AE, r1
    4c68:	9c c0       	rjmp	.+312    	; 0x4da2 <command_proc+0x266>
            } else {
                print("C> ");
    4c6a:	81 e2       	ldi	r24, 0x21	; 33
    4c6c:	95 e0       	ldi	r25, 0x05	; 5
    4c6e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
                command_state = CONSOLE;
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	80 93 af 01 	sts	0x01AF, r24
    4c78:	b1 c0       	rjmp	.+354    	; 0x4ddc <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4c7a:	8b ef       	ldi	r24, 0xFB	; 251
    4c7c:	94 e0       	ldi	r25, 0x04	; 4
    4c7e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4c82:	89 ee       	ldi	r24, 0xE9	; 233
    4c84:	94 e0       	ldi	r25, 0x04	; 4
    4c86:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4c8a:	80 91 13 01 	lds	r24, 0x0113
    4c8e:	1f 92       	push	r1
    4c90:	8f 93       	push	r24
    4c92:	86 ee       	ldi	r24, 0xE6	; 230
    4c94:	94 e0       	ldi	r25, 0x04	; 4
    4c96:	9f 93       	push	r25
    4c98:	8f 93       	push	r24
    4c9a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4c9e:	84 ee       	ldi	r24, 0xE4	; 228
    4ca0:	94 e0       	ldi	r25, 0x04	; 4
    4ca2:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4ca6:	82 ed       	ldi	r24, 0xD2	; 210
    4ca8:	94 e0       	ldi	r25, 0x04	; 4
    4caa:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4cae:	80 91 12 01 	lds	r24, 0x0112
    4cb2:	1f 92       	push	r1
    4cb4:	8f 93       	push	r24
    4cb6:	8f ec       	ldi	r24, 0xCF	; 207
    4cb8:	94 e0       	ldi	r25, 0x04	; 4
    4cba:	9f 93       	push	r25
    4cbc:	8f 93       	push	r24
    4cbe:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4cc2:	8d ec       	ldi	r24, 0xCD	; 205
    4cc4:	94 e0       	ldi	r25, 0x04	; 4
    4cc6:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4cca:	8e eb       	ldi	r24, 0xBE	; 190
    4ccc:	94 e0       	ldi	r25, 0x04	; 4
    4cce:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4cd2:	80 91 11 01 	lds	r24, 0x0111
    4cd6:	1f 92       	push	r1
    4cd8:	8f 93       	push	r24
    4cda:	8b eb       	ldi	r24, 0xBB	; 187
    4cdc:	94 e0       	ldi	r25, 0x04	; 4
    4cde:	9f 93       	push	r25
    4ce0:	8f 93       	push	r24
    4ce2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4ce6:	89 eb       	ldi	r24, 0xB9	; 185
    4ce8:	94 e0       	ldi	r25, 0x04	; 4
    4cea:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    4cee:	88 ea       	ldi	r24, 0xA8	; 168
    4cf0:	94 e0       	ldi	r25, 0x04	; 4
    4cf2:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4cf6:	80 91 10 01 	lds	r24, 0x0110
    4cfa:	1f 92       	push	r1
    4cfc:	8f 93       	push	r24
    4cfe:	85 ea       	ldi	r24, 0xA5	; 165
    4d00:	94 e0       	ldi	r25, 0x04	; 4
    4d02:	9f 93       	push	r25
    4d04:	8f 93       	push	r24
    4d06:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4d0a:	83 ea       	ldi	r24, 0xA3	; 163
    4d0c:	94 e0       	ldi	r25, 0x04	; 4
    4d0e:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    4d12:	8e e8       	ldi	r24, 0x8E	; 142
    4d14:	94 e0       	ldi	r25, 0x04	; 4
    4d16:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4d1a:	80 91 0f 01 	lds	r24, 0x010F
    4d1e:	1f 92       	push	r1
    4d20:	8f 93       	push	r24
    4d22:	8b e8       	ldi	r24, 0x8B	; 139
    4d24:	94 e0       	ldi	r25, 0x04	; 4
    4d26:	9f 93       	push	r25
    4d28:	8f 93       	push	r24
    4d2a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4d2e:	89 e8       	ldi	r24, 0x89	; 137
    4d30:	94 e0       	ldi	r25, 0x04	; 4
    4d32:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4d36:	82 e7       	ldi	r24, 0x72	; 114
    4d38:	94 e0       	ldi	r25, 0x04	; 4
    4d3a:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4d3e:	80 91 0e 01 	lds	r24, 0x010E
    4d42:	1f 92       	push	r1
    4d44:	8f 93       	push	r24
    4d46:	8f e6       	ldi	r24, 0x6F	; 111
    4d48:	94 e0       	ldi	r25, 0x04	; 4
    4d4a:	9f 93       	push	r25
    4d4c:	8f 93       	push	r24
    4d4e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4d52:	8d e6       	ldi	r24, 0x6D	; 109
    4d54:	94 e0       	ldi	r25, 0x04	; 4
    4d56:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
    4d5a:	8d b7       	in	r24, 0x3d	; 61
    4d5c:	9e b7       	in	r25, 0x3e	; 62
    4d5e:	48 96       	adiw	r24, 0x18	; 24
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	f8 94       	cli
    4d64:	9e bf       	out	0x3e, r25	; 62
    4d66:	0f be       	out	0x3f, r0	; 63
    4d68:	8d bf       	out	0x3d, r24	; 61
    4d6a:	1b c0       	rjmp	.+54     	; 0x4da2 <command_proc+0x266>
    4d6c:	ce 51       	subi	r28, 0x1E	; 30
    4d6e:	ec 2f       	mov	r30, r28
    4d70:	f0 e0       	ldi	r31, 0x00	; 0
    4d72:	e8 5d       	subi	r30, 0xD8	; 216
    4d74:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    4d76:	80 81       	ld	r24, Z
    4d78:	80 93 ae 01 	sts	0x01AE, r24
    4d7c:	12 c0       	rjmp	.+36     	; 0x4da2 <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    4d7e:	61 e0       	ldi	r22, 0x01	; 1
    4d80:	03 c0       	rjmp	.+6      	; 0x4d88 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    4d82:	61 e0       	ldi	r22, 0x01	; 1
    4d84:	06 c0       	rjmp	.+12     	; 0x4d92 <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    4d86:	6a e0       	ldi	r22, 0x0A	; 10
    4d88:	80 91 ae 01 	lds	r24, 0x01AE
    4d8c:	0e 94 0c 22 	call	0x4418	; 0x4418 <mousekey_param_inc>
    4d90:	08 c0       	rjmp	.+16     	; 0x4da2 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4d92:	80 91 ae 01 	lds	r24, 0x01AE
    4d96:	0e 94 af 22 	call	0x455e	; 0x455e <mousekey_param_dec>
    4d9a:	03 c0       	rjmp	.+6      	; 0x4da2 <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    4d9c:	82 e1       	ldi	r24, 0x12	; 18
    4d9e:	95 e0       	ldi	r25, 0x05	; 5
    4da0:	13 c0       	rjmp	.+38     	; 0x4dc8 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    4da2:	80 91 ae 01 	lds	r24, 0x01AE
    4da6:	88 23       	and	r24, r24
    4da8:	69 f0       	breq	.+26     	; 0x4dc4 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    4daa:	1f 92       	push	r1
    4dac:	8f 93       	push	r24
    4dae:	8c e0       	ldi	r24, 0x0C	; 12
    4db0:	95 e0       	ldi	r25, 0x05	; 5
    4db2:	9f 93       	push	r25
    4db4:	8f 93       	push	r24
    4db6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__xprintf>
    4dba:	0f 90       	pop	r0
    4dbc:	0f 90       	pop	r0
    4dbe:	0f 90       	pop	r0
    4dc0:	0f 90       	pop	r0
    4dc2:	04 c0       	rjmp	.+8      	; 0x4dcc <command_proc+0x290>
    } else {
        print("M>" );
    4dc4:	89 e0       	ldi	r24, 0x09	; 9
    4dc6:	95 e0       	ldi	r25, 0x05	; 5
    4dc8:	0e 94 96 05 	call	0xb2c	; 0xb2c <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	06 c0       	rjmp	.+12     	; 0x4ddc <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    4dd0:	10 92 af 01 	sts	0x01AF, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
    4dd6:	02 c0       	rjmp	.+4      	; 0x4ddc <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	00 cf       	rjmp	.-512    	; 0x4bdc <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    4ddc:	cf 91       	pop	r28
    4dde:	08 95       	ret

00004de0 <__fixsfsi>:
    4de0:	04 d0       	rcall	.+8      	; 0x4dea <__fixunssfsi>
    4de2:	68 94       	set
    4de4:	b1 11       	cpse	r27, r1
    4de6:	8d c0       	rjmp	.+282    	; 0x4f02 <__fp_szero>
    4de8:	08 95       	ret

00004dea <__fixunssfsi>:
    4dea:	70 d0       	rcall	.+224    	; 0x4ecc <__fp_splitA>
    4dec:	88 f0       	brcs	.+34     	; 0x4e10 <__fixunssfsi+0x26>
    4dee:	9f 57       	subi	r25, 0x7F	; 127
    4df0:	90 f0       	brcs	.+36     	; 0x4e16 <__fixunssfsi+0x2c>
    4df2:	b9 2f       	mov	r27, r25
    4df4:	99 27       	eor	r25, r25
    4df6:	b7 51       	subi	r27, 0x17	; 23
    4df8:	a0 f0       	brcs	.+40     	; 0x4e22 <__fixunssfsi+0x38>
    4dfa:	d1 f0       	breq	.+52     	; 0x4e30 <__fixunssfsi+0x46>
    4dfc:	66 0f       	add	r22, r22
    4dfe:	77 1f       	adc	r23, r23
    4e00:	88 1f       	adc	r24, r24
    4e02:	99 1f       	adc	r25, r25
    4e04:	1a f0       	brmi	.+6      	; 0x4e0c <__fixunssfsi+0x22>
    4e06:	ba 95       	dec	r27
    4e08:	c9 f7       	brne	.-14     	; 0x4dfc <__fixunssfsi+0x12>
    4e0a:	12 c0       	rjmp	.+36     	; 0x4e30 <__fixunssfsi+0x46>
    4e0c:	b1 30       	cpi	r27, 0x01	; 1
    4e0e:	81 f0       	breq	.+32     	; 0x4e30 <__fixunssfsi+0x46>
    4e10:	77 d0       	rcall	.+238    	; 0x4f00 <__fp_zero>
    4e12:	b1 e0       	ldi	r27, 0x01	; 1
    4e14:	08 95       	ret
    4e16:	74 c0       	rjmp	.+232    	; 0x4f00 <__fp_zero>
    4e18:	67 2f       	mov	r22, r23
    4e1a:	78 2f       	mov	r23, r24
    4e1c:	88 27       	eor	r24, r24
    4e1e:	b8 5f       	subi	r27, 0xF8	; 248
    4e20:	39 f0       	breq	.+14     	; 0x4e30 <__fixunssfsi+0x46>
    4e22:	b9 3f       	cpi	r27, 0xF9	; 249
    4e24:	cc f3       	brlt	.-14     	; 0x4e18 <__fixunssfsi+0x2e>
    4e26:	86 95       	lsr	r24
    4e28:	77 95       	ror	r23
    4e2a:	67 95       	ror	r22
    4e2c:	b3 95       	inc	r27
    4e2e:	d9 f7       	brne	.-10     	; 0x4e26 <__fixunssfsi+0x3c>
    4e30:	3e f4       	brtc	.+14     	; 0x4e40 <__fixunssfsi+0x56>
    4e32:	90 95       	com	r25
    4e34:	80 95       	com	r24
    4e36:	70 95       	com	r23
    4e38:	61 95       	neg	r22
    4e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e40:	08 95       	ret

00004e42 <__floatunsisf>:
    4e42:	e8 94       	clt
    4e44:	09 c0       	rjmp	.+18     	; 0x4e58 <__floatsisf+0x12>

00004e46 <__floatsisf>:
    4e46:	97 fb       	bst	r25, 7
    4e48:	3e f4       	brtc	.+14     	; 0x4e58 <__floatsisf+0x12>
    4e4a:	90 95       	com	r25
    4e4c:	80 95       	com	r24
    4e4e:	70 95       	com	r23
    4e50:	61 95       	neg	r22
    4e52:	7f 4f       	sbci	r23, 0xFF	; 255
    4e54:	8f 4f       	sbci	r24, 0xFF	; 255
    4e56:	9f 4f       	sbci	r25, 0xFF	; 255
    4e58:	99 23       	and	r25, r25
    4e5a:	a9 f0       	breq	.+42     	; 0x4e86 <__floatsisf+0x40>
    4e5c:	f9 2f       	mov	r31, r25
    4e5e:	96 e9       	ldi	r25, 0x96	; 150
    4e60:	bb 27       	eor	r27, r27
    4e62:	93 95       	inc	r25
    4e64:	f6 95       	lsr	r31
    4e66:	87 95       	ror	r24
    4e68:	77 95       	ror	r23
    4e6a:	67 95       	ror	r22
    4e6c:	b7 95       	ror	r27
    4e6e:	f1 11       	cpse	r31, r1
    4e70:	f8 cf       	rjmp	.-16     	; 0x4e62 <__floatsisf+0x1c>
    4e72:	fa f4       	brpl	.+62     	; 0x4eb2 <__floatsisf+0x6c>
    4e74:	bb 0f       	add	r27, r27
    4e76:	11 f4       	brne	.+4      	; 0x4e7c <__floatsisf+0x36>
    4e78:	60 ff       	sbrs	r22, 0
    4e7a:	1b c0       	rjmp	.+54     	; 0x4eb2 <__floatsisf+0x6c>
    4e7c:	6f 5f       	subi	r22, 0xFF	; 255
    4e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e80:	8f 4f       	sbci	r24, 0xFF	; 255
    4e82:	9f 4f       	sbci	r25, 0xFF	; 255
    4e84:	16 c0       	rjmp	.+44     	; 0x4eb2 <__floatsisf+0x6c>
    4e86:	88 23       	and	r24, r24
    4e88:	11 f0       	breq	.+4      	; 0x4e8e <__floatsisf+0x48>
    4e8a:	96 e9       	ldi	r25, 0x96	; 150
    4e8c:	11 c0       	rjmp	.+34     	; 0x4eb0 <__floatsisf+0x6a>
    4e8e:	77 23       	and	r23, r23
    4e90:	21 f0       	breq	.+8      	; 0x4e9a <__floatsisf+0x54>
    4e92:	9e e8       	ldi	r25, 0x8E	; 142
    4e94:	87 2f       	mov	r24, r23
    4e96:	76 2f       	mov	r23, r22
    4e98:	05 c0       	rjmp	.+10     	; 0x4ea4 <__floatsisf+0x5e>
    4e9a:	66 23       	and	r22, r22
    4e9c:	71 f0       	breq	.+28     	; 0x4eba <__floatsisf+0x74>
    4e9e:	96 e8       	ldi	r25, 0x86	; 134
    4ea0:	86 2f       	mov	r24, r22
    4ea2:	70 e0       	ldi	r23, 0x00	; 0
    4ea4:	60 e0       	ldi	r22, 0x00	; 0
    4ea6:	2a f0       	brmi	.+10     	; 0x4eb2 <__floatsisf+0x6c>
    4ea8:	9a 95       	dec	r25
    4eaa:	66 0f       	add	r22, r22
    4eac:	77 1f       	adc	r23, r23
    4eae:	88 1f       	adc	r24, r24
    4eb0:	da f7       	brpl	.-10     	; 0x4ea8 <__floatsisf+0x62>
    4eb2:	88 0f       	add	r24, r24
    4eb4:	96 95       	lsr	r25
    4eb6:	87 95       	ror	r24
    4eb8:	97 f9       	bld	r25, 7
    4eba:	08 95       	ret

00004ebc <__fp_split3>:
    4ebc:	57 fd       	sbrc	r21, 7
    4ebe:	90 58       	subi	r25, 0x80	; 128
    4ec0:	44 0f       	add	r20, r20
    4ec2:	55 1f       	adc	r21, r21
    4ec4:	59 f0       	breq	.+22     	; 0x4edc <__fp_splitA+0x10>
    4ec6:	5f 3f       	cpi	r21, 0xFF	; 255
    4ec8:	71 f0       	breq	.+28     	; 0x4ee6 <__fp_splitA+0x1a>
    4eca:	47 95       	ror	r20

00004ecc <__fp_splitA>:
    4ecc:	88 0f       	add	r24, r24
    4ece:	97 fb       	bst	r25, 7
    4ed0:	99 1f       	adc	r25, r25
    4ed2:	61 f0       	breq	.+24     	; 0x4eec <__fp_splitA+0x20>
    4ed4:	9f 3f       	cpi	r25, 0xFF	; 255
    4ed6:	79 f0       	breq	.+30     	; 0x4ef6 <__fp_splitA+0x2a>
    4ed8:	87 95       	ror	r24
    4eda:	08 95       	ret
    4edc:	12 16       	cp	r1, r18
    4ede:	13 06       	cpc	r1, r19
    4ee0:	14 06       	cpc	r1, r20
    4ee2:	55 1f       	adc	r21, r21
    4ee4:	f2 cf       	rjmp	.-28     	; 0x4eca <__fp_split3+0xe>
    4ee6:	46 95       	lsr	r20
    4ee8:	f1 df       	rcall	.-30     	; 0x4ecc <__fp_splitA>
    4eea:	08 c0       	rjmp	.+16     	; 0x4efc <__fp_splitA+0x30>
    4eec:	16 16       	cp	r1, r22
    4eee:	17 06       	cpc	r1, r23
    4ef0:	18 06       	cpc	r1, r24
    4ef2:	99 1f       	adc	r25, r25
    4ef4:	f1 cf       	rjmp	.-30     	; 0x4ed8 <__fp_splitA+0xc>
    4ef6:	86 95       	lsr	r24
    4ef8:	71 05       	cpc	r23, r1
    4efa:	61 05       	cpc	r22, r1
    4efc:	08 94       	sec
    4efe:	08 95       	ret

00004f00 <__fp_zero>:
    4f00:	e8 94       	clt

00004f02 <__fp_szero>:
    4f02:	bb 27       	eor	r27, r27
    4f04:	66 27       	eor	r22, r22
    4f06:	77 27       	eor	r23, r23
    4f08:	cb 01       	movw	r24, r22
    4f0a:	97 f9       	bld	r25, 7
    4f0c:	08 95       	ret

00004f0e <__mulsf3>:
    4f0e:	0b d0       	rcall	.+22     	; 0x4f26 <__mulsf3x>
    4f10:	78 c0       	rjmp	.+240    	; 0x5002 <__fp_round>
    4f12:	69 d0       	rcall	.+210    	; 0x4fe6 <__fp_pscA>
    4f14:	28 f0       	brcs	.+10     	; 0x4f20 <__mulsf3+0x12>
    4f16:	6e d0       	rcall	.+220    	; 0x4ff4 <__fp_pscB>
    4f18:	18 f0       	brcs	.+6      	; 0x4f20 <__mulsf3+0x12>
    4f1a:	95 23       	and	r25, r21
    4f1c:	09 f0       	breq	.+2      	; 0x4f20 <__mulsf3+0x12>
    4f1e:	5a c0       	rjmp	.+180    	; 0x4fd4 <__fp_inf>
    4f20:	5f c0       	rjmp	.+190    	; 0x4fe0 <__fp_nan>
    4f22:	11 24       	eor	r1, r1
    4f24:	ee cf       	rjmp	.-36     	; 0x4f02 <__fp_szero>

00004f26 <__mulsf3x>:
    4f26:	ca df       	rcall	.-108    	; 0x4ebc <__fp_split3>
    4f28:	a0 f3       	brcs	.-24     	; 0x4f12 <__mulsf3+0x4>

00004f2a <__mulsf3_pse>:
    4f2a:	95 9f       	mul	r25, r21
    4f2c:	d1 f3       	breq	.-12     	; 0x4f22 <__mulsf3+0x14>
    4f2e:	95 0f       	add	r25, r21
    4f30:	50 e0       	ldi	r21, 0x00	; 0
    4f32:	55 1f       	adc	r21, r21
    4f34:	62 9f       	mul	r22, r18
    4f36:	f0 01       	movw	r30, r0
    4f38:	72 9f       	mul	r23, r18
    4f3a:	bb 27       	eor	r27, r27
    4f3c:	f0 0d       	add	r31, r0
    4f3e:	b1 1d       	adc	r27, r1
    4f40:	63 9f       	mul	r22, r19
    4f42:	aa 27       	eor	r26, r26
    4f44:	f0 0d       	add	r31, r0
    4f46:	b1 1d       	adc	r27, r1
    4f48:	aa 1f       	adc	r26, r26
    4f4a:	64 9f       	mul	r22, r20
    4f4c:	66 27       	eor	r22, r22
    4f4e:	b0 0d       	add	r27, r0
    4f50:	a1 1d       	adc	r26, r1
    4f52:	66 1f       	adc	r22, r22
    4f54:	82 9f       	mul	r24, r18
    4f56:	22 27       	eor	r18, r18
    4f58:	b0 0d       	add	r27, r0
    4f5a:	a1 1d       	adc	r26, r1
    4f5c:	62 1f       	adc	r22, r18
    4f5e:	73 9f       	mul	r23, r19
    4f60:	b0 0d       	add	r27, r0
    4f62:	a1 1d       	adc	r26, r1
    4f64:	62 1f       	adc	r22, r18
    4f66:	83 9f       	mul	r24, r19
    4f68:	a0 0d       	add	r26, r0
    4f6a:	61 1d       	adc	r22, r1
    4f6c:	22 1f       	adc	r18, r18
    4f6e:	74 9f       	mul	r23, r20
    4f70:	33 27       	eor	r19, r19
    4f72:	a0 0d       	add	r26, r0
    4f74:	61 1d       	adc	r22, r1
    4f76:	23 1f       	adc	r18, r19
    4f78:	84 9f       	mul	r24, r20
    4f7a:	60 0d       	add	r22, r0
    4f7c:	21 1d       	adc	r18, r1
    4f7e:	82 2f       	mov	r24, r18
    4f80:	76 2f       	mov	r23, r22
    4f82:	6a 2f       	mov	r22, r26
    4f84:	11 24       	eor	r1, r1
    4f86:	9f 57       	subi	r25, 0x7F	; 127
    4f88:	50 40       	sbci	r21, 0x00	; 0
    4f8a:	8a f0       	brmi	.+34     	; 0x4fae <__mulsf3_pse+0x84>
    4f8c:	e1 f0       	breq	.+56     	; 0x4fc6 <__mulsf3_pse+0x9c>
    4f8e:	88 23       	and	r24, r24
    4f90:	4a f0       	brmi	.+18     	; 0x4fa4 <__mulsf3_pse+0x7a>
    4f92:	ee 0f       	add	r30, r30
    4f94:	ff 1f       	adc	r31, r31
    4f96:	bb 1f       	adc	r27, r27
    4f98:	66 1f       	adc	r22, r22
    4f9a:	77 1f       	adc	r23, r23
    4f9c:	88 1f       	adc	r24, r24
    4f9e:	91 50       	subi	r25, 0x01	; 1
    4fa0:	50 40       	sbci	r21, 0x00	; 0
    4fa2:	a9 f7       	brne	.-22     	; 0x4f8e <__mulsf3_pse+0x64>
    4fa4:	9e 3f       	cpi	r25, 0xFE	; 254
    4fa6:	51 05       	cpc	r21, r1
    4fa8:	70 f0       	brcs	.+28     	; 0x4fc6 <__mulsf3_pse+0x9c>
    4faa:	14 c0       	rjmp	.+40     	; 0x4fd4 <__fp_inf>
    4fac:	aa cf       	rjmp	.-172    	; 0x4f02 <__fp_szero>
    4fae:	5f 3f       	cpi	r21, 0xFF	; 255
    4fb0:	ec f3       	brlt	.-6      	; 0x4fac <__mulsf3_pse+0x82>
    4fb2:	98 3e       	cpi	r25, 0xE8	; 232
    4fb4:	dc f3       	brlt	.-10     	; 0x4fac <__mulsf3_pse+0x82>
    4fb6:	86 95       	lsr	r24
    4fb8:	77 95       	ror	r23
    4fba:	67 95       	ror	r22
    4fbc:	b7 95       	ror	r27
    4fbe:	f7 95       	ror	r31
    4fc0:	e7 95       	ror	r30
    4fc2:	9f 5f       	subi	r25, 0xFF	; 255
    4fc4:	c1 f7       	brne	.-16     	; 0x4fb6 <__mulsf3_pse+0x8c>
    4fc6:	fe 2b       	or	r31, r30
    4fc8:	88 0f       	add	r24, r24
    4fca:	91 1d       	adc	r25, r1
    4fcc:	96 95       	lsr	r25
    4fce:	87 95       	ror	r24
    4fd0:	97 f9       	bld	r25, 7
    4fd2:	08 95       	ret

00004fd4 <__fp_inf>:
    4fd4:	97 f9       	bld	r25, 7
    4fd6:	9f 67       	ori	r25, 0x7F	; 127
    4fd8:	80 e8       	ldi	r24, 0x80	; 128
    4fda:	70 e0       	ldi	r23, 0x00	; 0
    4fdc:	60 e0       	ldi	r22, 0x00	; 0
    4fde:	08 95       	ret

00004fe0 <__fp_nan>:
    4fe0:	9f ef       	ldi	r25, 0xFF	; 255
    4fe2:	80 ec       	ldi	r24, 0xC0	; 192
    4fe4:	08 95       	ret

00004fe6 <__fp_pscA>:
    4fe6:	00 24       	eor	r0, r0
    4fe8:	0a 94       	dec	r0
    4fea:	16 16       	cp	r1, r22
    4fec:	17 06       	cpc	r1, r23
    4fee:	18 06       	cpc	r1, r24
    4ff0:	09 06       	cpc	r0, r25
    4ff2:	08 95       	ret

00004ff4 <__fp_pscB>:
    4ff4:	00 24       	eor	r0, r0
    4ff6:	0a 94       	dec	r0
    4ff8:	12 16       	cp	r1, r18
    4ffa:	13 06       	cpc	r1, r19
    4ffc:	14 06       	cpc	r1, r20
    4ffe:	05 06       	cpc	r0, r21
    5000:	08 95       	ret

00005002 <__fp_round>:
    5002:	09 2e       	mov	r0, r25
    5004:	03 94       	inc	r0
    5006:	00 0c       	add	r0, r0
    5008:	11 f4       	brne	.+4      	; 0x500e <__fp_round+0xc>
    500a:	88 23       	and	r24, r24
    500c:	52 f0       	brmi	.+20     	; 0x5022 <__fp_round+0x20>
    500e:	bb 0f       	add	r27, r27
    5010:	40 f4       	brcc	.+16     	; 0x5022 <__fp_round+0x20>
    5012:	bf 2b       	or	r27, r31
    5014:	11 f4       	brne	.+4      	; 0x501a <__fp_round+0x18>
    5016:	60 ff       	sbrs	r22, 0
    5018:	04 c0       	rjmp	.+8      	; 0x5022 <__fp_round+0x20>
    501a:	6f 5f       	subi	r22, 0xFF	; 255
    501c:	7f 4f       	sbci	r23, 0xFF	; 255
    501e:	8f 4f       	sbci	r24, 0xFF	; 255
    5020:	9f 4f       	sbci	r25, 0xFF	; 255
    5022:	08 95       	ret

00005024 <__udivmodqi4>:
    5024:	99 1b       	sub	r25, r25
    5026:	79 e0       	ldi	r23, 0x09	; 9
    5028:	04 c0       	rjmp	.+8      	; 0x5032 <__udivmodqi4_ep>

0000502a <__udivmodqi4_loop>:
    502a:	99 1f       	adc	r25, r25
    502c:	96 17       	cp	r25, r22
    502e:	08 f0       	brcs	.+2      	; 0x5032 <__udivmodqi4_ep>
    5030:	96 1b       	sub	r25, r22

00005032 <__udivmodqi4_ep>:
    5032:	88 1f       	adc	r24, r24
    5034:	7a 95       	dec	r23
    5036:	c9 f7       	brne	.-14     	; 0x502a <__udivmodqi4_loop>
    5038:	80 95       	com	r24
    503a:	08 95       	ret

0000503c <__divmodhi4>:
    503c:	97 fb       	bst	r25, 7
    503e:	07 2e       	mov	r0, r23
    5040:	16 f4       	brtc	.+4      	; 0x5046 <__divmodhi4+0xa>
    5042:	00 94       	com	r0
    5044:	07 d0       	rcall	.+14     	; 0x5054 <__divmodhi4_neg1>
    5046:	77 fd       	sbrc	r23, 7
    5048:	09 d0       	rcall	.+18     	; 0x505c <__divmodhi4_neg2>
    504a:	0e 94 38 28 	call	0x5070	; 0x5070 <__udivmodhi4>
    504e:	07 fc       	sbrc	r0, 7
    5050:	05 d0       	rcall	.+10     	; 0x505c <__divmodhi4_neg2>
    5052:	3e f4       	brtc	.+14     	; 0x5062 <__divmodhi4_exit>

00005054 <__divmodhi4_neg1>:
    5054:	90 95       	com	r25
    5056:	81 95       	neg	r24
    5058:	9f 4f       	sbci	r25, 0xFF	; 255
    505a:	08 95       	ret

0000505c <__divmodhi4_neg2>:
    505c:	70 95       	com	r23
    505e:	61 95       	neg	r22
    5060:	7f 4f       	sbci	r23, 0xFF	; 255

00005062 <__divmodhi4_exit>:
    5062:	08 95       	ret

00005064 <__tablejump2__>:
    5064:	ee 0f       	add	r30, r30
    5066:	ff 1f       	adc	r31, r31

00005068 <__tablejump__>:
    5068:	05 90       	lpm	r0, Z+
    506a:	f4 91       	lpm	r31, Z
    506c:	e0 2d       	mov	r30, r0
    506e:	09 94       	ijmp

00005070 <__udivmodhi4>:
    5070:	aa 1b       	sub	r26, r26
    5072:	bb 1b       	sub	r27, r27
    5074:	51 e1       	ldi	r21, 0x11	; 17
    5076:	07 c0       	rjmp	.+14     	; 0x5086 <__udivmodhi4_ep>

00005078 <__udivmodhi4_loop>:
    5078:	aa 1f       	adc	r26, r26
    507a:	bb 1f       	adc	r27, r27
    507c:	a6 17       	cp	r26, r22
    507e:	b7 07       	cpc	r27, r23
    5080:	10 f0       	brcs	.+4      	; 0x5086 <__udivmodhi4_ep>
    5082:	a6 1b       	sub	r26, r22
    5084:	b7 0b       	sbc	r27, r23

00005086 <__udivmodhi4_ep>:
    5086:	88 1f       	adc	r24, r24
    5088:	99 1f       	adc	r25, r25
    508a:	5a 95       	dec	r21
    508c:	a9 f7       	brne	.-22     	; 0x5078 <__udivmodhi4_loop>
    508e:	80 95       	com	r24
    5090:	90 95       	com	r25
    5092:	bc 01       	movw	r22, r24
    5094:	cd 01       	movw	r24, r26
    5096:	08 95       	ret

00005098 <__eerd_byte_usb1287>:
    5098:	f9 99       	sbic	0x1f, 1	; 31
    509a:	fe cf       	rjmp	.-4      	; 0x5098 <__eerd_byte_usb1287>
    509c:	92 bd       	out	0x22, r25	; 34
    509e:	81 bd       	out	0x21, r24	; 33
    50a0:	f8 9a       	sbi	0x1f, 0	; 31
    50a2:	99 27       	eor	r25, r25
    50a4:	80 b5       	in	r24, 0x20	; 32
    50a6:	08 95       	ret

000050a8 <__eerd_word_usb1287>:
    50a8:	a8 e1       	ldi	r26, 0x18	; 24
    50aa:	b0 e0       	ldi	r27, 0x00	; 0
    50ac:	42 e0       	ldi	r20, 0x02	; 2
    50ae:	50 e0       	ldi	r21, 0x00	; 0
    50b0:	0c 94 6f 28 	jmp	0x50de	; 0x50de <__eerd_blraw_usb1287>

000050b4 <__eewr_byte_usb1287>:
    50b4:	26 2f       	mov	r18, r22

000050b6 <__eewr_r18_usb1287>:
    50b6:	f9 99       	sbic	0x1f, 1	; 31
    50b8:	fe cf       	rjmp	.-4      	; 0x50b6 <__eewr_r18_usb1287>
    50ba:	1f ba       	out	0x1f, r1	; 31
    50bc:	92 bd       	out	0x22, r25	; 34
    50be:	81 bd       	out	0x21, r24	; 33
    50c0:	20 bd       	out	0x20, r18	; 32
    50c2:	0f b6       	in	r0, 0x3f	; 63
    50c4:	f8 94       	cli
    50c6:	fa 9a       	sbi	0x1f, 2	; 31
    50c8:	f9 9a       	sbi	0x1f, 1	; 31
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	01 96       	adiw	r24, 0x01	; 1
    50ce:	08 95       	ret

000050d0 <__eewr_word_usb1287>:
    50d0:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__eewr_byte_usb1287>
    50d4:	27 2f       	mov	r18, r23
    50d6:	0c 94 5b 28 	jmp	0x50b6	; 0x50b6 <__eewr_r18_usb1287>

000050da <__eerd_block_usb1287>:
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22

000050de <__eerd_blraw_usb1287>:
    50de:	fc 01       	movw	r30, r24
    50e0:	f9 99       	sbic	0x1f, 1	; 31
    50e2:	fe cf       	rjmp	.-4      	; 0x50e0 <__eerd_blraw_usb1287+0x2>
    50e4:	06 c0       	rjmp	.+12     	; 0x50f2 <__eerd_blraw_usb1287+0x14>
    50e6:	f2 bd       	out	0x22, r31	; 34
    50e8:	e1 bd       	out	0x21, r30	; 33
    50ea:	f8 9a       	sbi	0x1f, 0	; 31
    50ec:	31 96       	adiw	r30, 0x01	; 1
    50ee:	00 b4       	in	r0, 0x20	; 32
    50f0:	0d 92       	st	X+, r0
    50f2:	41 50       	subi	r20, 0x01	; 1
    50f4:	50 40       	sbci	r21, 0x00	; 0
    50f6:	b8 f7       	brcc	.-18     	; 0x50e6 <__eerd_blraw_usb1287+0x8>
    50f8:	08 95       	ret

000050fa <_exit>:
    50fa:	f8 94       	cli

000050fc <__stop_program>:
    50fc:	ff cf       	rjmp	.-2      	; 0x50fc <__stop_program>
